package proto_ff;

// calm 自定义的fieldoption都在该文件中
import "yd_fieldoptions.proto";

// 账号类型
enum Proto_AccountType {
    E_VISITOR       = 0;
    E_FACEBOOKID    = 1;
    E_WECHAT		= 2;
};

// 性别
enum Proto_SexType {
    E_MALE          = 0;
    E_FEMALE        = 1;
}

// 平台类型
enum Proto_PlatType {
	E_PLAT_NONE		= 0;
    E_PLAT_ANDROID  = 1;
    E_PLAT_IOS      = 2;
    E_PLAT_WP       = 3;
    E_PLAT_MAX 		= 4;
}

// 网络类型
enum Proto_NetworkType {
    E_NETWORK_2G    = 0;
    E_NETWORK_3G    = 1;
    E_NETWORK_4G    = 2;
    E_NETWORK_WIFI  = 3;
}

//登录状态
enum Proto_PlayerCreateState
{
	E_CREATE_SUCESS = 0;
	E_CREATE_REGIST_NAME = 1;
	E_CREATE_WAIT_NAME = 2;
}

//单局判定的结果种类
enum Proto_RoundRltType
{
	E_ROUNDRLT_NONE = 0;			
	E_ROUNDRLT_ONEDEAD = 1;		//单局未超时，一方英雄死亡,另一方胜利
	E_ROUNDRLT_HP = 2;			//单局超时，以剩余血量百分比多者为胜利
	E_ROUNDRLT_MAXHP = 3;		//单局超时，剩余血量百分比相等，以最大生命值那方为胜利
	E_ROUNDRLT_RAND = 4;		//单局未超时，剩余血量百分比和最大生命值都两方相等，随机出一方胜利
}

enum enComputerAILevel
{
	EN_AI_LEVEL_NULL = 0;      //无
	EN_AI_LEVEL_SIMPLE = 1[(yd_fieldoptions.field_enum_cname) = "简单"];   //简单
	EN_AI_LEVEL_HARD = 2[(yd_fieldoptions.field_enum_cname) = "困难"];    //困难
	EN_AI_LEVEL_MASTER = 3[(yd_fieldoptions.field_enum_cname) = "宗师"];  //宗师

	EN_AI_LEVEL_MAX = 8; 
}

enum enLevelMode
{
	ELT_NONE           = 0 [(yd_fieldoptions.field_enum_cname) = "无"];
	ELT_Solo_PvE       = 1 [(yd_fieldoptions.field_enum_cname) = "单人Pve"]; 
	ELT_PVE            = 2 [(yd_fieldoptions.field_enum_cname) = "多人Pve"];
	ELT_NORMAL         = 3 [(yd_fieldoptions.field_enum_cname) = "PVP_多Round"];
	ELT_General        = 4 [(yd_fieldoptions.field_enum_cname) = "常规战场"];
	ELT_Wheel_War      = 5 [(yd_fieldoptions.field_enum_cname) = "车轮战"];
	ELT_TRAINING       = 7 [(yd_fieldoptions.field_enum_cname) = "练习赛"];
	ELT_GUILDWAR       = 8 [(yd_fieldoptions.field_enum_cname) = "公会战"];
	ELT_MELEE	       = 9 [(yd_fieldoptions.field_enum_cname) = "大乱斗玩法"]; 
	ELT_PARTNER        = 10[(yd_fieldoptions.field_enum_cname) = "伙伴对战"]; 
	ELT_GUILD          = 11[(yd_fieldoptions.field_enum_cname) = "新公会战"]; 
	ELT_WHEEL          = 12[(yd_fieldoptions.field_enum_cname) = "模拟积分赛"];  
	ELT_PARTNER_GUIDE  = 13[(yd_fieldoptions.field_enum_cname) = "伙伴对战引导"];
	ELT_MAGIC          = 14[(yd_fieldoptions.field_enum_cname) = "魔境挑战"];
	ELT_TRAINING_GUIDE = 15[(yd_fieldoptions.field_enum_cname) = "练习赛引导"];
	ELT_PVE_EX         = 16[(yd_fieldoptions.field_enum_cname) = "多人Pve扩展"];
	ELT_PARTNER_ASYNC  = 17[(yd_fieldoptions.field_enum_cname) = "伙伴异步对战"];
}

enum enLevelCreateMethod
{
	E_Level_Create_By_Default = 0; //默认方式，包括单人关卡
	E_Level_Create_By_Custom = 1; //自定义
	E_Level_Create_By_Match = 2; //匹配
	E_Level_Create_By_Rift = 3; //大秘境
	E_Level_Create_By_experiment = 4;//猎人试炼
	E_Level_Create_By_Pledge = 5; //誓约之境
}

enum enGuildCampType
{
    EN_GUILD_CAMP_TYPE_NONE = 0; //暂时没有的阵营, 以后给中立路人用
    EN_GUILD_CAMP_TYPE_A    = 1; //阵营A
	EN_GUILD_CAMP_TYPE_B    = 2; //阵营B
}

message Proto_RoleTimeValue
{
	required uint32 value				= 1; //
	required uint32 next_add_value_time	= 2; //下一次自动增加时间
}

message Proto_IdTypeItem //类型Id元素
{
	required uint32 id 			= 1; // ID
	required uint32 type		= 2; // 类型
}

enum enConstParam
{
	EN_CONST_SOULBOX_CLICK_TIME		= 600; //魂匣子一次点击减少的时间
	EN_CONST_SOULBOX_CLICK_TAX			= 100; //魂匣子一次点击增加的公会贡献值
	EN_CONST_SOULBOX_CLICK_MAX			= 10;
}

enum enPlayerZodiac
{
	EN_PLAYER_ARIES 		= 0;					// 白羊座
	EN_PLAYER_TAURUS 		= 1;					// 金牛座
	EN_PLAYER_GEMINI		= 2;					// 双子座
	EN_PLAYER_CANCER		= 3;					// 巨蟹座
	EN_PLAYER_LEO			= 4; 					// 狮子座
	EN_PLAYER_VIRGO			= 5; 					// 处女座
	EN_PLAYER_LIBRA			= 6; 					// 天秤座
	EN_PLAYER_SCORPIO		= 7;  					// 天蝎座
	EN_PLAYER_SAGITTARIUS	= 8;					// 射手座
	EN_PLAYER_CAPRICORN		= 9; 					// 摩羯座
	EN_PLAYER_AQUARIUS		= 10;					// 水瓶座
	EN_PLAYER_PISCES		= 11;					// 双鱼座
}

enum enSexType
{
	EN_SEX_HANDSOME			= 0;		
	EN_SEX_BEATY			= 1;
	EN_SEX_GUESS			= 2;
}


enum enWearCategory
{
	EN_WARE_CATEGORY_WEAPON       = 1;     //武器
	EN_WARE_CATEGORY_HAT          = 2;     //帽子
	EN_WARE_CATEGORY_CUFF         = 3;     //护手
	EN_WARE_CATEGORY_CLOTH        = 4;     //衣服
	EN_WARE_CATEGORY_TROUSERS     = 5;     //裤子	
	EN_WARE_CATEGORY_SHOES        = 6;     //鞋子
	EN_WARE_CATEGORY_EARRINGS     = 7;     //饰品
	EN_WARE_CATEGORY_NECKLACE     = 8;     //项链
	EN_WARE_CATEGORY_AMULET       = 9;     //护符
}


// 玩家职业
// 现在暂时没有职业，填三个测试
enum enProfessionType
{
	EN_PROFESSION_NONE = 0;
	EN_PROFESSION_A = 1;		// 强化系
	EN_PROFESSION_B = 2;		// 变化系
	EN_PROFESSION_C = 3;		// 放出系
	EN_PROFESSION_D = 4;		// 具现化系
	EN_PROFESSION_E = 5;		// 操作系
	EN_PROFESSION_F = 6;		// 特质系
}

// 猎人职业
enum ENHunterProfType
{
	EN_HUNTER_PROF_NULL				= 0;		// 没有猎人职业（属于默认值）
	EN_HUNTER_PROF_FOOD				= 1;		// 美食猎人
	EN_HUNTER_PROF_DRUG				= 2;		// 药剂猎人
	EN_HUNTER_PROF_PLANT			= 3;		// 种植猎人
	EN_HUNTER_PROF_SMITH			= 4;		// 锻造猎人
	EN_HUNTER_PROF_DISCOVERY    	= 5;		// 寻宝猎人
}

enum enElementType
{
    EN_ELEMENT_TYPE_NONE = 0; //无属性
    EN_ELEMENT_TYPE_COLD = 1; //冰属性
    EN_ELEMENT_TYPE_FIRE = 2; //火属性
    EN_ELEMENT_TYPE_MINE = 3; //雷属性
    EN_ELEMENT_TYPE_WIND = 4; //风属性
}

enum ChatChannel
{
	E_Chat_Channel_All = 0;        //禁言使用，表示所有频道
	E_Chat_Channel_World = 1;      //世界
	E_Chat_Channel_Guild = 2;      //公会
	E_Chat_Channel_Team = 3;       //队伍
	E_Chat_Channel_Team_Match = 4; //组队频道
	E_Chat_Channel_System = 5;     //系统
	E_Chat_Channel_Private = 6;    //个人
	E_Chat_Channel_Map = 7;        //当前地图
	E_Chat_Channel_Profession = 8; //职业频道
	E_Chat_Channel_Room		= 9;	// 房间频道
	
	E_Chat_Channel_Alert = 11;     //战斗频道-警告
	E_Chat_Channel_Emoji = 12;     //战斗频道-头顶表情
	E_Chat_Channel_Help = 13; //呼救频道
    E_Chat_Channel_Guild_Question = 14; // 行会答题,用于tlog
}

message GradeInfo
{
    optional int32        honor_grade = 1;
	optional int32        star        = 2;
	optional int32        score       = 3;
}

message Birthday
{
	optional int32 year = 1;
	optional int32 month = 2;
	optional int32 day = 3;
}

message QQDataReportMsg
{
    optional int32 type = 1;
    optional int32 bcover = 2;
    optional string data = 3;
    optional string expires = 4;
}

message QQGroupInfo
{
    optional string id = 1[(yd_fieldoptions.field_bufsize)=16, (yd_fieldoptions.field_string_len)=16];
    optional string name = 2[(yd_fieldoptions.field_bufsize)=128, (yd_fieldoptions.field_string_len)=128];
}

enum QQVIPType
{
    VIP_NORMAL          = 1;
    VIP_QQ_LEVEL        = 2;  //QQ等级，只需要关注level参数，其它无效
    VIP_BLUE            = 4;
    VIP_RED             = 8; //红钻没有年费会员标识返回
    VIP_SUPER           = 16;  //QQ超级会员，只有isvip有效
    VIP_XINYUE          = 64;   //心悦俱乐部特权会员，该标志位请求时只有isvip及level有效
    VIP_YELLOW          = 128;  //黄钻会员
    VIP_ANIMIC          = 256;  //动漫会员，只有isvip有效
    VIP_XINYUE_NEW      = 512;  //心悦等级（新接口）
}

message QQVIPInfo
{
	optional QQVIPType flag = 1;
    optional bool is_vip = 2; // 判断用户VIP状态的唯一标识 NO:0, YES:1
    optional bool is_year = 3;//是否年费 NO:0, YES:1
    optional uint32 level = 4;
    optional bool is_luxury = 5; //是否豪华版 NO:0, YES:1
}

message QQGameFriend
{
    optional string open_id = 1;
    optional string nick_name = 2;
    optional string gender = 3;
    optional string figure_url = 4;    
}

message QQGameCloseFriendList
{
    repeated string open_id = 1;
}

message QQGameFriendExtInfo
{
    optional QQGameCloseFriendList close_friend_list = 1;
}

message TXRelationInfo
{
	optional string nick_name			= 1 [(yd_fieldoptions.field_bufsize)=128, (yd_fieldoptions.field_string_len)=128]; //昵称
	optional string gender				= 2 [(yd_fieldoptions.field_bufsize)=16, (yd_fieldoptions.field_string_len)=16];   //性别
	optional string picture_forty		= 3 [(yd_fieldoptions.field_bufsize)=256, (yd_fieldoptions.field_string_len)=256]; //最小头像（qq头像url是40*40，微信64*64）
	optional string picture_hundred		= 4 [(yd_fieldoptions.field_bufsize)=256, (yd_fieldoptions.field_string_len)=256]; //可选头像，不是所有的用户都拥有（qq头像url是100*100，微信96*96）
	
	// 手q独有
	optional int32 yellow_vip			= 5;	// 是否是黄钻用户，0表示没有黄钻
	optional int32 yellow_vip_level		= 6;	// 黄钻等级
	optional int32 yellow_year_vip		= 7;	// 是否是年费黄钻用户，0表示否
	
	// 微信独有
	optional string country				= 8 [(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64];   	//国家
	optional string province			= 9 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];    //省份
	optional string city				= 10 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];   //城市
	optional string union_id			= 11 [(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64];   //用户统一标识
}

message TXRoleBaseInfo
{
	optional bool is_check_name = 1[default=false];			// 是否实名认证(初始值都是由tbRoleList来赋值)
	optional TXRelationInfo base_info = 2;					// qq账号基本信息
}

message RoleBase
{
	required uint64                  role_id 				        = 1;  //角色唯一ID
	required uint32	                 world_id				        = 2;  //目录区ID
	required string                  name 						    = 3  [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
	required uint32                  level						    = 4;  //角色等级
	required uint64                  exp							= 5;  //角色经验
	optional int32                   role_ce                  	    = 6;  //combat effectiveness,战斗力
	//required uint64                money						    = 6;  //金币
	//required uint64                diamond					    = 7;  //钻石
	required int32	                 rank						    = 8;  //RANK
	required int32 	                 division 					    = 9;  //段位
	required uint32                  avatar_id					    = 10; //指挥官头像
	required uint32                  create_time					= 11; //角色创建时间
	required uint32                  last_login_time				= 12; //上次登录时间
	required uint32                  last_logout_time			    = 13; //上次登出时间
	required Proto_IdTypeItem        logo_id			            = 14; //角色图标ID
	required Proto_RoleTimeValue     time_prop		                = 15; //角色时间自增属性
    optional Proto_PlayerCreateState login_state                    = 16 [default = E_CREATE_WAIT_NAME]; //注册状态
	optional string                  signature 					    = 17 [(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64]; //签名
//	optional uint64                  piece_public_time			    = 18; // 公会碎片发布援助的时间
	optional uint32                  sealed_time					= 19; // 玩家被封号结束时间
	optional Birthday                birthday				        = 20; // 本人生日
	optional enPlayerZodiac          zodiac			                = 21; // 本人星座
	optional enSexType               sex					        = 22; // 本人性别
	optional string	                 location				        = 23 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; // 所在省市
	optional enProfessionType        profession	                    = 24 [default=EN_PROFESSION_NONE]; // 职业
	optional string                  be_used_name 			        = 25 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //最近用过的角色名
    optional bool                    auto_fight                     = 26; //自动战斗状态
	optional bool 					 is_public_base					= 27; //是否公开基础信息
	optional bool 					 is_public_sns					= 28; //是否公开社交信息
	optional bool 					 is_public_equip				= 29; //是否公开装备信息
	optional bool   				 is_public_partner				= 30; //是否公开伙伴信息
	optional bool 				 	 is_public_rune					= 31; //是否公开念纹信息
	optional int32                   silent_time                    = 32; //禁言结束时间
	optional int64					 phone_num						= 34; //玩家手机号码
	optional string                  open_id 						= 35 [(yd_fieldoptions.field_bufsize)=128, (yd_fieldoptions.field_string_len)=128]; //角色open_id
	optional ENHunterProfType        hunter_prof					= 36 [default = EN_HUNTER_PROF_NULL];
	optional int32                   today_online_time              = 37; //当前累计在线时间
    repeated QQVIPInfo               qqvip_info                     = 38 [(yd_fieldoptions.field_arysize)=16]; //QQ会员信息
	optional bool					 is_hall_invited				= 39; //是否在大厅时接收邀请
	optional TXRoleBaseInfo	  		 tx_base_info					= 40;
};

enum AttrType
{
	option allow_alias              = false;
	EN_ATTR_MIN                     = 0; //最小值
	EN_ATTR_LEVEL                   = 1[(yd_fieldoptions.field_enum_cname) = "等级"]; //等级
	EN_ATTR_STR                     = 2[(yd_fieldoptions.field_enum_cname) = "力量"]; //力量
	EN_ATTR_MAG                     = 3[(yd_fieldoptions.field_enum_cname) = "念力"]; //念力
	EN_ATTR_VIT                     = 4[(yd_fieldoptions.field_enum_cname) = "耐力"]; //耐力
	EN_ATTR_SPR                     = 5[(yd_fieldoptions.field_enum_cname) = "精神"]; //精神
	EN_ATTR_DEX                     = 6[(yd_fieldoptions.field_enum_cname) = "体质"]; //体质
	EN_ATTR_LUCK                    = 7[(yd_fieldoptions.field_enum_cname) = "运气"]; //运气
	EN_ATTR_PHY_DMG                 = 8[(yd_fieldoptions.field_enum_cname) = "力攻击"]; //攻击力
	EN_ATTR_MGC_DMG                 = 9[(yd_fieldoptions.field_enum_cname) = "念攻击"]; //法击力
	
	EN_ATTR_ARMOR                   = 10[(yd_fieldoptions.field_enum_cname) = "护甲"]; //护甲
	EN_ATTR_RESIST                  = 11[(yd_fieldoptions.field_enum_cname) = "魔防"]; //魔防
	EN_ATTR_CRI_RATE                = 12[(yd_fieldoptions.field_enum_cname) = "会心攻击"]; //暴击率
	EN_ATTR_CRI_RATE_RDU            = 13[(yd_fieldoptions.field_enum_cname) = "会心防御"]; //暴击率减免
	EN_ATTR_CRI_DMG                 = 14[(yd_fieldoptions.field_enum_cname) = "暴击伤害"]; //暴击伤害
	EN_ATTR_CRI_DMG_RDU             = 15[(yd_fieldoptions.field_enum_cname) = "暴击伤害减免"]; //暴击伤害减免
	EN_ATTR_MOV_SPD                 = 16[(yd_fieldoptions.field_enum_cname) = "移动速度"]; //移动速度
	EN_ATTR_ACT_SPD                 = 17[(yd_fieldoptions.field_enum_cname) = "攻击速度"]; //攻击速度
	EN_ATTR_CTL_ENHANCE             = 18[(yd_fieldoptions.field_enum_cname) = "控制命中修正"]; //控制命中修正
	EN_ATTR_CTL_RESIST              = 19[(yd_fieldoptions.field_enum_cname) = "控制抗性修正"]; //控制抗性修正
	
	EN_ATTR_MAX_SP                  = 20[(yd_fieldoptions.field_enum_cname) = "气力最大值"];//气力最大值
	EN_ATTR_RECOVER_SP              = 21[(yd_fieldoptions.field_enum_cname) = "气力回复值"]; //气力回复值

	EN_ATTR_MAX_HP                  = 22[(yd_fieldoptions.field_enum_cname) = "最大生命值"];//最大生命值
	EN_ATTR_HP                      = 23[(yd_fieldoptions.field_enum_cname) = "当前生命值"]; //当前生命值

	EN_ATTR_DMG_AMPLIFY             = 24[(yd_fieldoptions.field_enum_cname) = "伤害放大"]; //攻击修正
	EN_ATTR_DEF_AMPLIFY             = 25[(yd_fieldoptions.field_enum_cname) = "伤害减免"]; //防御修正

	EN_ATTR_MAX_HEALTH_SUPER        = 26[(yd_fieldoptions.field_enum_cname) = "最大护盾值"]; //最大护盾值
	EN_ATTR_HEALTH_SUPER            = 27[(yd_fieldoptions.field_enum_cname) = "护盾值"]; //护盾值
	EN_ATTR_VISUAL_RANGE            = 28[(yd_fieldoptions.field_enum_cname) = "视野范围"]; //视野范围，视距
	EN_ATTR_SP                      = 29[(yd_fieldoptions.field_enum_cname) = "气力值"]; //气力值
	EN_ATTR_CUR_MAX_HP              = 30[(yd_fieldoptions.field_enum_cname) = "当前最大血量值"]; //当前最大血量值
    EN_ATTR_EXP_SUM                 = 31[(yd_fieldoptions.field_enum_cname) = "经验值"]; // 经验值
    
    EN_ATTR_BONUS_EXP               = 32[(yd_fieldoptions.field_enum_cname) = "经验加成"]; //经验加成
    EN_ATTR_BONUS_CASH              = 33[(yd_fieldoptions.field_enum_cname) = "银币加成"]; //银币加成
    EN_ATTR_ANTI_MONSTER            = 34[(yd_fieldoptions.field_enum_cname) = "封魔值"]; //封魔值
    EN_ATTR_ANTI_PLAYER             = 35[(yd_fieldoptions.field_enum_cname) = "魔力值"]; //魔力值
    
    EN_ATTR_REAL_DMG                = 36[(yd_fieldoptions.field_enum_cname) = "神圣伤害"]; //神圣伤害
    EN_ATTR_REAL_DMG_RDU            = 37[(yd_fieldoptions.field_enum_cname) = "神圣伤害减免"]; //神圣伤害减免
    EN_ATTR_CD_RDU                  = 38[(yd_fieldoptions.field_enum_cname) = "技能冷却缩短"]; //技能冷却时间缩短,百分比

	EN_ATTR_VIT_MAX_HP_FACTOR       = 39[(yd_fieldoptions.field_enum_cname) = "耐力影响最大生命值系数"];
	EN_ATTR_STR_PHY_DMG_FACTOR      = 40[(yd_fieldoptions.field_enum_cname) = "力量影响力攻击系数"];
	EN_ATTR_MAG_MGC_DMG_FACTOR      = 41[(yd_fieldoptions.field_enum_cname) = "念力影响念攻击系数"];
	EN_ATTR_DEX_ARMOR_FACTOR        = 42[(yd_fieldoptions.field_enum_cname) = "体质影响护甲系数"];
	EN_ATTR_SPR_RESIST_FACTOR       = 43[(yd_fieldoptions.field_enum_cname) = "精神影响抗性系数"];
	EN_ATTR_LUCK_CRI_RATE_FACTOR    = 44[(yd_fieldoptions.field_enum_cname) = "运气影响会心攻击系数"];
	EN_ATTR_VIT_MAX_MP_FACTOR       = 45[(yd_fieldoptions.field_enum_cname) = "耐力影响最大魔法值系数"];

	EN_ATTR_CE                      = 46; //combat effectiveness,战斗力

	EN_ATTR_HP_RECOVERY             = 47[(yd_fieldoptions.field_enum_cname) = "生命恢复"];
	EN_ATTR_DMG_REFLECT             = 48[(yd_fieldoptions.field_enum_cname) = "伤害反射"];
	EN_ATTR_VAMPIRE                 = 49[(yd_fieldoptions.field_enum_cname) = "吸血"];

	EN_ATTR_BEATBACK_X              = 50[(yd_fieldoptions.field_enum_cname) = "击退X"];
	EN_ATTR_BEATBACK_Y              = 51[(yd_fieldoptions.field_enum_cname) = "击退Y"];
	EN_ATTR_BEATBACK_Z              = 52[(yd_fieldoptions.field_enum_cname) = "击退Z"];

	EN_ATTR_BONUS_ATK_NUMB          = 53[(yd_fieldoptions.field_enum_cname) = "攻击硬直加成"];
	EN_ATTR_BONUS_NUMB_DEF          = 54[(yd_fieldoptions.field_enum_cname) = "硬直防御加成"];

	EN_ATTR_INAIR_BEDMG_AMPLIFY     = 55[(yd_fieldoptions.field_enum_cname) = "浮空受伤放大"];
	EN_ATTR_DMG_TO_HEAL_FACTOR      = 56[(yd_fieldoptions.field_enum_cname) = "回光返照系数"];

	EN_ATTR_MP                      = 57[(yd_fieldoptions.field_enum_cname) = "魔法值"]; //初始值
	EN_ATTR_MAX_MP                  = 58[(yd_fieldoptions.field_enum_cname) = "最大魔法值"]; //初始值

	EN_ATTR_PHY_DMG_FACTOR          = 59[(yd_fieldoptions.field_enum_cname) = "物理攻击加成"];//小数值
	EN_ATTR_ARMOR_FACTOR            = 60[(yd_fieldoptions.field_enum_cname) = "物理防御加成"];//小数值
	EN_ATTR_MGC_DMG_FACTOR          = 61[(yd_fieldoptions.field_enum_cname) = "法术攻击加成"];//小数值
	EN_ATTR_RESIST_FACTOR           = 62[(yd_fieldoptions.field_enum_cname) = "法术防御加成"];//小数值
	EN_ATTR_MAX_HP_FACTOR           = 63[(yd_fieldoptions.field_enum_cname) = "最大生命值加成"];//小数值
	EN_ATTR_MAX_MP_FACTOR           = 64[(yd_fieldoptions.field_enum_cname) = "最大魔法值加成"];//小数值
	EN_ATTR_CRI_RATE_FACTOR         = 65[(yd_fieldoptions.field_enum_cname) = "暴击加成"];//小数值，此处与原来的暴击指"会心攻击"

	EN_ATTR_PROF_A_DMG_AMPLIFY      = 66[(yd_fieldoptions.field_enum_cname) = "强化系技能伤害加成"]; //小数值
	EN_ATTR_PROF_B_DMG_AMPLIFY      = 67[(yd_fieldoptions.field_enum_cname) = "变化系技能伤害加成"]; //小数值
	EN_ATTR_PROF_C_DMG_AMPLIFY      = 68[(yd_fieldoptions.field_enum_cname) = "放出系技能伤害加成"]; //小数值
	EN_ATTR_PROF_D_DMG_AMPLIFY      = 69[(yd_fieldoptions.field_enum_cname) = "具现化系技能伤害加成"]; //小数值
	EN_ATTR_PROF_E_DMG_AMPLIFY      = 70[(yd_fieldoptions.field_enum_cname) = "操作系技能伤害加成"]; //小数值
	EN_ATTR_PROF_F_DMG_AMPLIFY      = 71[(yd_fieldoptions.field_enum_cname) = "特质系技能伤害加成"]; //小数值

	EN_ATTR_PHY_DMG_AMPLIFY         = 72[(yd_fieldoptions.field_enum_cname) = "物理伤害加成"];
	EN_ATTR_MGC_DMG_AMPLIFY         = 73[(yd_fieldoptions.field_enum_cname) = "法术伤害加成"];

	EN_ATTR_PROF_A_DEF_AMPLIFY      = 74[(yd_fieldoptions.field_enum_cname) = "强化系技能伤害减免"]; //小数值
	EN_ATTR_PROF_B_DEF_AMPLIFY      = 75[(yd_fieldoptions.field_enum_cname) = "变化系技能伤害减免"]; //小数值
	EN_ATTR_PROF_C_DEF_AMPLIFY      = 76[(yd_fieldoptions.field_enum_cname) = "放出系技能伤害减免"]; //小数值
	EN_ATTR_PROF_D_DEF_AMPLIFY      = 77[(yd_fieldoptions.field_enum_cname) = "具现化系技能伤害减免"]; //小数值
	EN_ATTR_PROF_E_DEF_AMPLIFY      = 78[(yd_fieldoptions.field_enum_cname) = "操作系技能伤害减免"]; //小数值
	EN_ATTR_PROF_F_DEF_AMPLIFY      = 79[(yd_fieldoptions.field_enum_cname) = "特质系技能伤害减免"]; //小数值

	EN_ATTR_PHY_DEF_AMPLIFY         = 80[(yd_fieldoptions.field_enum_cname) = "物理伤害减免"];
	EN_ATTR_MGC_DEF_AMPLIFY         = 81[(yd_fieldoptions.field_enum_cname) = "法术伤害减免"];
	
	EN_ATTR_ACTIVATE_FP             = 82 [(yd_fieldoptions.field_enum_cname) = "激活的专注点"];
	EN_ATTR_FREEZE_FP               = 83 [(yd_fieldoptions.field_enum_cname) = "冻结的专注点"];
	
	EN_ATTR_EP                      = 84 [(yd_fieldoptions.field_enum_cname) = "活力值"];
	EN_ATTR_MAX_EP                  = 85 [(yd_fieldoptions.field_enum_cname) = "活力值-最大值"];

	EN_ATTR_HP_RESERVE              = 86 [(yd_fieldoptions.field_enum_cname) = "生命储备"];
	EN_ATTR_MP_RESERVE              = 87 [(yd_fieldoptions.field_enum_cname) = "魔法储备"];

	EN_ATTR_PABODY                  = 88 [(yd_fieldoptions.field_enum_cname) = "霸体值"];
	EN_ATTR_MAX_PABODY              = 89 [(yd_fieldoptions.field_enum_cname) = "霸体最大值"];
	EN_ATTR_BREAK_PABODY            = 90 [(yd_fieldoptions.field_enum_cname) = "锋利值"]; //破霸体值
	
	EN_ATTR_FHR		                = 91 [(yd_fieldoptions.field_enum_cname) = "受击回复等级"];
	EN_ATTR_HRR				        = 92 [(yd_fieldoptions.field_enum_cname) = "受击回复速率"];
	EN_ATTR_FGR			            = 93 [(yd_fieldoptions.field_enum_cname) = "快速起身等级"];
	EN_ATTR_GR            			= 94 [(yd_fieldoptions.field_enum_cname) = "起身速率"];
	EN_ATTR_WR            			= 95 [(yd_fieldoptions.field_enum_cname) = "重量等级"];
	EN_ATTR_RRW            			= 96 [(yd_fieldoptions.field_enum_cname) = "相对重量"];
	EN_ATTR_ABSW            		= 97 [(yd_fieldoptions.field_enum_cname) = "绝对重量"];
	EN_ATTR_FCR            			= 98 [(yd_fieldoptions.field_enum_cname) = "技能释放速度"];
	EN_ATTR_NUMB_TIME_RDU	      	= 99 [(yd_fieldoptions.field_enum_cname) = "硬直时间缩短"]; //二级属性 防御方_FRR+(防御方_FHR/(4*防御方_FHR+200)^0.9)
	EN_ATTR_GT            			= 100[(yd_fieldoptions.field_enum_cname) = "倒地时间"]; //二级属性 1-防御方_GR-(防御方_FGR/(4*防御方_FGR+800)^0.92)
	EN_ATTR_WEIGHT					= 101[(yd_fieldoptions.field_enum_cname) = "重量"]; //二级属性 ABSW+300*(RRW/(4*RRW+800)^0.87
	EN_ATTR_CE_NEW                  = 102; //战斗力新
	
	EN_ATTR_HIT						= 103 [(yd_fieldoptions.field_enum_cname) = "命中"];
	EN_ATTR_DODGE					= 104 [(yd_fieldoptions.field_enum_cname) = "闪避"];
	EN_ATTR_BASE_HIT_RATE			= 105 [(yd_fieldoptions.field_enum_cname) = "强制命中率"];
	EN_ATTR_BASE_DODGE_RATE			= 106 [(yd_fieldoptions.field_enum_cname) = "强制闪避率"];
	EN_ATTR_HIT_RATE				= 107 [(yd_fieldoptions.field_enum_cname) = "命中率"];
	EN_ATTR_DODGE_RATE				= 108 [(yd_fieldoptions.field_enum_cname) = "闪避率"];
	EN_ATTR_HEAL_INTENSITY			= 109 [(yd_fieldoptions.field_enum_cname) = "治疗强度"];

	EN_ATTR_STR_AMPLIFY				= 110[(yd_fieldoptions.field_enum_cname) = "力量加成"];//小数值
	EN_ATTR_MAG_AMPLIFY				= 111[(yd_fieldoptions.field_enum_cname) = "智力加成"];//小数值
	EN_ATTR_VIT_AMPLIFY				= 112[(yd_fieldoptions.field_enum_cname) = "耐力加成"];//小数值
	EN_ATTR_SPR_AMPLIFY				= 113[(yd_fieldoptions.field_enum_cname) = "精神加成"];//小数值
	EN_ATTR_DEX_AMPLIFY				= 114[(yd_fieldoptions.field_enum_cname) = "体质加成"];//小数值
	EN_ATTR_LUCK_AMPLIFY			= 115[(yd_fieldoptions.field_enum_cname) = "敏捷加成"];//小数值
	EN_ATTR_HIT_AMPLIFY				= 116[(yd_fieldoptions.field_enum_cname) = "命中加成"];//小数值
	EN_ATTR_DODGE_AMPLIFY			= 117[(yd_fieldoptions.field_enum_cname) = "闪避加成"];//小数值
	EN_ATTR_ARMOR_IGNORED_FACTOR	= 118[(yd_fieldoptions.field_enum_cname) = "无视对方物理防御"];//小数值
	EN_ATTR_RESIST_IGNORED_FACTOR	= 119[(yd_fieldoptions.field_enum_cname) = "无视对方法术防御"];//小数值
	
	EN_ATTR_FREEZE_FRAME_RDU        = 120[(yd_fieldoptions.field_enum_cname) = "定帧时间减免"];

    EN_ATTR_COLD_ENHANCE            = 121[(yd_fieldoptions.field_enum_cname) = "冰强化"];
    EN_ATTR_FIRE_ENHANCE            = 122[(yd_fieldoptions.field_enum_cname) = "火强化"];
    EN_ATTR_MINE_ENHANCE            = 123[(yd_fieldoptions.field_enum_cname) = "雷强化"];
    EN_ATTR_WIND_ENHANCE            = 124[(yd_fieldoptions.field_enum_cname) = "风强化"];

    EN_ATTR_COLD_RESIST             = 125[(yd_fieldoptions.field_enum_cname) = "冰抗性"];
    EN_ATTR_FIRE_RESIST             = 126[(yd_fieldoptions.field_enum_cname) = "火抗性"];
    EN_ATTR_MINE_RESIST             = 127[(yd_fieldoptions.field_enum_cname) = "雷抗性"];
    EN_ATTR_WIND_RESIST             = 128[(yd_fieldoptions.field_enum_cname) = "风抗性"];

    EN_ATTR_PHY_DMG_BREAK           = 129[(yd_fieldoptions.field_enum_cname) = "破防物攻"];
    EN_ATTR_MGC_DMG_BREAK           = 130[(yd_fieldoptions.field_enum_cname) = "破防念攻"];

    EN_ATTR_MP_RECOVERY             = 131[(yd_fieldoptions.field_enum_cname) = "魔法恢复"];
    EN_ATTR_DEX_HP_RECOVERY_FACTOR  = 132[(yd_fieldoptions.field_enum_cname) = "体质影响生命恢复系数"];
    EN_ATTR_SPR_MP_RECOVERY_FACTOR  = 133[(yd_fieldoptions.field_enum_cname) = "精神影响魔法恢复系数"];

    EN_ATTR_COLD_ACTIVE             = 134[(yd_fieldoptions.field_enum_cname) = "冰激活"];
    EN_ATTR_FIRE_ACTIVE             = 135[(yd_fieldoptions.field_enum_cname) = "火激活"];
    EN_ATTR_MINE_ACTIVE             = 136[(yd_fieldoptions.field_enum_cname) = "雷激活"];
    EN_ATTR_WIND_ACTIVE             = 137[(yd_fieldoptions.field_enum_cname) = "风激活"];

    EN_ATTR_CITY_MOV_SPD            = 138[(yd_fieldoptions.field_enum_cname) = "城镇移动速度"];

    EN_ATTR_ALL_RESIST              = 139[(yd_fieldoptions.field_enum_cname) = "全异常抗性"];
    EN_ATTR_FREEZE_RESIST           = 140[(yd_fieldoptions.field_enum_cname) = "冰冻抗性"];
    EN_ATTR_STUPOR_RESIST           = 141[(yd_fieldoptions.field_enum_cname) = "昏迷抗性"];
    EN_ATTR_FIRING_RESIST           = 142[(yd_fieldoptions.field_enum_cname) = "灼烧抗性"];
    EN_ATTR_SILENT_RESIST           = 143[(yd_fieldoptions.field_enum_cname) = "沉默抗性"];
    EN_ATTR_ROOTS_RESIST            = 144[(yd_fieldoptions.field_enum_cname) = "定身抗性"];
    EN_ATTR_CURSE_RESIST            = 145[(yd_fieldoptions.field_enum_cname) = "诅咒抗性"];
    EN_ATTR_POISONING_RESIST        = 146[(yd_fieldoptions.field_enum_cname) = "中毒抗性"];
    EN_ATTR_SHEAR_RESIST            = 147[(yd_fieldoptions.field_enum_cname) = "裂伤抗性"];
    EN_ATTR_SLOW_RESIST             = 148[(yd_fieldoptions.field_enum_cname) = "减速抗性"];
    EN_ATTR_CHAOS_RESIST            = 149[(yd_fieldoptions.field_enum_cname) = "混乱抗性"];
    EN_ATTR_SLEEP_RESIST            = 150[(yd_fieldoptions.field_enum_cname) = "睡眠抗性"];

	EN_ATTR_ANTIMAGIC               = 151[(yd_fieldoptions.field_enum_cname) = "抗魔值"];
}

//物品大类型
enum enItemType
{
	EN_ITEM_TYPE_EQUIP	    	 =  1[(yd_fieldoptions.field_enum_cname)="装备"]; // uuid item
	EN_ITEM_TYPE_PROP	     	 =  2[(yd_fieldoptions.field_enum_cname)="道具"]; //
    EN_ITEM_TYPE_SKIN            =  3[(yd_fieldoptions.field_enum_cname)="时装"]; // uuid item
	EN_ITEM_TYPE_MATERIAL   	 =  4[(yd_fieldoptions.field_enum_cname)="材料"]; //
    EN_ITEM_TYPE_TITLE           =  5[(yd_fieldoptions.field_enum_cname)="称号"]; //
    EN_ITEM_TYPE_COIN       	 =  6[(yd_fieldoptions.field_enum_cname)="货币经验"]; //
	EN_ITEM_TYPE_BOX        	 =  7[(yd_fieldoptions.field_enum_cname)="宝箱"]; //
	EN_ITEM_TYPE_GEMSTONE		 =  8[(yd_fieldoptions.field_enum_cname)="宝石"]; //
    EN_ITEM_TYPE_RANDOM_QUALITY  =  9[(yd_fieldoptions.field_enum_cname)="随机品质物品"]; // 
	EN_ITEM_TYPE_TREASUREMAP	 = 10[(yd_fieldoptions.field_enum_cname)="藏宝图"];// uuid item
	EN_ITEM_TYPE_BUFF       	 = 11[(yd_fieldoptions.field_enum_cname)="增益类物品"];//
    //从此往后 物品不能被添加
	EN_ITEM_TYPE_MISC       	 = 12[(yd_fieldoptions.field_enum_cname)="杂物"]; //
    //版本稳定后废弃
	EN_ITEM_TYPE_RUNE 	    	 = 13[(yd_fieldoptions.field_enum_cname)="符文"]; //
	EN_ITEM_TYPE_RIFTKEY		 = 14[(yd_fieldoptions.field_enum_cname)="大秘境钥匙"];//
	EN_ITEM_TYPE_PARTNER         = 15[(yd_fieldoptions.field_enum_cname)="秘宝"];//伙伴
	EN_ITEM_TYPE_QUEST			 = 16[(yd_fieldoptions.field_enum_cname)="任务物品"]; //
    EN_ITEM_TYPE_SOULBOX    	 = 17[(yd_fieldoptions.field_enum_cname)="魂匣"]; //
}

//物品变化原因
enum enItemChangeReason
{
	option allow_alias                      = false;
// 
	EN_ICR_ITEM_DRESS                       = -28; //装备穿戴
	EN_ICR_ITEM_TAKEOFF                     = -27; //装备卸载
	EN_ICR_EQUIP_DRESS                      = -26; //装备穿戴
	EN_ICR_EQUIP_TAKEOFF                    = -25; //装备卸载
	EN_ICR_PARTNER_TREASURE_DRESS_SUCCESS   = -24; //穿戴成功
	EN_ICR_PARTNER_TREASURE_UNDRESS_SUCCESS = -23; //卸载成功
	EN_ICR_RECV_GIFT_FAILED                 = -22; //获取礼物失败转化
	EN_ICR_SEND_GIFT_FAILED                 = -21; //赠送礼物失败返还
	EN_ICR_SEND_FLOWER_FAILED               = -20; //送花失败返还
    EN_ICR_RUNE_MOUNT                       = -19; // 穿戴符文
	EN_ICR_MARKET_CANCEL_SELL               = -18; // 市场物品下架
	EN_ICR_BAG_ITEM_EFFECTIVE_TIME	        = -17; // 物品过期
    EN_ICR_RUNE_TAKEOFF                     = -16; // 卸下符文
    EN_ICR_GEMSTONE_DRESS                   = -15; // 宝石穿戴
    EN_ICR_GEMSTONE_TAKEOFF                 = -14; // 宝石脱下
    EN_ICR_DEL_WITH_TEMP_STORAGE_FULL       = -13; // 临时背包满，删除临时背包中的物品
    EN_ICR_SAVE_TO_TEMP_STORAGE             = -12; // 背包满，物品存入临时背包
    EN_ICR_PICK_FROM_TEMP_STORAGE           = -11; // 从临时背包中取出物品
    EN_ICR_STORAGE_OP                       = -2;  // 从仓库中取出或存入
    EN_ICR_NO_EVENT                         = -1;  // 不处理事件

// 大于等于0 表示有数据统计意义
    EN_ICR_UNKOWN                           = 0;   // 未知
    EN_ICR_CREATE                           = 1;   // player created
    EN_ICR_GM                               = 2;   // GM
    EN_ICR_OFFLINE_OP                       = 3;   // 离线经验

    EN_ICR_BATTLE_AWARD                     = 10;  // 战斗奖励
    EN_ICR_QUEST_AWARD                      = 11;  // 任务奖励
    EN_ICR_ACHIEVE_AWARD                    = 12;  // 成就奖励
    EN_ICR_QUEST_DROP                       = 13;  // 任务掉落特殊物品
    EN_ICR_BUY                              = 14;  // 普通购买
    EN_ICR_SELL                             = 15;  // 普通背包出售
    EN_ICR_BUY_BAG_GRID                     = 16;  // 购买背包格子
    EN_ICR_USE_ITEM                         = 17;  // 使用物品
    EN_ICR_USE_ITEM_IN_BATTLE               = 18;  // 战斗中使用物品
//  EN_ICR_EXCHANGE_CURRENCY                = 19;  // 货币兑换
    EN_ICR_EQUIP_STRENGTHEN                 = 20;  // 装备强化
    EN_ICR_QEC_AWARD                        = 21;  // 修行任务链奖励
    EN_ICR_ACHIEVE_POINT_REWARD             = 22;  // 成就点奖励
    EN_ICR_ITEM_DECOMPOSE                   = 23;  // 物品分解
//  EN_ICR_EQUIP_DECOMPOSE_FAILED           = 24;  // 分解失败，逆操作
//    EN_ICR_EQUIP_RESET_AFFIX                = 25;  // 装备重铸
    EN_ICR_EQUIP_INHERIT                    = 26;  // 装备强化继承
    EN_ICR_MALL_BUY                         = 27;  // mall 购买
    EN_ICR_GEMSTONE_COMPOSE                 = 30;  // 宝石合成
//  EN_ICR_RUNE_MAKE                        = 33;  // 念纹绘制（已废弃）
//  EN_ICR_RUNE_CLEAR                       = 34;  //
//    EN_ICR_EQUIP_SAVE_AFFIX                 = 35;  // 装备保存属性
//    EN_ICR_EQUIP_SAVE_BUFF                  = 36;  // 装备保存属性 
//  EN_ICR_TRADE_DEPOSIT                    = 37; // 
    EN_ICR_TRADE_BUY                        = 38; // Pledge商店购买
//  EN_ICR_TRADE_SELL                       = 39; // 
    EN_ICR_CREDIT_AWARD                     = 40; //每日恢复信誉
    EN_ICR_GACHA_DRAW                       = 41;
    EN_ICR_GACHA_SYNTHESIS                  = 42;
    EN_ICR_BUY_SKIN                         = 43;  // 购买皮肤
    EN_ICR_HERO_RANK_UP                     = 44;
    EN_ICR_HERO_LEVEL_UP                    = 45;  // 英雄升级奖励 
    EN_ICR_MPVE_BOUNS                       = 46; 
//    EN_ICR_AHEAD_COST                       = 47;  // sns操作game预扣
    EN_ICR_LEVEL_UP                         = 48;  //升级奖励
    EN_ICR_CHANGE_HERO_JOB                  = 49;
    EN_ICR_NIAN_PRACTICE                    = 50;
    EN_ICR_QUEST_ACCEPT                     = 51;  // 接受任务获得任务道具
    EN_ICR_QUEST_COMPELET_COST              = 52;  // 完成任务消耗道具 
    EN_ICR_SKYARENA_DAILY_AWARD             = 54; //天空竞技场每日奖励
    EN_ICR_SKYARENA_DIVISION_AWARD          = 55; //天空竞技场段位奖励
    EN_ICR_SKYARENA_BATTLE_SCORE            = 56; //天空竞技场战斗获得积分
    EN_ICR_QEC_HELP_AWARD                   = 57; //念力修行援助奖励
    EN_ICR_QUESTION_AWARD                   = 58; //问答奖励
//  EN_ICR_QUESTION_ANSWER_WORNG            = 59;
    EN_ICR_RIFT_BUY                         = 60; //大秘境商店购买
    EN_ICR_RIFT_BOUNS                       = 61; //大秘境奖励
    EN_ICR_USE_GUILD_REIMBURSE              = 62; //废弃的功能
    EN_ICR_GUILD_LEARN                      = 63; //行会属性修炼
    EN_ICR_GUILD_HELP                       = 64; //行会援助 废弃的功能
    EN_ICR_READ_MAIL                        = 65; //邮件提取
    EN_ICR_GUILD_ENVELOPES_RED_OPEN         = 66; //行会红包开启
    EN_ICR_HERO_COMPOSE                     = 67;
    EN_ICR_HERO_PIECE_EXCHANGE              = 68;
//  EN_ICR_HERO_LEVELUP                     = 69;
	EN_ICR_EVENTLOG                         = 70;  //通过eventlog改变物品 目前仅idip使用
	EN_ICR_PLEDGE_FIRST_AWARD               = 72;  //誓约之境首次通关奖励
    EN_ICR_PARTNER_APTITUDE_UP              = 73;  //伙伴系统资质提升
    EN_ICR_PARTNER_OPEN_HOLE                = 74;  //伙伴系统开孔
    EN_ICR_PARTNER_FEFRESH                  = 75;  //伙伴系统洗练
    EN_ICR_PARTNER_STAR_UP                  = 76;  //伙伴系统升星
    EN_ICR_QUEST_LOOP_CRIT                  = 77;  //任务多倍消耗
    EN_ICR_QUEST_GIVE_UP                    = 78;  //放弃任务删除物品
    EN_ICR_PARTNER_LEARN_SKILL              = 79;  //伙伴系统学技能
    EN_ICR_ACTIVITY_DEGREE_REWARD           = 80;  //活动活跃度获取的奖励
	EN_ICR_TREASUREMAP				        = 81;  //挖宝
    EN_ICR_BUY_STORAGE                      = 82;  //购买仓库
    EN_ICR_LIFE_SKILL_LEVEL_UP              = 84;  //生活技能升级
    EN_ICR_LIFE_SKILL_USE                   = 85;  //使用生活技能
    EN_ICR_LIFE_SKILL_OUT                   = 86;  //生活技能产出
	EN_ICR_SKILL_LEVEL_UP                   = 87;  //技能升级
	EN_ICR_SKILL_AWAKE_RESET                = 88;  //技能觉醒重置	
	EN_ICR_ZONE_STEP_ON				        = 89;  //踩空间
	EN_ICR_ZONE_SET_GIFT			        = 90;  //设置礼物
	EN_ICR_COLLECT                          = 91;  //采集
	EN_ICR_ZONE_MSG_BOARD			        = 92;  //留言板送礼物 
	EN_ICR_DAY_ADD_FP                       = 93;  //每日恢复FP
    EN_ICR_SWITCH_FP                        = 94;  //每日切换FP
    EN_ICR_EQUIP_RESET                      = 95;  //洗练
    EN_ICR_GUILD_GET_BONUS	                = 96;  //公会分红
    EN_ICR_PARTNER_USE_EXP_ITEM             = 97;  //伙伴吃经验书 
	EN_ICR_ITEM_EXCHANGE                    = 98;  //物品兑换
	EN_ICR_GUILD_GOODS_ADD_AWARD            = 99;  //行会货运货物装填,给的奖励   废弃的功能
	EN_ICR_GUILD_GOODS_HELP_AWARD           = 100; //行会货运援助,给的奖励  废弃的功能
    EN_ICR_ITEM_THROW_AWAY                  = 101; //丢弃物品
    EN_ICR_SIX_EXPERIMENT_SCORE_REWARD      = 102; //六系试炼积分奖励
    EN_ICR_SIX_EXPERIMENT_QUEST_REWARD      = 103; //六系试炼任务额外奖励
	EN_ICR_WELFARE_EXP_ADD_DEGREE	        = 104; //增加活跃度时，讲福利经验换成经验 
	EN_ICR_CHAMER_BUY                       = 105; //商会购买
	EN_ICR_CHAMER_SELL                      = 106; //商会出售
	EN_ICR_MARKET_BUY                       = 107; //市场购买
	EN_ICR_MARKET_SELL                      = 108; //市场出售
    EN_ICR_SIX_EXPERIMENT_RANK_REWARD       = 109; //六系试炼排名奖励
    EN_ICR_QEC_QUICK_FINISH                 = 110; //修行任务链快速完成
    EN_ICR_QUEST_HELP_AWARD                 = 111; //修行任务链帮助奖励
    EN_ICR_TRAPTOWER_SCORE_REWARD 	        = 112; //陷阱塔积分奖励
    EN_ICR_QEC_OPEN                         = 113; //开启修行任务链
	EN_ICR_SEA_DISCOVERY_SCORE_REWARD       = 114; //遗迹淘金积分奖励
	EN_ICR_MONEY_EXCHANGE                   = 115; //金钱兑换
	EN_ICR_MILITANT_COMMON_REWARD           = 116; //武斗大会一般奖励
	EN_ICR_MILITANT_BATTLE_REWARD           = 117; //武斗大会战斗奖励
	EN_ICR_MILITANT_WIN_COMB_REWARD         = 118; //武斗大会连胜奖励
	EN_ICR_RUNE_MERGE                       = 119; //念纹合成
	EN_ICR_FASHION_BUY                      = 123; //购买时装
//	EN_ICR_EQUIP_ADVANCE_REPAIR             = 124; //精工修理
//	EN_ICR_EQUIP_NORMAL_REPAIR              = 125; //普通修理
	EN_ICR_MILITANT_SINGLE_WIN_REWARD       = 126; //单次胜利奖励
	EN_ICR_IDIP                             = 127; //运营工具添加
	EN_ICR_MASTER_SET_TASK                  = 128; //师徒布置任务
	EN_ICR_MASTER_JUDGE		                = 129; //弟子评价获取
	EN_ICR_MASTER_FINISH_SINGLE_TASK        = 130; //完成教学任务获取的奖励
	EN_ICR_MASTER_FINISH_STUDY		        = 131; //结业获取的奖励
	EN_ICR_LICENSE_BLOCK_UNLOCK             = 132; //十二支执照解锁
	EN_ICR_GET_AUCTION_FIRST_AWARD          = 133; //每日首胜奖励
	EN_ICR_PARTNER_UNLOCK                   = 134; //伙伴解锁
	EN_ICR_CREDIT_BUY				        = 135; //积分商店
	EN_ICR_PARTNER_CLEAR_SKILL              = 136; //清空技能
	EN_ICR_FIELDBOX					        = 137; //开宝箱
	EN_ICR_GUILD_SINGLE_WIN_REWARD          = 138; //公会战单次战斗胜利奖励
	EN_ICR_GUILD_FIGHT_REWARD               = 139; //公会战一轮战斗奖励
	EN_ICR_GUILD_BOSS_SALE			        = 140; //公会拍卖
	EN_ICR_PARTNER_BUY_SKIN                 = 141; //购买伙伴皮肤
	EN_ICR_GUILD_BOSS_REWARD		        = 142; //行会boss奖励
	EN_ICR_MASTER_QUEST				        = 143; //师徒任务奖励
	EN_ICR_LOGIN_AWARD                      = 144; //签到补签
	EN_ICR_DUNGEON_REWARD                   = 145; //副本奖励
	EN_ICR_QUESTIONNAIRE			        = 146; //问卷调查奖励
	EN_ICR_PARTNER_HAND_SKILL_LEVEL_UP      = 147; //伙伴SP技能升级
	EN_ICR_GUILD_SOULBOX_CONTRIBUTE	        = 148; //行会道具捐献   
	EN_ICR_MAGIC_CHALLENGE			        = 149; //魔境挑战
	EN_ICR_GUILD_CREATE                     = 150; //创建公会
	EN_ICR_SEND_FLOWER                      = 151; //送花
    EN_ICR_LEVEL_BOUNS                      = 152; //手动领取的等级礼包
	EN_ICR_DAILY_PLEDGE_COIN                = 153; //每日赠送猎物追踪点
	EN_ICR_PLEDGE_REWARD                    = 154; //获取猎物追踪奖励
	EN_ICR_DAILY_MATIC_ITEM                 = 155; //每日获取无尽迷宫物品
	EN_ICR_SEND_GIFT                        = 156; //赠送礼物
	EN_ICR_DIAMOND_EXCHANGE_GOLD            = 158; //钻石兑换金币
	EN_ICR_DIAMOND_EXCHANGE_MONEY           = 159; //钻石兑换银币
	EN_ICR_GOLD_EXCHANGE_MONEY              = 160; //金币兑换银币
	EN_ICR_RECV_GIFT                        = 161; //获得礼物
	EN_ICR_PARTNER_TREASURE_GET             = 163; //获得伙伴秘宝
	EN_ICR_PARTNER_TREASURE_COMPOSE         = 164; //合成伙伴秘宝
	EN_ICR_PARTNER_TREASURE_UNDRESS         = 165; //脱下伙伴秘宝
	EN_ICR_PARTNER_TREASURE_REFRESH         = 166; //洗练伙伴秘宝
	EN_ICR_PARTNER_TREASURE_LEVEL_UP        = 167; //升级伙伴秘宝
	EN_ICR_PARTNER_TREASURE_LEARN           = 168; //学习伙伴秘宝技能
	EN_ICR_PARTNER_TREASURE_SAVE            = 169; //洗练保存
	EN_ICR_ENTER_HUNTER_TREASURE            = 170; //参加寻宝
	EN_ICR_DAILY_HUNTER_TREASURE_COIN       = 171; //每日恢复寻宝点数
    EN_ICR_HLICENSE_EXAM_AWARD              = 174; //猎人执照考试奖励
    EN_ICR_HLICENSE_LEVEL_AWARD             = 175; //猎人执照等级奖励
    EN_ICR_HLICENSE_ST_AWARD                = 176; //猎人执照特训奖励
	EN_ICR_ONLINE_REWARD                    = 177; //在线祈福奖励
	EN_ICR_ACTIVITY_EIGHT_SCORE_RWD			= 178; //嘉年华积分奖励
	EN_ICR_ACTIVITY_EIGHT_TARGET_RWD		= 179; //嘉年华单个目标奖励
	EN_ICR_GUILD_DANCE_AWARD                = 180; //行会跳舞活动奖励
    EN_ICR_GUILD_DANCE_BOX                  = 181; //行会跳舞限时宝箱奖励	
	EN_ICR_FAMILY_TOGETHER_PAY				= 182; //家族仪式集合阶段的支付
	EN_ICR_FAMILY_CREATE_INVITE_PAY			= 183; //家族仪式创建邀请支付
	EN_ICR_FAMILY_MODIFY_TITLE_EVENT_PAY    = 184; //家族发起修改称号事件
	EN_ICR_FAMILY_MODIFY_MEMO_PAY           = 185; //家族发起修改字号
	EN_ICR_MASTER_GET_RESULT_REWARD			= 186; //师徒领取成果奖励
	EN_ICR_GUILD_TRANS_HELP_OTHER			= 188; //货运帮助他人填充    废弃的功能
	EN_ICR_GUILD_TRANS_ADD					= 189; //货运填充物品       废弃的功能
	EN_ICR_GUILD_UPGRADE_ARCHI				= 191; //行会建筑升级
	EN_ICR_GUILD_SHOP_BUY					= 192; //行会商店购买
	EN_ICR_GUILD_RED_ENVELOPES				= 194; //行会发红包
	EN_ICR_SIGN_IN_MONTHLY_REWARD			= 195; //每月签到奖励
	EN_ICR_INSTANCE_REWARD_COST             = 196; //Instance掉落消耗
	EN_ICR_GUILD_QUESTION_RWD				= 197; //行会答题奖励
	EN_ICR_PA_REWARD                        = 198; //伙伴异步pvp活跃奖励
	EN_ICR_RUSH_ENTER                       = 199; //RUSH进入
	EN_ICR_RUSH_SCORE_REWARD                = 200; //RUSH 评分奖励
	EN_ICR_RUSH_FIRST_WIN                   = 201; //RUSH 首通
	EN_ICR_CE_REWARD                        = 202; //战力奖励
    //EN_ICR_EQUIP_INDENT                     = 203; //装备鉴定
	EN_ICR_GUILD_REBATE_GET_RWD				= 204; //行会返利活跃礼包
    EN_ICR_AUTO_RECOVER                     = 205; //自动恢复
	EN_ICR_GUILD_TRANS_EXP_TAX				= 206; //行会传功获得的行会贡献
	EN_ICR_GUILD_TRANS_EXP					= 207; //行会传功获得的经验
    EN_ICR_RISING_PURCHASE_BUY              = 208; //跳跃购买
	EN_ICR_PAY_AWARD                        = 209; //累充奖励
	EN_ICR_WEEK_CONSUME_AWARD               = 210; //周累计消耗奖励
	EN_ICR_WEEK_CONSUME_LOTTERY             = 211; //周累计消耗抽奖
	EN_ICR_GROW_UP_FUNS_AWARD               = 212; //成长基金奖励
	EN_ICR_MIDAS_BUY_GOODS                  = 213; //幸运礼包直购
    EN_ICR_RUSH_CHAPTER_REWARD              = 214; //RUSH 章奖励
    EN_ICR_LEVEL_BLESS                      = 215; //关卡祝福
	EN_ICR_SKILL_RESET                      = 216; //技能重置
	EN_ICR_SKILL_TRANSFER                   = 217; //技能转职
	EN_ICR_SKILL_DEGRADE                    = 218; //技能降级
	EN_ICR_ACT_QUEST_RWD                    = 219; //活动任务奖励
    EN_ICR_STORAGE_OP_COST                  = 220; //存仓库消耗
    EN_ICR_STRENGTH_BROKEN                  = 221; //强化失败损坏
	EN_ICR_CREATE_BOX_FAILED                = 222; //ams创建宝箱失败返还
    EN_ICR_LEVEL_ENTER_COST                 = 223; //Level进入消耗
    EN_ICR_LEVEL_REWARD_COST                = 224; //Level获取奖励消耗
	EN_ICR_GEMSTONE_EXCHANGE                = 225; //宝石兑换
    EN_ICR_EQUIP_MAGIC_CARD                 = 226; //装备附魔
    EN_ICR_EQUIP_CARD_COMPOSE               = 227; //附魔卡合成
    EN_ICR_PARTNER_RENEW                    = 228; //伙伴续期
	EN_ICR_PARTNER_TRAINING                 = 229; //伙伴训练
	EN_ICR_PARTNER_FEED                     = 230; //伙伴美食
	EN_ICR_PARTNER_AUTO_FEED                = 231; //伙伴自动喂食
	EN_ICR_PARTNER_ACTIVE_SKILL             = 232; //伙伴激活技能
    EN_ICR_FASHION_COMPOSE               	= 233; //时装合成
    EN_ICR_FASHION_CHG_ATTR               	= 234; //时装改变属性
    EN_ICR_ITEM_TIMEOUT                     = 235; //物品过期
	EN_ICR_TORMENT_TOWER_SWEEP_AWARD        = 236; //试炼塔扫荡奖励
	EN_ICR_TORMENT_TOWER_AWARD              = 237; //试炼塔首通奖励
	EN_ICR_TORMENT_TOWER_SWEEP_SPEED        = 238; //试炼塔扫荡加速
	EN_ICR_PARTNER_BREAK_THROUGH            = 239; //伙伴突破
	EN_ICR_LUCK_DRAW						= 240; //转圈抽奖
    EN_ICR_1V1_TASK_AWARD                   = 241; //1v1日常任务奖励
	EN_ICR_1V1_SEASON_AWARD                 = 242; //1v1赛季奖励 
	EN_ICR_1V1_BATTLE_AWARD                 = 243; //1v1战斗奖励 
	EN_ICR_EXP_RETRIVE                      = 244; //经验找回
	EN_ICR_AWARD_RETRIVE                    = 245; //奖励找回
	EN_ICR_POWER_ADD_CONTRIBUTION			= 246; //体力消耗增加的贡献
	EN_ICR_GACHA_BUY                        = 247; //宝罐抽取
	EN_ICR_MONTH_CARD_DAILY_AWARD           = 248; //月卡每日奖励
	EN_ICR_SUPPER_CARD_DAILY_AWARD          = 249; //超级卡每日奖励
}

enum enMaterialType
{
    EN_MAT_RUNE_MAKER       = 1; //符文制造材料
    EN_MAT_EQUIP_STRENTH    = 2; //装备强化材料
    EN_MAT_EQUIP_SMELT      = 3; //装备冶炼材料
    EN_MAT_EQUIP_RESET      = 4; //装备重铸材料
	EN_MAT_HERO_PIECE_KEY   = 5; //英雄万能碎片
	EN_MAT_SUB_MASTER_TASK = 18; //师徒教学任务分配后获得
}

enum enPropSubType 
{
	EN_PROP_SUB_HERO_REVIVAL   = 2;
    EN_PROP_SUB_HERO_EXP       = 6;
    EN_PROP_SUB_PARTNER_EXP    = 10;
	EN_PROP_SUB_HERO_EP        = 11; //活力值物品
	EN_PROP_SUB_FASHION        = 12; //时装道具
	EN_PROP_SUB_GIFT		   = 13; //空间礼物

    EN_PROP_SUB_PET_SUMMON     = 15; //召唤伙伴
	EN_PROP_SUB_HERO_FP        = 16; //专注点
	EN_PROP_SUB_ZONE_DESIGN    = 17; //空间装扮
	EN_PROP_SUB_TITLE_EXHCNAGE = 19; //获得称谓
    EN_PROP_SUB_COMMON_USE     = 21; //通用使用物品
	EN_PROP_SUB_BLESS_BAG	   = 22; //福袋
}

enum enQualitySubType
{
	E_Quality_Sub_None          = 0;
	E_Quality_Sub_Drug          = 1; //品质战斗内药物
	E_Quality_Sub_Food          = 2; //品质食物
    E_Quality_Sub_EquipTempAttr = 3; //临时符
	E_Quality_Sub_Flower        = 4; //鲜花
}


//特殊物品
enum enItemID
{
	EN_ID_PARTNER_FOODS      = 29; //伙伴美食
	EN_ID_PARTNER_CREAM_1    = 30; //猎人之星（白）
	EN_ID_PARTNER_CREAM_2    = 31; //猎人之星（蓝）
	EN_ID_PARTNER_CREAM_3    = 32; //猎人之星（紫）
	EN_ID_PARTNER_CREAM_4    = 33; //猎人之星（粉）
	EN_ID_PARTNER_CREAM_5    = 34; //猎人之星（橙）
	EN_ID_JIENI              = 38; //月卡商店（4号）货币-- 戒尼
	EN_ID_CHIVALROUS         = 39; //侠义值
	EN_ID_GLOD_LUCKY		 = 45; //暗金幸运值
	EN_ID_SILVER_LUCKY		 = 46; //白银幸运值
    EN_ID_DIAMOND_ARREARS    = 47; //欠钻石//用于倒扣
	EN_ID_MASTER_SCORE	 	 = 48; //授业点
	EN_ID_EP             	 = 50; //活力值
    EN_ID_GOLD   	     	 = 51; //金币
    EN_ID_MONEY  	     	 = 52; //银币
    EN_ID_DIAMOND  		 	 = 53; //钻石
    EN_ID_CONTRIBUTION   	 = 54; // 贡献
	EN_ID_EXP		     	 = 55; //召唤师经验
    EN_ID_GUILD_COIN     	 = 57; // 行会资金
    EN_ID_RIFT_COIN      	 = 58;
	EN_ID_SKIN		     	 = 59; //时装券
    EN_ID_SY             	 = 60;
    EN_ID_XY             	 = 61;
    EN_ID_CF             	 = 62;
	EN_ID_ACTIVATE_FP    	 = 63; //激活专注点
	EN_ID_FROZE_FP       	 = 64; //冻结专注点
    EN_ID_PET_EXP        	 = 65;
    EN_ID_GUILD_BOUNS    	 = 66; //行会分红
	EN_ID_FIGHT_HONOR    	 = 67; //武勋
	EN_ID_MILITANT_SCORE 	 = 68; //武斗积分
    EN_ID_FASHION_COIN_A     = 69; //低级时装币
    EN_ID_FASHION_COIN_B     = 70; //高级时装币
    EN_ID_FASHION_COIN_C     = 71; //武器时装币
    EN_ID_HUNTER_SCORE       = 72; //猎人积分
    EN_ID_GRADE_SCORE        = 73; //段位积分
	EN_ID_NIAN_SCORE		 = 74; //门派积分
    EN_ID_SKYARENA_SCORE     = 75; //天空竞技场积分
	EN_ID_PLEDGE_COIN        = 77; //猎物追踪点数
	EN_ID_HUNTER_COIN        = 78; //寻宝点数
	EN_ID_SKILL_POINT        = 79; //技能点
    EN_ID_RUSH_DOUBLE        = 80; //单人副本双倍点数
	EN_ID_SKILL_POIN_ADVANCE = 81; //高级技能点
    EN_ID_ACHIEVE_POINT      = 106; //成就点数
    EN_ID_ABYSS_TICKET       = 10002; //深渊票
	EN_ID_1V1_COIN           = 107; //决斗币
	EN_ID_GACHA_SCORE_1      = 111; //宝罐积分1
	EN_ID_GACHA_SCORE_2      = 112; //宝罐积分2
	EN_ID_GACHA_SCORE_3      = 113; //宝罐积分3
}

enum enItemConstant
{
	EN_MAX_EP_BASE = 500;
	EN_MAX_EP_LEVEL_ADD = 20;
	EN_MAX_EP = 2600;
	
	EN_MAX_FP = 3000;
	EN_DAY_ADD_FP = 200;
}


enum RoleAttrType
{
	EN_ROLE_ATTR_MIN = 0; //最小值

	EN_ROLE_ATTR_LEVEL = 1; //等级
	EN_ROLE_ATTR_EXP = 2; //经验
	//EN_ROLE_ATTR_MONEY = 3; //金钱
	//EN_ROLE_ATTR_DIAMOND = 4; //钻石
	EN_ROLE_ATTR_RANK = 5;     //RANK
	EN_ROLE_ATTR_DIVISION = 6; //段位
	EN_ROLE_ATTR_CE = 7; //combat effectiveness,战斗力
	
	EN_ROLE_ATTR_MAX = 22; //最大值,不能超过32
};

//英雄身上的装备部位顺序
enum enHeroEquipPart
{
	EN_HERO_EQUIP_NONE		=	-1;
	EN_HERO_EQUIP_WEAPON	=	0;		//0号部位
	EN_HERO_EQUIP_BREAST	=	1;
	EN_HERO_EQUIP_LEG		=	2;
	EN_HERO_EQUIP_FEET		=	3;
	EN_HERO_EQUIP_HEAD		=	4;
	EN_HERO_EQUIP_ACCE		=	5;		//5号部位
	EN_HERO_EQUIP_MAX		=	6;		//装备部位最大个数
};

//英雄身上的被动技能槽
enum enHeroStateSlot
{
	EN_HERO_STATESLOT_NONE		=	-1;
	EN_HERO_STATESLOT_0	=	0;		//0号卡槽
	EN_HERO_STATESLOT_1	=	1;		//1号卡槽
	EN_HERO_STATESLOT_2	=	2;		//2号卡槽
	EN_HERO_STATESLOT_3	=	3;		//3号卡槽
	EN_HERO_STATESLOT_4	=	4;		//4号卡槽
	EN_HERO_STATESLOT_5	=	5;		//5号卡槽
	EN_HERO_STATESLOT_MAX	= 6;	//被动技能卡槽个数
	EN_HERO_PASSIVE_NUM_MAX = 50;	//一个英雄身上被动技能最大个数，目前暂定50个，以后根据策划需要修改，其实此列表个数应该与被动技能表中的条目数相等
}

//英雄身上的被动技能元素
message HeroPassiveEle
{
	required int32	skill_id	= 1;		//被动技能ID
	required int32	ap_value	= 2;		//该被动技能的AP值
	required bool	is_get		= 3;		//是否已萃取
};

//英雄身上的被动技能槽的状态
enum enHeroStateSlotStatus
{
	EN_HERO_STATESLOT_CLOSE	=	-1;		//闭塞的被动技能槽
	EN_HERO_STATESLOT_BLANK	=	0;		//开启的空白被动技能槽
}

enum enEquipAffixIndex
{
    EN_EQUIP_PREFIX = 1;
    EN_EQUIP_SUFFIX = 2;
}

message CSRoleAttr
{
	required RoleAttrType type = 1;//属性类型RoleAttrType
	required uint64 value = 2;//属性值
};

message CSAttr
{
	required AttrType type = 1;//属性类型AttrType
	required int64 value = 2;//属性值
}

enum MonsterAttrType
{
	EN_Monster_ATTR_MIN = 0; //最小值

	
	EN_Monster_ATTR_MAX = 22; //最大值,不能超过32
}

// 好友来源类型
//enum ENFriendSourceType
//{
//	EN_FRIEND_SOURCE_OTHER			= 0; // 默认值
//	EN_FRIEND_SOURCE_RECOMMEND		= 1; // 推荐好友
//	EN_FRIEND_SOURCE_BALL			= 2; // 拍卖品争夺战
//	EN_FRIEND_SOURCE_HUNTERTEST 	= 3; // 猎人考试
//	EN_FRIEND_SOURCE_GROUPBATTLE 	= 4; // 猎人大乱斗
//	EN_FRIEND_SOURCE_HUNTER_FTEST	= 5; // 猎人试炼
//	EN_FRIEND_SOURCE_GUILD			= 6; // 公会
//}

message CSMonsterAttr
{
	required MonsterAttrType type = 1;//属性类型MonsterAttrType
	required int32 value = 2;//属性值
}

enum BattleDrugType
{
	E_Battle_Drug_Type_None = 0;
	E_Battle_Drug_Type_Hp = 1[(yd_fieldoptions.field_enum_cname) = "血药"];
	E_Battle_Drug_Type_Mp = 2[(yd_fieldoptions.field_enum_cname) = "蓝药"];
	E_Battle_Drug_Type_RMB = 3[(yd_fieldoptions.field_enum_cname) = "RMB药"];
}

enum enSkillFeature
{
	E_Skill_Feature_None = 0;
	E_Skill_Feature_Range_Amplify = 1[(yd_fieldoptions.field_enum_cname) = "攻击范围修正"];
	E_Skill_Feature_Projectile_Range_Amplify = 2[(yd_fieldoptions.field_enum_cname) = "飞行道具范围修正"];
	E_Skill_Feature_Attack_Speed_Amplify = 3[(yd_fieldoptions.field_enum_cname) = "攻击速度修正"];
	E_Skill_Feature_Move_Speed_Amplify = 4[(yd_fieldoptions.field_enum_cname) = "移动速度修正"];
	E_Skill_Feature_Projectile_Move_Speed_Amplify = 5[(yd_fieldoptions.field_enum_cname) = "飞行道具移速修正"];
	E_Skill_Feature_Projectile_Num_Amplify = 6[(yd_fieldoptions.field_enum_cname) = "飞行道具数量修正"];
	E_Skill_Feature_Attack_Level_Amplify = 7[(yd_fieldoptions.field_enum_cname) = "攻击等级修正"];
	E_Skill_Feature_Pabody_Level_Amplify = 8[(yd_fieldoptions.field_enum_cname) = "霸体等级修正"];
	E_Skill_Feature_Vampire = 9[(yd_fieldoptions.field_enum_cname) = "技能吸血"];
	E_Skill_Feature_Projectile_Life_Amplify = 10[(yd_fieldoptions.field_enum_cname) = "飞行道具生命周期修正"];
	E_Skill_Feature_Range_X_Amplify = 11[(yd_fieldoptions.field_enum_cname) = "攻击范围修正X"];
	E_Skill_Feature_Range_Y_Amplify = 12[(yd_fieldoptions.field_enum_cname) = "攻击范围修正Y"];
	E_Skill_Feature_Range_Z_Amplify = 13[(yd_fieldoptions.field_enum_cname) = "攻击范围修正Z"];
	E_Skill_Feature_Projectile_Range_X_Amplify = 14[(yd_fieldoptions.field_enum_cname) = "飞行道具范围修正X"];
	E_Skill_Feature_Projectile_Range_Y_Amplify = 15[(yd_fieldoptions.field_enum_cname) = "飞行道具范围修正Y"];
	E_Skill_Feature_Projectile_Range_Z_Amplify = 16[(yd_fieldoptions.field_enum_cname) = "飞行道具范围修正Z"];
}

enum enDungeonType
{
    EN_DUNGEON_TYPE_NONE   = 0;
	EN_DUNGEON_TYPE_NORMAL = 1;
	EN_DUNGEON_TYPE_HARD   = 2;
}

enum enDungeonEventType
{
    EN_DUNGEON_EVENT_TYPE_NONE           = 0;
	EN_DUNGEON_EVENT_TYPE_SPAWN_NPC      = 1; //刷NPC
	EN_DUNGEON_EVENT_TYPE_TAKE_QUEST     = 2; //接任务
	EN_DUNGEON_EVENT_TYPE_FINISH_DUNGEON = 3; //完成副本
}

enum enItemQualityType
{
    EN_ITEM_QUALITY_TYPE_NONE   = 0;
	EN_ITEM_QUALITY_TYPE_GREEN  = 1;
	EN_ITEM_QUALITY_TYPE_BLUE   = 2;
	EN_ITEM_QUALITY_TYPE_PURPLE = 3;
	EN_ITEM_QUALITY_TYPE_ORANGE = 4;
	EN_ITEM_QUALITY_TYPE_GOLD   = 5;
}

enum enInstanceChallengeStatus
{
    EN_INSTANCE_CHALLENGE_STATUS_NONE    = 0;
	EN_INSTANCE_CHALLENGE_STATUS_RUNNING = 1;
	EN_INSTANCE_CHALLENGE_STATUS_FAILED  = 2;
	EN_INSTANCE_CHALLENGE_STATUS_SUCCESS = 3;
}

enum enInstanceChallengeType
{
    EN_INSTANCE_CHALLENGE_TYPE_NONE                   = 0;  //缺省值
	EN_INSTANCE_CHALLENGE_TYPE_SINGLE                 = 1;  //单人通关
	EN_INSTANCE_CHALLENGE_TYPE_TEAM_FIGHT_NO_DIE      = 2;  //组队时无人死亡通关
	EN_INSTANCE_CHALLENGE_TYPE_MUTEX_JOB              = 3;  //组队时队伍没有重复系别的玩家通关
	EN_INSTANCE_CHALLENGE_TYPE_SAME_JOB               = 4;  //组队时队伍全部是同系别的玩家通关
	EN_INSTANCE_CHALLENGE_TYPE_NOT_HIT_BY_ACTOR       = 5;  //不被指定怪物的所有技能击中
	EN_INSTANCE_CHALLENGE_TYPE_NOT_HIT_BY_SKILL       = 6;  //不被指定怪物的指定技能击中
	EN_INSTANCE_CHALLENGE_TYPE_KILL_SPECIAL_ACTOR     = 7;  //击杀指定怪物通关
	EN_INSTANCE_CHALLENGE_TYPE_KILL_SPECTAL_ACTOR_NUM = 8;  //击败指定数量的指定怪物通关
	EN_INSTANCE_CHALLENGE_TYPE_NOT_KILL_SPECIAL_ACTOR = 9;  //不击败指定怪物通关
	EN_INSTANCE_CHALLENGE_TYPE_WITH_BUFF              = 10; //携带指定的buff通关BUFF通关
	EN_INSTANCE_CHALLENGE_TYPE_TIME_LIMIT             = 11; //时限内通关
	EN_INSTANCE_CHALLENGE_TYPE_ACTOR_DIED_WITH_BUFF   = 12; //指定怪物死亡时携带指定buff
}

message Item
{
	required uint32 id = 1;
	required uint64 value = 2;
    optional int32  quality = 3;
}

message GridItemBase
{
    required uint32 id = 1;
    required uint64 value = 2;
    optional uint64 uuid = 3;
    optional int32  quality = 5; // 品质 
    optional uint32 trade_cooldown = 4; //交易冷却截止时间
    optional uint32 effective_time = 6; //有效期限
    optional bool   role_bind      = 7; //角色绑定
}

message TreasureMapExt
{
	optional uint32 map_id = 3;	        // 地图id
	optional int32 abscissa = 4;       // 横坐标
	optional int32 ordinate = 5;       // 纵坐标
}
message TreasureMap
{
    required GridItemBase base = 1;
    required TreasureMapExt ext = 2;
    //optional bool         in_storage = 4;
}

message RuneExt
{
	required int32 shape_id = 3;    //形状id
	repeated CSAttr attr = 4 [(yd_fieldoptions.field_arysize)=16]; //属性值
	optional int32 shape_bitmap = 5; //形状bitmap
}
message Rune
{
    required GridItemBase base = 1;
    required RuneExt ext = 2;
    //optional bool         dressed = 3;
    //optional bool         in_storage = 4;
}

message EquipExt
{
	optional int32  base_attr_percent = 1; //基础属性百分比
    optional int32  strength          = 2; //强化值  
    optional int32  max_base_percent  = 3;
	optional int32  magic_item		  = 4; //附魔的物品id
	repeated int32  job_ce            = 24[(yd_fieldoptions.field_arysize) = 6]; //职业评分
}

message Equip
{
    required GridItemBase base = 1;
    required EquipExt     ext  = 2;
    //optional bool         dressed = 3;
    //optional bool         in_storage = 4;
}

message PartnerTreasureExt
{
    repeated CSAttr attr             = 1 [(yd_fieldoptions.field_arysize) = 2];  //固定属性(策划说最多2个@CNM)
	repeated CSAttr random_attr      = 2 [(yd_fieldoptions.field_arysize) = 4];  //随即属性(策划说最多4个@CNM) 
	repeated int32  skill_id         = 3 [(yd_fieldoptions.field_arysize) = 2];  //必带技能
	repeated int32  random_skill_id  = 4 [(yd_fieldoptions.field_arysize) = 12]; //随机技能
	repeated int32  job_ce           = 5 [(yd_fieldoptions.field_arysize) = 6];  //职业评分
    repeated CSAttr temp_attr        = 6 [(yd_fieldoptions.field_arysize) = 2];  //洗练的固定属性(策划说最多2个@CNM)
	repeated CSAttr temp_random_attr = 7 [(yd_fieldoptions.field_arysize) = 4];  //洗练的随机属性(策划说最多2个@CNM)
	optional bool   is_refresh       = 8; //是否有洗练属性可保存
	repeated int32  temp_job_ce      = 9 [(yd_fieldoptions.field_arysize) = 6];  //洗练的职业评分
	optional uint64 partner_uid      = 10;
}

message PartnerTreasure
{
    required GridItemBase       base = 1;
	required PartnerTreasureExt ext  = 2;
}

message FashionExt
{
	optional int32 index_attr	= 1;	// 默认是0
	optional int32 free_count	= 2;	// 剩余免费次数
}

message Fashion
{
    required GridItemBase base = 1;
    required FashionExt    ext  = 2;
}

message ItemGridCSData
{
    required GridItemBase       base          = 1;
    optional int32              index         = 2; // 1->n  // 
    optional EquipExt           data_equip    = 10; 
    optional RuneExt            data_rune     = 11; 
    optional TreasureMapExt     data_map      = 12;
	optional PartnerTreasureExt data_treasure = 13; //伙伴秘宝
	optional FashionExt			data_fashion  = 14; //时装
}

message ItemUseLimite
{
	optional int32 item_id = 1;  
	optional int32 last_use_time = 2;      //最后一次使用时间
	optional int32 day_use_count = 3;      //今天使用的次数
	optional int32 week_use_count = 4;     //本周使用次数
}

enum    enBagPageType    // InvenrotySlotData.类型
{
    EN_BPT_TEMP_STORAGE = -99;  // 临时背包 // 15  
    EN_BPT_DRESSED_ITEM = -9;   // 已穿戴物品 
    EN_BPT_EQUIP        = 1;    // 装备     // 100  
    EN_BPT_STORAGE      = 2;    // 账号仓库 // 100  
    EN_BPT_MATRIAL      = 3;    // 材料     // 100  
    EN_BPT_PROP         = 4;    // 消耗品   // 100  
    EN_BPT_SKIN         = 5;    // 时装     // 200  
    EN_BPT_TITLE        = 6;    // 称号     // 100
}

message BagPage
{
    required int32          max_grids       = 1; //当前最大格子数量
    optional int32          buy_grids_times = 2; //购买次数
    repeated ItemGridCSData grids           = 3; //数据
}

message RoleItemData
{
    // 仅用于存储 // 长度用于参考 
	repeated Item           other_list     = 1[(yd_fieldoptions.field_arysize) = 64]; //money
	repeated ItemGridCSData dressed_items  = 11[(yd_fieldoptions.field_arysize) = 128]; // 

    optional BagPage grid_list_equip   = 21; //装备 100
    optional BagPage grid_list_title   = 22; //称号 100
    optional BagPage grid_list_matrial = 23; //材料 100
    optional BagPage grid_list_skin    = 24; //时装 200
    optional BagPage grid_list_prop    = 25; //道具 100
    repeated ItemGridCSData temp_storage   = 29[(yd_fieldoptions.field_arysize) = 15];

	repeated ItemUseLimite  item_limite  = 31[(yd_fieldoptions.field_arysize)=20]; //物品使用限制
    optional BagPage        storage_data = 39; // 登陆时拉取
}

//message SoulBoxSpeedLog
//{
//	optional uint64 role_id			= 1;																			 // 加速过的玩家id
//	optional string name 			= 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; // 角色名
//	optional int64 time				= 3; 																			 // 加速的时间
//}
//message SoulBox
//{    
//	required int32 box_id 			= 1;
//    required uint32 opened_time 	= 2; 										// 时间戳
//	repeated SoulBoxSpeedLog log 	= 3[(yd_fieldoptions.field_arysize) = 6]; 	// 其他玩家给我加速的记录
//	repeated int64 beclickplayer	= 4[(yd_fieldoptions.field_arysize) = 20]; 	// 魂匣被加速的玩家
//}

message MailItemLog
{
	repeated uint64 id				= 1[(yd_fieldoptions.field_arysize)=50];	// 获取物品的邮件id
	repeated ItemGridCSData item	= 2[(yd_fieldoptions.field_arysize)=50];	// 获取的所有的物品
	repeated uint64 no_id			= 3[(yd_fieldoptions.field_arysize)=50];	// 未获取的邮件id（背包满了，需要还原d）
}

message HeroPassiveStateOne
{
	required int32 id = 1;
	required int32 state = 2;
}

enum enSkillTalentType
{
	ESKILL_TALENT_TYPE_NONE = 0;
	ESKILL_TALENT_TYPE_ACTIVE = 1;       //主动技能
	ESKILL_TALENT_TYPE_AOYI = 2;         //奥义技能     --对应奥义槽位
	ESKILL_TALENT_TYPE_BUFF = 3;         //主动Buff技能 --对应buff槽位	
	ESKILL_TALENT_TYPE_TEXING = 4;       //特性技能     --被动技能，转职即生效
	ESKILL_TALENT_TYPE_PASSIVE = 5;      //被动技能
}

message HeroSkillInfo
{
	required int32 skill_id = 1; //技能ID
	required int32 skill_lv = 2; //升级等级
	optional bool is_lock = 3;   //锁定状态
	optional bool is_read = 4;   //是否已经浏览过
	optional bool is_talent = 5; //是否是天赋解锁技能
	optional int32 src_skill_id = 6; //源技能id
	optional enSkillTalentType type = 7;
	optional int32 add_lv = 8;   //额外增加等级
}

message AwakeSkillInfo
{
	optional int32 branch_id = 1; //分支id
	repeated int32 talent_id = 2 [(yd_fieldoptions.field_arysize)=4]; //天赋id
}


message SkillTalentOne
{
	optional int32 id = 1;				//天赋树中对应id
	optional int32 assign_point = 2;
}

message SkillTalentInfo
{
	optional int32 branch_id = 1;
	repeated SkillTalentOne talent = 2 [(yd_fieldoptions.field_arysize)=20];
	optional int32 assign_sp = 3;
}

message HeroSkillSet
{
	repeated int32 attach_skill = 1 [(yd_fieldoptions.field_arysize)=9];            //镶嵌到技能槽位的技能，-1表示槽位未开启
}

message HeroSkillData
{
	repeated HeroSkillInfo learn_skill = 1 [(yd_fieldoptions.field_arysize)=50];    //学习的技能
	repeated int32 attach_skill = 2 [(yd_fieldoptions.field_arysize)=8];            //镶嵌到技能槽位的技能
	repeated AwakeSkillInfo awake_skill = 3 [(yd_fieldoptions.field_arysize)=2];	//觉醒技能信息
	optional int32 skill_point = 4;  //技能点
	repeated SkillTalentInfo skill_talent = 5 [(yd_fieldoptions.field_arysize)=2];
	repeated HeroSkillInfo history_skill = 6 [(yd_fieldoptions.field_arysize)=20];  //没有重置掉技能等级的主动天赋技能
	optional int32 talent_skill_upgrade_cost = 7;                                   //天赋主动技能升级费用
	optional bool free_reset_use = 8;       //免费重置是否用过
	optional bool skill_tree_unlock = 9;    //技能树是否解锁
	repeated HeroSkillSet skill_set = 10 [(yd_fieldoptions.field_arysize)=3];     //技能设置方案
	optional int32 use_set_idx = 11;                                              //使用的第几套设置方案
}

message RoleSkillData
{
	repeated HeroSkillInfo learn_skill = 1 [(yd_fieldoptions.field_arysize)=50];   //学习的技能
	repeated HeroSkillSet skill_set = 2 [(yd_fieldoptions.field_arysize)=3];       //技能设置方案
	optional int32 use_set_idx = 3;                                                //使用的第几套设置方案
	optional bool free_switch = 4;                                                 //免费切换转职是否使用
	optional int32 skill_point = 5;                                                //剩余技能点	
	optional int32 transfer_id = 6;                                                //转职id
	optional bool is_awake = 7;                                                    //是否觉醒
	optional int32 use_skill_point = 8;                                            //已经使用技能点
	optional bool can_transfer = 9;                                                //完成转职任务，可以转职
	optional int32 ex_transfer_id = 10;                                            //体验转职ID
	optional int32 version = 11;                                                   //技能版本号，用于运营过程中修改重置
	optional int32 advance_sp = 12;                                                //剩余技能点
	optional int32 use_advance_sp = 13;                                            //已使用高级技能点
}


message GemstoneWearData
{
	repeated int32 gemstone = 1 [(yd_fieldoptions.field_arysize)= 4];    //宝石信息
}

message GemStoneData
{
	repeated GemstoneWearData wear_data = 1[(yd_fieldoptions.field_arysize)= 9];    //装备位对应的宝石信息
}

message EquipProcessLevel
{
    optional int32 level = 1;
    optional int32 sub_level = 2;
}
message TempEquipPosAttr
{
    repeated CSAttr attr_list = 1[(yd_fieldoptions.field_arysize)=2];
    optional uint32 end_time = 2;
}

message EventEffectAttr
{
	repeated CSAttr attr = 1 [(yd_fieldoptions.field_arysize)=50];//改变的属性
}

message HeroOne
{
	required uint32 id = 1; //id
	required uint32 job = 2; //职业
	repeated CSAttr attr_list = 3 [(yd_fieldoptions.field_arysize)=168];//属性列表
	repeated uint64 equip_list = 5 [(yd_fieldoptions.field_arysize)=9];
	required int32 pve_times = 6;//pve参与次数
	required int32 pvp_times = 7;//pvp参与次数
	optional int32 skin_desc = 8; //皮肤
	optional GemStoneData gemstone_data = 9;    //宝石数据
	required int32 debut_skill = 10; //入场技
	optional int32 hero_rank = 17; //英雄评级(1:C; 2:B; 3:A; 4:S; 5:SS, 6:SSS)
	optional int32 hero_sub_rank = 18; //英雄小评级
	optional int32 fp_tick_time = 20;   //专注点最后tick时间
    repeated int32 state_list = 21[(yd_fieldoptions.field_arysize)=32]; // 装备buff
    //repeated EquipProcessLevel process_level_list = 22[(yd_fieldoptions.field_arysize)=8]; //附念
    repeated TempEquipPosAttr       temp_attr_list = 23 [(yd_fieldoptions.field_arysize)=8];
    optional int32           equip_strength_level = 27; //附念最低等级
	optional EventEffectAttr event_attr	= 28;	// 特殊效果属性改变
}

message GuildWarFormaion
{
	repeated uint32	 formation = 1 [(yd_fieldoptions.field_arysize)=2]; //出战阵容英雄	
}

message HeroData
{
	repeated HeroOne hero_list					 = 1 [(yd_fieldoptions.field_arysize)=1]; 	//英雄列表
}

message RoleSkinData
{
	repeated int32 skin_list = 6[(yd_fieldoptions.field_arysize)=60]; //已购买的皮肤
}

message tbWriteList
{
	optional string account_id = 1[(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64, (yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional string account_pwd = 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
}

message tbRoleIDMap
{
	required uint64 uin 	= 1 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	required uint32 world_type = 2 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //账号类型
	required uint32 world_id = 3 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //区服ID
	optional uint64 role_id	= 4; //角色ID
	//需要根据UIN建立索引
}


enum RoleListState
{
	ROLE_STATE_CREATE = 1;    //创建
	ROLE_STATE_USE = 2;       //已经在使用
	ROLE_STATE_DEL = 3;       //删除
}

message RoleOne
{
	required uint64 role_id = 1;     //角色唯一id
	required int32 actor_id = 2;     //角色描述id
	optional int32 actor_level = 3;  //等级 
	optional string name = 4 [(yd_fieldoptions.field_bufsize)=32]; //角色名字
	optional RoleListState state = 5 [default=ROLE_STATE_CREATE];  //状态
	optional int32 role_ce = 6; //战斗力
	repeated int32 awake_branch = 7 [(yd_fieldoptions.field_arysize) = 2];  //技能觉醒id, 转职信息
	repeated int32 fashion_id = 8 [(yd_fieldoptions.field_arysize) = 7]; //时装信息
    optional int32 equip_strength_level = 9; // 附念最低等级
	required int32 source_id = 10; //渠道号
	optional int32 ex_transfer_id = 12;     //体验转职ID   
	optional int32 transfer_id = 13;        //转职ID
}

message AccountSafeScoreData
{
	optional uint32 mtime 					= 1;	// 评估时间
	optional int32 score					= 2[default=1200];	// 通用信用分
	optional int32 lv						= 3;	// 拦截等级
	optional uint32 req_time				= 4;	// 上一次请求的时间
}

message IDIPRoleSealedData
{
	optional uint64 role_id = 1;
	optional uint32 sealed_time = 2;	// 封号截止时间戳
	optional string reason = 3[(yd_fieldoptions.field_bufsize)=512];	// 封号原因
}

message IDIPSealedData
{
	repeated IDIPRoleSealedData role_sealed = 1[(yd_fieldoptions.field_arysize)=6];
	optional uint32 sealed_time = 2;	// 全区封号截止时间戳
	optional string reason = 3[(yd_fieldoptions.field_bufsize)=512];	// 全区封号原因
}

message IDIPRoleForbiddenChat
{
	optional uint64 role_id = 1;
	optional uint32 ban_time = 2;	// 禁言截止时间戳
	optional string reason = 3[(yd_fieldoptions.field_bufsize)=512];	// 禁言原因
}

message IDIPForbiddenChatData
{
	repeated IDIPRoleForbiddenChat role_forbidden = 1[(yd_fieldoptions.field_arysize)=6]; // 被禁言的角色
	optional uint32 ban_time = 2;	// 全区禁言截止时间戳
	optional string reason = 3[(yd_fieldoptions.field_bufsize)=512];	// 全区禁言原因
}

message IDIPRoleForbiddenTrade
{
	optional uint64 role_id = 1;
	optional uint32 ban_time = 2;	// 禁止交易截止时间戳
	optional string reason = 3[(yd_fieldoptions.field_bufsize)=512];	// 禁止交易原因
}

message IDIPForbiddenTradeData
{
	repeated IDIPRoleForbiddenTrade role_forbidden = 1[(yd_fieldoptions.field_arysize)=6]; // 被禁止交易的角色
	optional uint32 ban_time = 2;	// 全区禁止交易截止时间戳
	optional string reason = 3[(yd_fieldoptions.field_bufsize)=512];	// 全区禁止交易原因
}

message IDIPRoleForbiddenFriend
{
	optional uint64 role_id = 1;
	optional uint32 ban_time = 2;	// 禁止添加好友截止时间戳
	optional string reason = 3[(yd_fieldoptions.field_bufsize)=512];	// 禁止添加好友原因
}

message IDIPForbiddenFriendData
{
	repeated IDIPRoleForbiddenFriend role_forbidden = 1[(yd_fieldoptions.field_arysize)=6]; // 被禁止添加好友的角色
	optional uint32 ban_time = 2;	// 全区禁止添加好友截止时间戳
	optional string reason = 3[(yd_fieldoptions.field_bufsize)=512];	// 全区禁止添加好友原因
}

message TXAccountInfo
{
	optional bool is_check_name = 1[default=false];			// 是否实名认证
}

message RoleData
{
	repeated RoleOne role_list = 4 [(yd_fieldoptions.field_arysize)=8];   //角色列表
	repeated RoleOne del_role = 5 [(yd_fieldoptions.field_arysize)=6];    //删除列表
	optional int32 last_del_time = 6;   //最后删除角色时间
	optional uint64 last_off_role = 7;	//最后离线的角色id

	optional bool is_sealed=8;
	optional uint32 sealed_time=9;
	optional string sealed_reason=10[(yd_fieldoptions.field_bufsize)=64];
	optional AccountSafeScoreData safe_score_data	= 11;	// 安全信用数据
	optional IDIPSealedData idip_sealed	= 12;	// idip 的封号
	optional IDIPForbiddenChatData ban_chat = 13;	// idip 的禁言
	optional IDIPForbiddenTradeData ban_trade = 14; 	// idip的禁止交易
	optional IDIPForbiddenFriendData ban_friend	= 15;	// idip的禁止添加好友
	
	optional TXAccountInfo tx_account_info = 16;	// 腾讯账号信息
}

enum EFanType
{
	GAME_FAN_TYPE_UNKNOW = 0;
	GAME_FAN_TYPE_HUNTER = 1;   //猎人IP粉
	GAME_FAN_TYPE_ACT = 2;      //ACT玩家	
	GAME_FAN_TYPE_MMO = 3;      //MMO玩家
	GAME_FAN_TYPE_2DY = 4;      //二次元
}

message tbRoleList
{
	required uint64 uin = 1 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY ];
	optional uint32 world_type = 2 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //账号类型
	required uint32 world_id = 3 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //区服ID
	optional RoleData role_data = 4; //角色列表
	optional int64 phone_num = 5;
	optional uint32 fan_type = 6;  //玩家类型，对应EFanType
    optional uint32 guard_start_time = 7;
    optional uint32 guard_end_time = 8; 
    optional string guard_msg = 9[(yd_fieldoptions.field_string_len)=1024, (yd_fieldoptions.field_bufsize)=1024];
    optional BagPage  storage_data = 11; 
}


message tbGMAccount
{
	required string open_id = 1 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY, (yd_fieldoptions.field_string_len)=128, (yd_fieldoptions.field_bufsize)=128];   //open-id
	optional int32  privilege = 2;   //权限
}


message WearRune
{
	required uint64 uid = 1;     //念纹信息
	required int32 pos = 2;		//念纹放置左上角位置
	required int32 rotate = 3; 	//符文旋转值, 1->4 顺时针
	required int32 desc_id = 4;    //念纹描述id
	optional int32 x_pos = 5;  //念纹放置左上角x位置
	optional int32 y_pos = 6;  //念纹放置左上角x位置
}

enum enRunePosState
{
	EN_RUNE_POS_STATE_FREE = 0;   //开启未穿戴
	EN_RUNE_POS_STATE_WEAR = 1;   //穿戴
	EN_RUNE_POS_STATE_LOCK = 9;   //未解锁
}

message RunePlate
{
	repeated enRunePosState pos = 1 [(yd_fieldoptions.field_arysize)=48];   //符文盘的位置信息
	repeated WearRune wear_rune = 2 [(yd_fieldoptions.field_arysize)=24];   //镶嵌的念纹
	optional int32 plate_id = 3;  //空间配置id，对应RunePlateDesc
}

message RoleRuneData
{
	required RunePlate rune_plate = 1;
}

message RoleBattleStatistic
{
	required int32 solo_times = 1; //1v1总计参与场次
	required int32 multi_pve_times = 2; //多人PvE总计参与场次（单人不算）
	required int32 multi_pvp_times = 3; //多人PvP总计参与场次
	optional int32 rift_times = 4;	//大秘境参与场次
}

enum enGuildMemTitle
{
	EN_MEM_TITLE_NONE					= 0;
	EN_MEM_TITLE_PRESIDENT 				= 1; //会长
	EN_MEM_TITLE_VICE_PRESIDENT 		= 2; //副会长
	EN_MEM_TITLE_HIGH_LEVEL				= 3; //精英
	EN_MEM_TITLE_MEMBER					= 4; //会员
}

//message SnsFriendApply		//社交好友邀请函
//{
//	required uint64 apply_role_id 			= 1; // 邀请者
//	required uint64 apply_time 				= 2; // 邀请时间  
//	optional ENFriendSourceType source 		= 3[default=EN_FRIEND_SOURCE_OTHER]; // 好友申请来源
//
//} 


message RoleCorpsData
{
	optional uint64 id = 1;                   //战队id
	optional uint32 season_battle_cnt = 2;    //赛季场次
	optional uint32 season_win_cnt = 3;       //赛季胜利场次
	optional uint32 floor = 4;                //层数
	optional uint32 history_max_floor = 5;    //
	optional uint32 total_battle_cnt = 6;     //历史总场次
	optional uint32 total_win_cnt = 7;        //历史总胜利场次
	optional uint32 season = 8;  //第几赛季
}

// 师傅或者徒弟的信息
message MyMasterPlayerInfo
{
	optional uint64 role_id 	= 1;
	optional string role_name 	= 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional enProfessionType profession = 3[default=EN_PROFESSION_NONE];	// 玩家职业
	optional bool is_finish		= 4;	// 是否结业
	optional int32 transfer_id  = 5;    // 转职ID
}
message MyApprenticePlayerInfo
{
	optional uint64 role_id 	= 1;
	optional string role_name 	= 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional enProfessionType profession = 3[default=EN_PROFESSION_NONE];	// 玩家职业
	optional uint64 time		= 4;	// 建立关系的时间
	optional int32  transfer_id = 5;    //转职ID
}
message MasterFindStatusInfo
{
	optional bool is_find							= 1[default=true];	// 是否需要寻找弟子
	optional string master_sign						= 2[(yd_fieldoptions.field_bufsize)=128, (yd_fieldoptions.field_string_len)=128];
}

message RoleMasterInfo
{
	optional MyMasterPlayerInfo master			= 1;	// 我的师傅数据
	repeated MyApprenticePlayerInfo apprentice	= 2[(yd_fieldoptions.field_arysize)=3];		// 我的未结业弟子数据
	repeated uint64 finish						= 3[(yd_fieldoptions.field_arysize)=200];	// 结业的弟子
	optional int32 count						= 4;	// 未评价的次数
	optional uint64 leave_time					= 6; 	// 师傅上一次解除关系的时间
	optional MasterFindStatusInfo master_status	= 7;	// 收徒状态以及公告
	optional int32 apply_app_count				= 8;	// 当天收徒申请的次数
	optional int32 apply_master_count			= 9;	// 当天拜师申请的次数
	optional int32 day_count					= 10;	// 日收徒数
	optional uint64 leave_master_time			= 11;	// 弟子上一次解除关系的时间
}

message SingleGMFriendInfo
{
	optional uint64 role_id 	= 1;
	optional bool is_friend		= 2;	// false 黑名单  true为好友
}
message RoleGMFriendInfo
{
	repeated SingleGMFriendInfo friend_list		= 1[(yd_fieldoptions.field_arysize)=210];
	repeated SingleGMFriendInfo	imother_list	= 2[(yd_fieldoptions.field_arysize)=1000];	//我在谁的好友列表里面
	optional uint64 start_block_time			= 3;	// 本周不再推荐的开始时间
}

message RoleFamilyTitle
{
	optional string firstname    			= 1[(yd_fieldoptions.field_bufsize)=16, (yd_fieldoptions.field_string_len)=16];
	optional string lastname     			= 2[(yd_fieldoptions.field_bufsize)=16, (yd_fieldoptions.field_string_len)=16];
}

message RoleFamilyData
{
	optional uint64 uuid						= 1;	// 家族唯一id
	optional string memo_name 					= 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //家族字号
	optional RoleFamilyTitle family_title		= 3[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //家族称号
	repeated uint64 mem_id						= 4[(yd_fieldoptions.field_arysize)=20];	// 家族所有成员的id
	optional int32 mem_max_count				= 5;	// 家族最大人数
	optional uint64 family_caller_id			= 6;	// 家族仪式发起人的id
	optional uint64 family_group_id				= 7;	// 家族群组
}

message TeamMatchSnsInfo
{
	optional int32 last_ntf_time = 1;
	optional int32 last_refuse_time = 2;
	optional int32 recv_count = 3;
}

// 行会修炼的buff
message GuildBuffInfo
{
	optional int32 id				= 1;	// 数据表编号
	optional int32 study_time		= 2;	// 修炼的开始时间
	optional int32 lv  				= 3;	// 等级
}

message GuildMemberStudyBuff
{
	repeated GuildBuffInfo buff_info				= 1[(yd_fieldoptions.field_arysize) = 10];	// 行会属性修炼信息
}

message GuildShopMemberItemInfo
{
	optional int32 id					= 1;	// 行会商城编号
	optional int32 count				= 2;	// 购买的个数
}

message GuildSnsShopMemberData
{
	repeated GuildShopMemberItemInfo shop_item_info	= 1[(yd_fieldoptions.field_arysize)=100]; // 购买的商城物品
}

message GuildArchitectureInfo
{
	optional int32 archi_lv				= 1;	// 建筑等级
}

enum enGuildStatus
{
	EN_GUILD_STATUS_PREPARE			= 0; //预备状态
	EN_GUILD_STATUS_NORMAL	    	= 1; //正常
	EN_GUILD_STATUS_QUIET	    	= 2; //沉寂
	EN_GUILD_STATUS_FORZEN	    	= 3; //冻结
	EN_GUILD_STATUS_WILL_DISMISS  	= 4; //濒临解散
	EN_GUILD_STATUS_DISMISS  		= 5; //解散
}

message GuildAttrInfo
{
	optional int32 id				= 1;
	optional int32 lv				= 2;
}

message GuildAttrArrayInfo
{
	repeated GuildAttrInfo attr_info		= 1[(yd_fieldoptions.field_arysize) = 10];
}

// 行会信息
message GuildSnsBaseInfo
{
	optional uint64	guild_id					= 1;	// 所在公会
	optional string guild_name 					= 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];	// 公会名
	repeated GuildArchitectureInfo arc_info 	= 3[(yd_fieldoptions.field_arysize) = 4];	// 建筑信息，用建筑类型的做索引
	optional int32 guild_mem_cnt				= 4;
    optional uint32 guild_create_time           = 5;
	optional int32 sequence_id					= 6;
	optional uint64 president_id				= 7;
	optional enGuildStatus status				= 8;
    optional GuildAttrArrayInfo attr_data   	= 9; //升级的公会属性
}

// 行会成员信息
message GuildSnsMemberInfo
{
	optional enGuildMemTitle guild_title 		= 1;
	optional int64 total_tax					= 2;
    optional int32 join_guild_time              = 3;
}

// 行会答题相关
message GuildSnsQuestionInfo
{
	optional int32 question_index				= 1;	// 行会答题题目序号
}

// 行会boss相关
message GuildBossInfo
{
	repeated int32 id								= 1[(yd_fieldoptions.field_arysize) = 10];	// 行会boss表id
}

// 行会捐献相关
message GuildContributeItem
{
	optional int32 week_contri						= 1;	// 本周捐献获得贡献
}

message GuildRoleSnsData
{
	optional GuildSnsBaseInfo guild_base_info		= 1;	// 行会基础信息
	optional GuildSnsMemberInfo guild_mem_info		= 2;	// 行会成员信息
	optional GuildSnsQuestionInfo guild_question  	= 3;	// 行会答题
	optional GuildMemberStudyBuff study_buff		= 4;	// 修炼的行会属性信息
	optional GuildBossInfo guild_boss_info			= 5;	// 行会boss信息
	optional GuildContributeItem guild_contri		= 6;	// 行会捐献物品信息
	optional GuildSnsShopMemberData shop_data		= 7;	// 行会商店购买的信息
}

//社交相关数据(好友, 工会, 战队等)
message RoleSnsData
{
	optional GuildRoleSnsData guild_role			= 1;	// 行会数据
	optional RoleCorpsData corps_data   			= 2;	// 战队信息
	optional RoleMasterInfo master_data				= 3;	// 师徒数据
	optional RoleGMFriendInfo friend_info			= 4;
	optional RoleFamilyData family_data				= 5;	// 家族数据
	
	optional TeamMatchSnsInfo team_match_sns_info 	= 6;	// 组队社交匹配信息
    optional QQGroupInfo group                  	= 7;
	
	optional int32 day_refresh_time					= 20;
}


message RoleParagonData
{
    required uint64 exp = 1; //当前等级经验
    required uint32 level = 2;
    repeated uint32 points = 3[(yd_fieldoptions.field_arysize)=4]; //未分配点数
	repeated CSAttr attr_points_list = 4[(yd_fieldoptions.field_arysize)=16];//已分配点数列表
    required uint64 exp_sum = 5; //经验和
}

message BattleKilledMonster
{
	optional int32 id = 1;
	optional int32 num = 2;
} 

enum enBattleScore 
{
    EN_BATTLE_SCORE_NONE = 0;
    EN_BATTLE_SCORE_SSS  = 1;
	EN_BATTLE_SCORE_SS   = 2;
	EN_BATTLE_SCORE_S	 = 3;
	EN_BATTLE_SCORE_A    = 4;
	EN_BATTLE_SCORE_B  	 = 5;
	EN_BATTLE_SCORE_C	 = 6;
}

enum enBattleResult
{
	EN_BATTLE_BREAK = 0; //战斗中断
	EN_BATTLE_WIN = 1; //战斗胜利
	EN_BATTLE_FAIL = 2; //战斗失败
}

message BattleScore
{
    required enBattleResult is_win       = 1;
    optional int32          score_sum    = 2; //总评分
    optional enBattleScore  score_level  = 3;

	required int32          score_time   = 4; // 用时评分
	optional int32          score_event  = 5; // 事件评分
	optional int32          score_dead   = 6; // 死亡评分
	optional int32          score_hit    = 7; // 死亡评分
	
	optional int32          kill_count   = 8; 
	optional int32          hurt         = 9;
    optional int32          assist_count = 10;

    optional int32          used_time    = 11;
    optional int32          dead_times   = 12;
    optional bool           target_fin   = 13;

	optional int32          score_drug   = 14;
	optional int32          score_win    = 15;

    optional int32          time_out     = 16;

    optional int32          score_revival  = 17;
    optional int32          score_been_hit = 18;
}

message HeroBattleInfo
{
	optional int32 hero_id = 1;
	optional int32 utilization_rate = 2;
	optional int64 export_hurt = 3;
	optional int32 force = 4;
}

message RoleBattleScore
{
	optional enCampType       camp             = 1;
	optional uint64           role_id          = 2;
	optional string           role_name        = 3[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional int32            kill_count       = 4;
	optional int32            dead_count       = 5;
	optional int32            export_hurt      = 6;
	optional int32            hurt             = 7;
	optional bool             is_mvp           = 8;
	optional int32            avatar           = 9;									//头像
	repeated HeroBattleInfo   hero_battle_info = 10[(yd_fieldoptions.field_arysize)=2]; 
	optional int32            friend_score     = 11;
	optional int32            score_sum        = 12;
	optional int32            role_lv          = 13;//玩家等级
	optional int32            role_mag         = 14; //玩家念力
	optional enProfessionType profession       = 15[default=EN_PROFESSION_NONE];	// 玩家职业
	optional int32            assist_count     = 16; //助攻数目
	optional GradeInfo        grade_info       = 17; //段位信息
    optional int32            skyarena_buff_count = 18; // 天空竞技场神符获得数量
	optional int32            tranfer_id       = 19;
}

message BattleAwardItems
{
    optional int32 id = 1;
    optional int32 num = 2;
    optional int32 quality = 3;
    optional uint64 uuid = 4;
}

message HeroExpAward
{
    required int32 hero_id = 1;
    required int32 hero_exp = 2;
}
message BattleExpBonus
{
    optional uint32           qq_gamecenter_bonus = 1;//QQ游戏中心加成
    optional uint32           weixin_gamecenter_bonus = 2;//WX游戏中心加成
    optional uint32           qqvip_bonus = 3;//QQ超级会员加成
    optional uint32           team_bonus = 4;//组队加成
    optional uint32           friend_bonus = 5;//好友同组加成
    optional uint32           master_bonus = 6;//师徒同组加成
    optional uint32           guild_bonus = 7;//行会同组加成    
    optional uint32           family_bonus = 8;//家族同组加成
}
message BattleAwardTempData
{
    required uint32           exp                = 1;
    required uint32           money              = 3;
    required uint32           gold               = 4;

    //
	repeated BattleAwardItems first_win_items    = 13[(yd_fieldoptions.field_arysize) = 10];
    repeated BattleAwardItems items              = 14[(yd_fieldoptions.field_arysize) = 50];
    repeated BattleAwardItems team_items         = 15[(yd_fieldoptions.field_arysize) = 50];

	optional int32            fight_honor        = 18;
	optional int32            militant_score     = 19;
	optional int32            grade_socre        = 20; //段位积分
	optional int32            hunter_socre       = 21; //猎人积分
	optional int32            grade_star         = 22; //段位星星变化
    optional BattleExpBonus   exp_bonus          = 23; //经验加成
}

message TeamMembers
{
	required uint64 role_id = 1;
	required string name = 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
	//required uint64 guild_id = 3;
	optional bool sended_friend_invite = 4;
    optional int32 avatar_id = 5;
}

message RiftItem
{
	optional uint32 id = 1;
	optional uint64 num = 2;
}

message Pvp1v1ScoreData
{
    //竞技评分
    optional int32 my_mmr = 1;
    optional int32 my_mmr_changed = 2;
	optional int32 grade = 3;
	optional int32 star = 4;
	optional int32 old_grade = 5;
	optional int32 old_star = 6;
	
    optional int32 rival_mmr = 11;
    optional int32 rival_mmr_changed = 12;
	optional int32 add_coin = 13;  //决斗币
}

message BattlePhantomTroupeLeaderScore
{
	optional int32 use_time = 1;         //通关时间
	optional int32 use_time_score = 2;   //通关时间得分
	optional int32 dead_count = 3;       //死亡次数
	optional int32 dead_count_score = 4; //死亡次数得分
	optional int32 item_num = 5;         //蜘蛛纹章数量
	optional int32 item_num_score = 6;   //蜘蛛纹章得分
	optional int32 total_score = 7;      //最终得分
}

message DrawAwardData
{
	repeated Item draw_item = 1 [(yd_fieldoptions.field_arysize)=2];
}

message BattleScoreTempData 
{
	required uint64              battle_id                  = 99; 
	required int32               level_id                   = 1; // 关卡id 
    required BattleScore         score                      = 2;
    required BattleAwardTempData award                      = 3;
	repeated RiftItem            rift_item                  = 4 [(yd_fieldoptions.field_arysize)=16];
	optional uint32              rift_time                  = 5;
	repeated RoleBattleScore     role_score                 = 6 [(yd_fieldoptions.field_arysize)=32];
	optional enBattleType        battle_type                = 7;
	optional int32               traptower_score            = 8;
	optional int32               traptower_probability_temp = 9;
	optional int32               traptower_floor            = 10;
	optional int32               traptower_buff_num         = 11;
	optional float               traptower_probability      = 12;
	optional int32               traptower_time_score       = 13;
	optional int32               traptower_dead_score       = 14;
	optional int32               camp_socre                 = 15; //阵营得分
	optional int32               enemy_camp_socre           = 16; //敌方阵营得分
	optional BattlePhantomTroupeLeaderScore phantom_troupe_score = 17;     //幻影旅团团长追捕得分
    optional Pvp1v1ScoreData     pvp_1v1_score_data         = 19;
	optional DrawAwardData       draw_award_data            = 20;   //关卡结算抽卡
}

message BattleEndTempData
{
    required BattleScoreTempData score = 1;

    //required int32 total_kill_monster_exp = 14;
	//repeated Item  quest_drop_list = 11[(yd_fieldoptions.field_arysize) = 8];
	//repeated BattleKilledMonster killed_monster_list = 12[(yd_fieldoptions.field_arysize) = 16];
	repeated TeamMembers team_members = 13[(yd_fieldoptions.field_arysize)=8];
}

message CurrencyExchangeLog
{
    required int32 id = 1;
    required int32 times = 2;
}

message RoleCommentHeroDayData
{
	optional uint32 time = 1;
	repeated uint32 hero_id = 2[(yd_fieldoptions.field_arysize)=100];
}

enum enPreQuestionState
{
    EN_UNANSWER_QUESTION = 0;
	EN_ANSWER_QUESTION  = 1;
}

message BuyMarketItem
{
	optional int32 item_id = 1;
	optional int32 item_num = 2;
}

message TradeGoodsBuyer
{
	optional uint64 buy_role_id 	= 1; //购买者
	optional string buy_role_name	= 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //购买者
	optional Item item				= 3;
	optional int32 time				= 4;
}

message TradePlayerDeposit
{
	repeated TradeGoodsBuyer buy_role 	= 1[(yd_fieldoptions.field_arysize)=50];	// 玩家购买记录
	optional double deposit				= 2;										// 存款
}

message TradePlayerDepositEvent
{
	optional TradeGoodsBuyer buy_role 	= 1;										// 玩家购买记录
	optional double deposit				= 2;										// 存款
}

message RoleSeaDiscoveryData
{
	optional uint32 reward_index			= 1;	// 从1开始
	optional uint64 time					= 2;
}

message OneBattleDrugSetting
{
	required BattleDrugType battle_drug_type = 1; //战斗内药物类型
	required int32 id = 2; //编号
	required int32 auto_use_percent = 3; //自动使用的百分比,10/20/30/40/50
}

message BattleDrugSetting
{
	repeated OneBattleDrugSetting drug_settings = 1[(yd_fieldoptions.field_arysize)= 2]; //物品设置
	required bool open = 2; //是否打开
}

message DailyScoreItem
{
    optional int32 item_id     = 1;
	optional int32 daily_count = 2; 
}

message RoleDailyScore
{
    optional uint64         last_update_time = 1;
	repeated DailyScoreItem daily_score      = 2[(yd_fieldoptions.field_arysize) = 20];
}

message RoleZoneDesignData
{
	repeated int32 skin						= 1[(yd_fieldoptions.field_arysize) = 100];	// 皮肤
	repeated int32 emblem					= 2[(yd_fieldoptions.field_arysize) = 100];	// 徽章(需要同步到sns服，这个数据可以被其他玩家看到)
	repeated int32 effect					= 3[(yd_fieldoptions.field_arysize) = 100];	// 挂件
}

// 玩家私密信息设置
message RoleSecretSetData
{
	optional bool is_role_info								= 1[default=true];	// 是否可以查看玩家基础信息
	optional bool is_add_friend								= 2[default=true];	// 是否可以加好友
	optional bool pk_invitation_rejected					= 3[default=false];	// 是否拒绝pk邀请
	optional bool is_refuse_team_match                      = 4[default=false]; // 是否接受社交组队邀请
}

message BattleTimes
{
    optional enBattleType battleType = 1;
    optional int32        times      = 2;
    optional uint32       reflesh_time = 3;
}

message TempRankMiscData
{
    optional int32  rank        = 1;
	optional uint64 version     = 2;
	optional int32  bak_rank    = 3;
	optional uint64 bak_version = 4;
}

message Pvp1v1BattleData
{
    optional int32 win = 1;        //赛季赢
    optional int32 lose = 2;       //赛季输
}

message TaskOne
{
	optional int32 id = 1;           //日常id
	optional int32 finish_count = 2; //完成次数
	optional bool is_award = 3;      //奖励是否领取
}


message Pvp1v1Data
{
    optional int32            mmr         = 1;
    repeated Pvp1v1BattleData data        = 2[(yd_fieldoptions.field_arysize) = 8];
    optional int32            lose_streak = 3; //连败
	optional int32            season      = 4; //赛季ID
	optional int32            grade       = 5; //当前段位
	optional int32            last_grade  = 6; //上周段位
	repeated TaskOne          task        = 7[(yd_fieldoptions.field_arysize) = 8];; //1v1日常
	optional int32            last_op_time = 8; 
	optional int32            star        = 9; //星星
	optional int32            today_coin_num = 10;   //今日获得决斗币数量
	optional int32            history_max_grade = 11;  //历史最高段位
	optional int32            win_streak  = 12; //连胜
}

enum enIDIPRankForbiddenType
{
	EN_IDIP_RANK_TYPE_ROLE_INFO		= 1;	// 个人信息
	EN_IDIP_RANK_TYPE_MILITANT		= 2;	// 武斗大会
	EN_IDIP_RANK_TYPE_AUCTION		= 3;	// 决战拍卖会
	EN_IDIP_RANK_TYPE_GUILD			= 4;	// 行会相关
	EN_IDIP_RANK_TYPE_FIGHT			= 5;	// 竞技排行
	EN_IDIP_RANK_TYPE_MAGIC			= 6;	// 无尽迷宫
	
	EN_IDIP_RANK_TYPE_ALL			= 99;	// 所有的
}

enum enIDIPActivityForbiddenType
{
	EN_IDIP_ACT_TYPE_RIFT			= 1;	// 大秘境
	EN_IDIP_ACT_TYPE_OTO			= 2;	// 1v1积分赛
	EN_IDIP_ACT_TYPE_ROOM			= 3;	// 自由房间赛
	EN_IDIP_ACT_TYPE_SKYAREA		= 4;	// 天空竞技场
	EN_IDIP_ACT_TYPE_AUCTION		= 5;	// 决战拍卖会
	EN_IDIP_ACT_TYPE_SINGLE_RIFT	= 6;	// 单人秘境
	EN_IDIP_ACT_TYPE_PHANTOM		= 7;	// 旅团
	EN_IDIP_ACT_TYPE_SEA			= 8;	// 遗迹淘金
	EN_IDIP_ACT_TYPE_TEAM_RIFT		= 9;	// 多人秘境
	
	EN_IDIP_ACT_TYPE_ALL			= 99;	// 所有的
}

message IDIPSingleRankForbiddenData
{
	optional enIDIPRankForbiddenType type		= 1;
	optional uint32 forbidden_time				= 2;	// 封禁的结束时间戳（秒）
	optional string reason						= 3[(yd_fieldoptions.field_bufsize)=512, (yd_fieldoptions.field_string_len)=512]; //封禁原因
}

// idip禁止参与排行榜接口
message IDIPRankForbiddenData
{
	repeated IDIPSingleRankForbiddenData single_rank = 1[(yd_fieldoptions.field_arysize) = 20];
	optional uint32 forbidden_time				= 2;	// 全部排行榜封禁的结束时间戳（秒）
	optional string reason						= 3[(yd_fieldoptions.field_bufsize)=512, (yd_fieldoptions.field_string_len)=512]; //封禁原因
}

message IDIPSingleActForbiddenData
{
	optional enIDIPActivityForbiddenType type	= 1;	
	optional uint32 forbidden_time				= 2;	// 封禁的结束时间戳（秒）
	optional string reason						= 3[(yd_fieldoptions.field_bufsize)=512, (yd_fieldoptions.field_string_len)=512]; //封禁原因
}

// idip 禁止指定玩法
message IDIPActivityForbiddenData
{
	repeated IDIPSingleActForbiddenData single_act = 1[(yd_fieldoptions.field_arysize) = 20];
	optional uint32 forbidden_time				= 2;	// 全部玩法封禁的结束时间戳（秒）
	optional string reason						= 3[(yd_fieldoptions.field_bufsize)=512, (yd_fieldoptions.field_string_len)=512]; //封禁原因
}

// idip封禁数据
message IDIPForbiddenData
{
	optional IDIPRankForbiddenData rank_data				= 1;	// 排行榜封禁数据
	optional IDIPActivityForbiddenData act_data				= 2;	// 玩法封禁
}

message ActivityQuestFinish
{
	optional int32 id					= 1;
	optional int32 count				= 2;	// 当前完成的次数
	optional bool is_get				= 3;	// 是否获取了奖励
}

message ActivityQuestData
{
	repeated ActivityQuestFinish data	= 1[(yd_fieldoptions.field_arysize) = 100];
}

message ActivityLuckDrawData
{
	optional int32 lucky_value				= 1;	// 幸运值
}

message RoleMiscData //杂项数据 
{
	optional int32                  GSRankMax                   = 3; // GS 排名的最高值
	optional int32                  ExpRankMax                  = 4; // Exp 排名的最高值
    repeated CurrencyExchangeLog    currency_log                = 7[(yd_fieldoptions.field_arysize) = 4];
    optional int32                  currency_update_time        = 8;
	optional RoleCommentHeroDayData comment_hero_data           = 9;
	optional int32                  fp_tick_time                = 12; //fp的更新时间
	optional int32                  examiner_id                 = 15;
	optional int32                  question_round              = 17;
	optional int32                  question_id                 = 18;
	repeated int32                  reward_id                   = 19[(yd_fieldoptions.field_arysize) = 20];
	optional int32                  help_count                  = 20;
	optional enPreQuestionState     pre_question_state          = 21;
	optional int32                  pre_answer_question_time    = 22;
	optional int32                  gacha_them                  = 23;
	optional int32                  pre_buy_market_time         = 24;
	repeated BuyMarketItem          buy_market_items            = 25[(yd_fieldoptions.field_arysize) = 48];
	optional TradePlayerDeposit     trade			            = 26; // 珍宝阁的数据
	optional bool                   is_recv_question_startntf   = 27; //是否接受到问答任务开始消息
	optional int32                  recv_question_startntf_time = 28; //上次接受消息时间
	optional bool                   is_award_question_reward    = 29; //是否领取奖励
	repeated int32                  asked_question_id           = 30[(yd_fieldoptions.field_arysize) = 20];
	optional RoleSeaDiscoveryData   sea_discovery_data          = 31;	// 遗迹淘金数据
	optional BattleDrugSetting      battle_drug_setting         = 32; //战斗药品设置
	optional RoleDailyScore         role_daily_score            = 33; //每日积分限制 
	optional RoleZoneDesignData		zone_design_data			= 34; //空间装饰数据
	optional int32 					lucky_tick_time 			= 35; //幸运值更新时间
	optional int32 					global_mail_time			= 36; //全局邮件更新时间
	repeated int64					questionnaire_id			= 37[(yd_fieldoptions.field_arysize) = 100]; //已经参与的问卷id
	optional RoleSecretSetData		secret_data					= 38; //私密设置
    repeated BattleTimes            battle_times    = 39[(yd_fieldoptions.field_arysize) = 20]; 
	optional int64 					tmp_phone_num 				= 40;
	optional int32 					tmp_auth_code 				= 41;
	optional uint64 				auth_code_stamp 			= 42;
    optional int32                  trainning_guide_id          = 50; // 训练场连招挑战
	repeated TempRankMiscData       temp_rank_misc_data         = 51[(yd_fieldoptions.field_arysize)=8];
	optional bytes                  acquired_player_level_bouns = 52;// 256/8=8

    optional int32                  total_daily_online_time     = 54; 
    
    optional uint32                 world_question_answer_time  = 55;
    optional bool                   use_reward_double           = 56; //双倍奖励(目前只有单人副本可用)
	optional IDIPForbiddenData  	idip_forbidden_data			= 57; //idip封禁数据
	optional ActivityQuestData 		act_quest_data				= 58; //活动任务数据
    optional uint64                 six_clock_update_time       = 59;
	optional ActivityLuckDrawData	luck_draw_data				= 60;
	optional int32                  gacha_reset_time            = 61; //宝罐积分重置时间
}

message SkyarenaStatistics
{
    optional int32 floor_max = 1;       //最高层数
    optional int32 battle_times = 2;    //战斗次数
    optional int32 win_times = 3;       //胜利次数
}

message RoleSkyarenaData
{
    optional int32 season_id = 1; // 当前赛季
    optional SkyarenaStatistics statistics_history  = 2; //
    optional SkyarenaStatistics statistics_season   = 3;
    // optional int32 floor  = 4; -- today.floor_max

    required int32 mmr          = 5;
    optional int32 show_score   = 6; //表现分
    optional int32 win_streak   = 7;
    //daily award
    optional SkyarenaStatistics statistics_today    = 10;
    repeated int32  today_box_picked    = 11[(yd_fieldoptions.field_arysize)=3];
    optional uint32 time_of_data_update = 12;
    optional uint32 last_daily_divison_reward_got_time = 13;

    // 0: 正常进行比赛 // 1:轻微消极比赛 // 2:严重消极比赛 // 3:重大消极比赛    
    optional int32                  sa_ban_mode     = 17; 
    optional uint32                 sa_ban_time     = 18; // 记录时间
    optional int32                  sa_ban_score    = 19; // 信誉积分
}



message AheadCost 
{
	required int32 src_msg_id 		= 1; //业务ID， 同一业务只能存在一个
	required bool is_add			= 2; //增减， 遵守受损优先， 预扣的先扣，不成功则加回去。 预增的等结果返回再增，返回失败则不增
	repeated ItemGridCSData item_list 		= 3[(yd_fieldoptions.field_arysize)=10];
	optional uint64 ahead_time 		= 4; //超时机制,暂定90s
    //repeated Equip  equip 			= 5[(yd_fieldoptions.field_arysize)=10];
    //repeated TreasureMap map 		= 6[(yd_fieldoptions.field_arysize)=10];
    //repeated Rune rune		 		= 7[(yd_fieldoptions.field_arysize)=10];
	optional enItemChangeReason reason = 8;
	optional int32 reason_param     = 9;
	optional int32 diamond          = 10; //预扣或者预加的钻石
}

message RoleAheadCostData
{
	repeated AheadCost ahead_cost_list = 1[(yd_fieldoptions.field_arysize)=10];
}

enum AchieveBattleEvent
{
    E_ABE_KILL_MONSTER  = 1;
    E_ABE_GET_BUFF   = 2;
}

enum QuestEvent
{
	E_QUEST_EVENT_NONE	 			= 0;

	E_QUEST_EVENT_LEVEL_UP 			= 1;	
	E_QUEST_EVENT_CONSUME_ITEM 		= 2; // 交任务需要物品 // 交任务需要随机物品
	E_QUEST_EVENT_USE_ITEM			= 3; // 玩家选择物品
	E_QUEST_EVENT_KILL_MONSTER		= 4; // 
	E_QUEST_EVENT_COMPLETE_LEVEL	= 5; //
    E_QUEST_EVENT_JOIN_GUILD        = 6; //交任务需要加入公会
    E_QUEST_EVENT_GET_ITEM          = 7; //获得指定物品
    E_QUEST_EVENT_HAVE_ITEM         = 8; //收集指定物品
    E_QUEST_EVENT_STRENGTHEN        = 9; //装备强化
    E_QUEST_EVENT_GUILD_HELP        = 10; //公会援助
    E_QUEST_EVENT_PROTECT           = 11; //完成护送
    E_QUEST_EVENT_COMPLETE_LEVEL_WITH_MODE = 12; //完成指定模式和子类型的关卡
    E_QUEST_EVENT_DRESS_GEM             = 13; // 穿戴念玉
    E_QUEST_EVENT_COMPLETE_LOOP_QUEST_WITH_TIMES = 14; // 完成循环任务
    E_QUEST_EVENT_COMPLETE_SKILL_AWAKE  = 16; // 完成任务需要觉醒
    E_QUEST_EVENT_ENTER_LEVEL           = 17; // 参与关联战场
	E_QUEST_EVENT_COMPLETE_INSTANCE     = 18;  //完成instance
	E_QUEST_EVENT_COMPLETE_SKILL_TRANSFER = 19;  //完成转职
    E_QUEST_EVENT_DAILOG_WITH_NPC       = 20; //与npc对话
    E_QUEST_EVENT_UNLOCK_SKILL_ORDER    = 21; // 解锁技能槽
	E_QUEST_EVENT_COMPLETE_LEVEL_TIME	= 22; // 完成关卡需要时间
	E_QUEST_EVENT_COMPLETE_LEVEL_STAR	= 23; // 完成关卡需要评价
	
    //E_QUEST_EVENT_COMPLETE_LOOP_QUEST   = 15; // 完成循环任务库
    //E_QUEST_EVENT_COMPLETE_QEC          = 24; // 完成修行任务链
    //E_QUEST_EVENT_USE_LIFE_SKILL        = 21; // 使用生活技能
    //E_QUEST_EVENT_HELP_SOULBOX      = 6; // 公会魂匣互助
    //E_QUEST_EVENT_GUILD_MEMBER_1V1  = 7; // 公会成员切磋
    //E_QUEST_EVENT_SMILT             = 8; // 装备冶炼 
    //E_QUEST_EVENT_PVP_KILL_ONCE     = 9; // 单场击杀
    //E_QUEST_EVENT_PVP_KILL_COUNT    = 10; // 总击杀
    //E_QUEST_EVENT_PVP_WIN_AND_KILL_ONCE = 11; // 胜利单场击杀
    //E_QUEST_EVENT_PVP_WIN_AND_KILL_COUNT = 12; // 胜利总击杀
    E_QUEST_EVENT_MAX                   = 24;
}
enum QuestLogEvent
{
    QLE_NONE = 0;
    QLE_ACCEPT = 1; //Accept
    QLE_GIVEUP = 2; //GiveUp
    QLE_DELETED = 3; //Deleted
    QLE_COMPLETE = 4; //Complete
    QLE_SYNC    = 5; //Sync
    QLE_LOOP_ACCEPT = 6; //LoopQuest.Accept
    QLE_LOOP_GIVEUP = 7; //LoopQuest.GiveUp
    QLE_LOOP_DELETED = 8; //LoopQuest.Deleted
    QLE_LOOP_TIMEOUT = 9; //LoopQuest.TimeOut
    QLE_LOOP_SYNC = 10; //LoopQuest.Sync
    QLE_QEC_ACCEPT = 11; //Accept
    QLE_QEC_COMPLETE = 12; //Complete
    QLE_QEC_FINISH  = 13; //Finish
    QLE_QEC_GIVEUP  = 14; //GiveUp
    QLE_QEC_RESET_TARGET  = 15;//ResetTarget
}
message QuestEventNode
{
	required QuestEvent ev = 1;
	required int32		condition = 2;
	required int32 		condition_value = 3;
	optional int32 		value = 4; // 当 ev == 5 时 
}
message QuestNode
{
	required int32 quest_id = 1;
	required uint32 accept_time = 2;
	repeated QuestEventNode event_node_list = 3[(yd_fieldoptions.field_arysize)=5];//
}

message LoopQuest
{
	required int32 loop_id = 1;
	optional int32 quest_id = 2;
	optional uint32 accepted_time = 3;
	optional int32 crit_times = 4; // 结算扣除 两个次数用完之后不给奖励 
    optional int32 no_crit_times = 5; // 结算扣除 两个次数用完之后不给奖励
	optional int32 node_times = 6; // 接受之后增加
	optional int32 cycle_times = 7; // 轮数
	optional int32 node_index = 8; // 分配任务id后增加 环数
    optional bool  giveup   = 9; //  
}

message LoopQuestFinishedNode 
{ //护送,循环任务共用节点
	required int32  quest_id = 1;
	required uint32 last_finished_time = 2;
	required uint32 times_in_day = 3;
}

message IntrustQuest 
{
    required QuestNode node = 1;
    optional bool finished  = 2;
}

message QuestExpChain
{
    optional uint32 accepted_time = 1; // 接受时间
    optional int32  week_index = 2;    // 接受后本周次数
    optional int32  id = 3;            // 任务编号
    optional bool   finished          = 4;
    optional int32  npc_id            = 10; //寻人npc id, 战斗npc id //交任务npc 
    optional int32  item_id           = 11; //交物品id // default item id
    optional int32  item_type         = 12;
    optional int32  item_sub_type     = 13;
    optional int32  item_quality      = 14;
    optional int32  level_id          = 16; // 战斗关卡id
}

enum enTitle2Condition
{
    EN_T_C2__01 =  1;  //"角色等级要求";
    EN_T_C2__02 =  2;  //"技能平均等级要求";
    EN_T_C2__03 =  3;  //"修炼平均等级要求";
    EN_T_C2__04 =  4;  //"念玉总评分要求";
    EN_T_C2__05 =  5;  //"念纹总评分要求";
    EN_T_C2__06 =  6;  //"附念平均等级要求";
    EN_T_C2__07 =  7;  //"装备平均评分要求";
    EN_T_C2__08 =  8;  //"最高伙伴评分要求";
    EN_T_C2__09 =  9;  //"人物总评分要求";
    EN_T_C2__10 = 10;  //"完成捉拿悬赏次数要求"; //LoopID:3
    EN_T_C2__11 = 11;  //"完成要人护送次数要求"; //QuestType:3
    EN_T_C2__12 = 12;  //"完成念力修行次数要求"; //LoopID:1
    EN_T_C2__13 = 13;  //"完成行会货运次数要求";
    EN_T_C2__14 = 14;  //"完成宝图任务次数要求"; //LoopID:4
    EN_T_C2__15 = 15;  //"完成猎物追踪次数要求"; //E_Battle_Type_Pledge
    EN_T_C2__16 = 16;  //"完成清理嵌合蚁次数要求"; //E_Battle_Type_Clean_Fitant 
    EN_T_C2__17 = 17;  //"完成智力闯关次数要求";
}

message RoleTitle2Data
{
    optional int32 current_title = 1; 
    optional int32 next_title    = 2;

    repeated int32 condition_values = 10[(yd_fieldoptions.field_arysize)=10];
}

message QuestFinishCount
{
    optional int32 count    = 1; //完成次数
	optional int32 quest_id = 2; //任务ID

}
message RoleQuestData
{
	repeated QuestNode             accepted_list         = 1[(yd_fieldoptions.field_arysize)=48];
	repeated LoopQuestFinishedNode loop_quest_nodes_list = 3[(yd_fieldoptions.field_arysize)=1024];
	optional bytes            finished_quest     = 8;// 16384/8=2048 
	repeated QuestFinishCount quest_finish_count = 24[(yd_fieldoptions.field_arysize)=256];
	repeated LoopQuest        loop_list          = 9[(yd_fieldoptions.field_arysize)=32];
    optional QuestExpChain         exp_chain                  = 10;
    //optional uint64  achieve_point      = 21;
	optional bytes   finished_achieve   = 22; //[1024]; //8192/8
	optional bytes   achieve_reward     = 28; //[64];   //512/8
    repeated uint32  achieve_data_list  = 23[(yd_fieldoptions.field_arysize)=4096];
	//optional uint64  last_day_tick_time = 25;

    optional RoleTitle2Data        title2_data                = 30;

    //repeated IntrustQuest intrust_list = 14[(yd_fieldoptions.field_arysize)=3];
    //optional uint32       intrust_quest_reflesh_time = 15;
}

message CityRoleQuestData
{
    repeated QuestNode accepted_list = 1[(yd_fieldoptions.field_arysize)=48];
}

enum enCounterPeriod
{
	EN_COUNTER_PERIOD_NONE			= 0;
	EN_COUNTER_PERIOD_DAILY 		= 1;	//凌晨0：00：00刷新
	EN_COUNTER_PERIOD_WEEK 			= 2;		//周一凌晨0：00：00刷新
	EN_COUNTER_PERIOD_MONTH 		= 3;		//一号凌晨0：00：00刷新
	EN_COUNTER_PERIOD_FOREVER 		= 4;	//永不刷新
	EN_COUNTER_PERIOD_ONE_HOUR 	= 5;	//凌晨0：00：00开始，每过一小时刷新刷新
	EN_COUNTER_PERIOD_TWO_HOUR 	= 6;	//凌晨0：00：00开始，每过二小时刷新	
	EN_COUNTER_PERIOD_MAX			= 7;
}

enum enActivityResetType
{
	EN_ACTIVITY_RESET_NULL			= 0; // 不重置
	EN_ACTIVITY_RESET_TIME			= 1; // 定时重置
}

// 活动相关的枚举需要ActivityData.xls里面填数值
enum enCounterType		//计数器类型
{
	EN_COUNTER_NULL					= 0;
	EN_COUNTER_CHAMBER				= 1;  //商会
	EN_COUNTER_ACTIVITY_DEGREE		= 2;  // 活跃度的当前值
	EN_COUNTER_ACTIVITY_RWD			= 3;  // 活跃度的奖励索引(标识索引是否被领取了)
	
	EN_COUNTER_ACTIVITY_TYPE_1		= 4;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_2		= 5;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_3		= 6;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_4		= 7;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_5		= 8;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_6		= 9;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_7		= 10;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_8		= 11;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_9		= 12;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_10		= 13;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_11		= 14;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_12		= 15;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_13		= 16;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_14		= 17;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_15		= 18;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_16		= 19;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_17		= 20;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_18		= 21;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_19		= 22;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_20		= 23;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_21		= 24;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_22		= 25;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_23		= 26;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_24		= 27;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_25		= 28;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_26		= 29;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_27		= 30;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_28		= 31;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_29		= 32;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_30		= 33;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_31		= 34;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_32		= 35;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_33		= 36;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_34		= 37;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_35		= 38;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_36		= 39;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_37		= 40;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_38		= 41;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_39		= 42;  // ActivityData活动表专用
	EN_COUNTER_ACTIVITY_TYPE_40		= 43;  // ActivityData活动表专用
		
	EN_COUNTER_JOIN_EXAMINATION		= 44; // 智力闯关
	EN_COUNTER_EXCHANGE_BY_DAY		= 45; // 天兑换
	EN_COUNTER_EXCHANGE_BY_WEEK		= 46; // 周兑换
}

enum enCounterTimeType
{
	EN_COUNTER_TIME_NO_LIMITE			= 0;	// 无限制，由外部去重置
	EN_COUNTER_TIME_EVERY_DAY			= 1; 	// 每日
	EN_COUNTER_TIME_DAYS				= 2; 	// 隔多日
	EN_COUNTER_TIME_EVERY_WEEK			= 3; 	// 每周
}

message Counter
{
	required int32 id = 2;			//计数编号, 
	required int32 value = 3;		//当前计数值
}

message CounterData
{
	required enCounterType type = 1;
	repeated Counter counter = 2[(yd_fieldoptions.field_arysize)=50];
	required uint64 next_up_time = 3;	
}



message RoleCounterData
{
	repeated CounterData counter_data = 1[(yd_fieldoptions.field_arysize)=50];	//确保大于enCounterType，否则溢出
}

message SkillInfo
{
	required int32 skill_id = 1;
	required int32 level = 2;
}

message RoleChapterScore
{
	required int32         chapter_id           = 1; //章ID
	required enBattleScore history_max_score    = 2; //关卡历史最高评分
	optional bool          is_achieve_challenge = 3; //是否完成挑战目标
	optional int32         death_count          = 4; //死亡次数
	optional int32         used_time            = 5; //通关时间
}

message RoleInstanceScore
{
    optional int32 instance_id = 1;
    repeated enStageScoreType score_list      = 2 [(yd_fieldoptions.field_arysize) = 8];
}

message RoleInstanceChallenge
{
    optional int32 instance_group_id     = 1;
    repeated int32 finish_challenge_list = 2 [(yd_fieldoptions.field_arysize) = 20];
}

enum enStageScoreType
{
    EN_STAGE_SCORE_TYPE_NONE        = 0; 
    EN_STAGE_SCORE_TYPE_WIN         = 1; //胜利通关
	EN_STAGE_SCORE_TYPE_NO_USE_DRUG = 2; //不使用药品通关
	EN_STAGE_SCORE_TYPE_TIME          = 3; //时间限制通关
    EN_STAGE_SCORE_TYPE_BEEN_HIT      = 4; //被击次数
    EN_STAGE_SCORE_TYPE_REVIVAL_TIMES = 5; //复活次数
}

message RoleRushStageScore
{
    optional int32            rush_id         = 1;
	repeated enStageScoreType score_list      = 2 [(yd_fieldoptions.field_arysize) = 8];
	optional int32            daily_win_count = 3;
	optional bool             first_win       = 4;  
}

message RoleRushChapterScore
{
    optional int32 chapter_id     = 1;
    optional bool  is_get_reward     = 2;
}

message RoleChapterScoreData
{
	repeated RoleChapterScore      chapter_score_list      = 1 [(yd_fieldoptions.field_arysize) = 100]; //最多300章
    repeated RoleInstanceScore     instance_score_list     = 2 [(yd_fieldoptions.field_arysize) = 100];
	repeated RoleInstanceChallenge instance_challenge_list = 3 [(yd_fieldoptions.field_arysize) = 64];
	repeated RoleRushStageScore    rush_score_list         = 4 [(yd_fieldoptions.field_arysize) = 200];
	repeated RoleRushChapterScore  rush_chatper_list       = 5 [(yd_fieldoptions.field_arysize) = 50];
	optional uint64                last_update_time        = 6;
    repeated int32                 rush_reward_list        = 7 [(yd_fieldoptions.field_arysize) = 200]; 
}

message HeroHP
{
	required uint32 hero_id = 1; //英雄id
	required uint32 hp      = 2; //血量
}

message RiftLevelClearanceData
{
	optional int32 rift_floor = 1; //秘境楼层
	optional int32 rift_time = 2; //通关最短时间
	optional enBattleScore score_level = 3; //通关评价
	optional string player_name = 4 [(yd_fieldoptions.field_bufsize)=32]; //通关玩家
	optional bool is_buff_level = 5; //带buff通关
}
message RiftLevelData
{
	repeated RiftLevelClearanceData rift_level_clearance_data = 1[(yd_fieldoptions.field_arysize)=100]; //所有玩家通关楼层的最佳成绩
}
message tbRiftLevelData
{
	required int32 id4db = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional RiftLevelData rift_level_Data = 2; //秘境楼层
}

message RiftFloorBonuses
{
	optional int32 floor = 1; //楼层首通奖励
	optional enBattleScore score_level = 2; //通关评价与奖励挂钩
	optional bool is_award = 3; //已经领取
}
enum enRiftFloorChallengeState
{
	E_UNCHALLENGE			= 1; //未挑战
	E_FAILD					= 2; //挑战失败
	E_UNCLEARANCE			= 3; //卡关
	E_SUCCESS				= 4; //挑战成功
}
message RoleRiftData
{
	optional int32 next_floor = 1; //下一楼层
	optional enRiftFloorChallengeState floor_state = 2; //挑战下一层状态
	optional int32 nseason = 3; //当前赛季轮数 
	optional int32 tseason = 4; //当前赛季时间 
	optional int32 theme = 5;  //当前赛季theme
	repeated RiftFloorBonuses floor_bonuses = 6[(yd_fieldoptions.field_arysize)=100]; //本赛季楼层首通奖励
	repeated RiftFloorBonuses level_bonuses = 7[(yd_fieldoptions.field_arysize)=100]; //本赛季大关通关奖励
	optional int32 rift_buff = 8; //每日强化
	optional int32 rift_buff_lv = 9; //强化等级
	optional int32 last_tick_time = 10; //上次刷新时间
	optional int32 rift_challenge_count = 11; //今日挑战次数 
	optional int32 last_challenge_time = 12; //上次挑战时间
	repeated RiftLevelClearanceData rift_level_clearance_data = 13[(yd_fieldoptions.field_arysize)=100]; //个人通关楼层的最佳成绩
    optional int32 tmp_rift_score = 16;
    optional int32 tmp_rift_time = 17;
    optional int32 tmp_rift_map = 18;
    repeated HeroHP tmp_hero_hp = 19[(yd_fieldoptions.field_arysize)=128];
	optional int32 hero_id = 20;
	optional int32 in_combat_floor = 21;
	optional uint64 ulLastResetMapTime = 22; //上次重置地图时间(1970 秒单位)
	optional bool is_reset_rift_map = 23; //是否重置rift地图
}

message RiftShopItem
{
    optional int32 site_id = 1;
    optional int32 item_id = 2;
    optional int32 item_stock = 3;
	optional int32 lv_limit = 4;
	optional int32 chance = 5;
    optional int32 credit_id = 6;
    optional int32 price = 7;
}
message RoleShopInfo
{
	optional int32 shop_id = 1;
	repeated RiftShopItem rift_shop_desc = 2[(yd_fieldoptions.field_arysize)=12];
}
message RoleShopData
{
	optional int32 rift_shop_refresh_time = 1;
	repeated RoleShopInfo role_shop_info = 2[(yd_fieldoptions.field_arysize)=8];
}

//message RiftItemData
//{
//	optional uint32 id = 1;
//	optional uint32 num = 2;
//}

message RoleNoviceGuide
{
	repeated int32 completed_list = 1[(yd_fieldoptions.field_arysize) = 100];
}

message MPveMapData
{
	optional int32 mapid = 1;
	optional int32 play_count = 2;
}

message Bouns
{
	optional uint32 score = 1;
}

message RoleMPveData
{
	optional uint32 time = 1;
	optional uint32 score = 2;
	repeated HeroHP mpve_hero_hp = 3[(yd_fieldoptions.field_arysize)=128];
	repeated MPveMapData mpve_map_data = 4[(yd_fieldoptions.field_arysize)=10];
	repeated Bouns bouns = 5[(yd_fieldoptions.field_arysize)=10];
}

//大厅状态，对应三个记录表
enum enHallStateType
{
	EN_HALL_STATE_NONE			= 				0;				//
	EN_HALL_STATE_WAITING		=				1;				//等待中
	EN_HALL_STATE_ROOM			=				2;				//房间中
	EN_HALL_STATE_MATCH			=				3;				//快速匹配中
}

//实际是战斗类型
enum enBattleType
{
    // battle type 必须以 E_Battle_Type_ 作为前缀
	E_Battle_Type_None                     = 0[(yd_fieldoptions.field_enum_cname) = "无"];  
	E_Battle_Type_Multi_Pve                = 1[(yd_fieldoptions.field_enum_cname) = "多人PVE"];              //多人PVE,可以组队
	E_Battle_Type_Challenge_Ball           = 2[(yd_fieldoptions.field_enum_cname) = "挑战_运球"];            //可以组队
	E_Battle_Type_Challenge_Guild_Activity = 3[(yd_fieldoptions.field_enum_cname) = "挑战_行会活动"];        //可以组队
	E_Battle_Type_Challenge_WheelWar       = 4[(yd_fieldoptions.field_enum_cname) = "挑战_车轮战"];          //可以组队
	E_Battle_Type_Challenge_Match_Team     = 5[(yd_fieldoptions.field_enum_cname) = "挑战_天空竞技场组队"];  //猎人试炼，可以组队
	E_Battle_Type_Training                 = 6[(yd_fieldoptions.field_enum_cname) = "挑战_练习场"];
	E_Battle_Type_Solo_Pve                 = 7[(yd_fieldoptions.field_enum_cname) = "单人PVE"];
	E_Battle_Type_Rift                     = 8[(yd_fieldoptions.field_enum_cname) = "大秘境"];
    E_Battle_Type_Newbie				   = 9[(yd_fieldoptions.field_enum_cname) = "新手关"];
	E_Battle_Type_Challenge_Guild          = 10[(yd_fieldoptions.field_enum_cname) = "公会战"];              //可以组队
	E_Battle_Type_Challenge_2v2v2          = 11[(yd_fieldoptions.field_enum_cname) = "2v2v2"];               //可以组队
	E_Battle_Type_Challenge_Speed          = 12[(yd_fieldoptions.field_enum_cname) = "匹配竞速"];
	E_Battle_Type_SkyArena_Ident           = 13[(yd_fieldoptions.field_enum_cname) = "天空竞技场定级赛"];
	E_Battle_Type_SkyArena_1V1             = 14[(yd_fieldoptions.field_enum_cname) = "天空竞技场单人赛"];
	E_Battle_Type_SkyArena_FloorMaster_1V1 = 15[(yd_fieldoptions.field_enum_cname) = "天空竞技场单人层主赛"];
	E_Battle_Type_Solo_Pvp                 = 16[(yd_fieldoptions.field_enum_cname) = "切磋"];
    E_Battle_Type_Ladder                   = 17[(yd_fieldoptions.field_enum_cname) = "天梯"];
    E_Battle_Type_Question                 = 18[(yd_fieldoptions.field_enum_cname) = "问答任务"];
    E_Battle_Type_NianPracticeChallenge    = 19[(yd_fieldoptions.field_enum_cname) = "念修行挑战"];
	E_Battle_Type_Pledge                   = 20[(yd_fieldoptions.field_enum_cname) = "誓约之境"];
	E_Battle_Type_ESCORT				   = 21[(yd_fieldoptions.field_enum_cname) = "护送要人"];
	E_Battle_Type_TREASUREMAP			   = 22[(yd_fieldoptions.field_enum_cname) = "藏宝图"];
	E_Battle_Type_SkillPreview			   = 23[(yd_fieldoptions.field_enum_cname) = "技能预览"];
	E_Battle_Type_Clean_Fitant			   = 24[(yd_fieldoptions.field_enum_cname) = "清理嵌合蚁"];
	E_Battle_Type_Tutorial				   = 25[(yd_fieldoptions.field_enum_cname) = "教学关"];
	E_Battle_Type_TrapTower				   = 26[(yd_fieldoptions.field_enum_cname) = "陷阱塔"];
    E_Battle_Type_Six_Experiment           = 27[(yd_fieldoptions.field_enum_cname) = "六系试炼"];
    E_Battle_Type_Sea_Discovery            = 28[(yd_fieldoptions.field_enum_cname) = "遗迹淘金"];
	E_Battle_Type_Auction_Competition      = 29[(yd_fieldoptions.field_enum_cname) = "拍卖争夺会"];
	E_Battle_Type_Phantom_Troupe           = 30[(yd_fieldoptions.field_enum_cname) = "幻影旅团追捕"];
	E_Battle_Type_Phantom_Troupe_Core      = 31[(yd_fieldoptions.field_enum_cname) = "幻影旅团中坚"];
	E_Battle_Type_Phantom_Troupe_Leader    = 32[(yd_fieldoptions.field_enum_cname) = "幻影旅团团长"];
	E_Battle_Type_Guild_Competition        = 33[(yd_fieldoptions.field_enum_cname) = "新公会战"];
	E_Battle_Type_Guild_Boss			   = 34[(yd_fieldoptions.field_enum_cname) = "公会BOSS"];
	E_Battle_Type_Guild_Boss_Copy		   = 35[(yd_fieldoptions.field_enum_cname) = "公会BOSS残影"];
	E_Battle_Type_Arena_Single             = 36[(yd_fieldoptions.field_enum_cname) = "擂台单人"];
	E_Battle_Type_Arena_Team               = 37[(yd_fieldoptions.field_enum_cname) = "擂台组队"];
	E_Battle_Type_Wheel                    = 38[(yd_fieldoptions.field_enum_cname) = "模拟积分赛"];
	E_Battle_Type_Wanted                   = 39[(yd_fieldoptions.field_enum_cname) = "捉拿悬赏"];
	E_Battle_Type_Auction_Guide            = 40[(yd_fieldoptions.field_enum_cname) = "拍卖争夺会引导"];
	E_Battle_Type_Magic                    = 41[(yd_fieldoptions.field_enum_cname) = "魔境挑战"];
	E_Battle_Type_Training_Guide           = 42[(yd_fieldoptions.field_enum_cname) = "练习场引导"];
	E_Battle_Type_1V1                      = 43[(yd_fieldoptions.field_enum_cname) = "1V1斗技场"];               //可以组队
	E_Battle_Type_Partner_Async            = 44[(yd_fieldoptions.field_enum_cname) = "伙伴异步pvp"]; 
	E_Battle_Type_Single_Dungeon           = 45[(yd_fieldoptions.field_enum_cname) = "单人副本"];
	E_Battle_Type_Room_1V1             	   = 46[(yd_fieldoptions.field_enum_cname) = "房间单人赛"];
	E_Battle_Type_Room_3V3             	   = 47[(yd_fieldoptions.field_enum_cname) = "房间大乱斗"];
	E_Battle_Type_Room_WheelWar            = 48[(yd_fieldoptions.field_enum_cname) = "房间车轮战"];
	E_Battle_Type_Transfer_Experience      = 49[(yd_fieldoptions.field_enum_cname) = "转职体验"];
	E_Battle_Type_Torment_Tower            = 50[(yd_fieldoptions.field_enum_cname) = "试炼塔"];
	E_Battle_Type_Abyss                    = 51[(yd_fieldoptions.field_enum_cname) = "深渊"];
    E_Battle_Type_Ancient                  = 52[(yd_fieldoptions.field_enum_cname) = "远古副本"];
    E_Battle_Type_Infinite_Tower_Defence   = 53[(yd_fieldoptions.field_enum_cname) = "无限塔防"];
	E_Battle_Type_Sea_Defence              = 54[(yd_fieldoptions.field_enum_cname) = "海上守卫"];

    // battle type 必须以 E_Battle_Type_ 作为前缀
}

message RoleBattleInfo
{
	optional uint64       battle_id               = 1;  //战斗ID
	optional uint64       host_ip                 = 2;  //战斗服IP
	optional uint32       port                    = 3;  //战斗服Port
	optional int32        map_desc_id             = 4;
    optional int32        level_link_desc_id      = 5;
	optional uint32       state                   = 6;
	optional int32        battle_svr              = 7;
	optional string       url                     = 8[(yd_fieldoptions.field_bufsize)=128, (yd_fieldoptions.field_string_len)=128];
	optional int32        multi_id                = 9;  //连战ID, 如果不是连战则为0
	optional int32        multi_stop              = 10; //连战第几关
    optional int32        drug_used_times         = 11; //药品使用次数
    optional int32        instance_id             = 12;
    optional int32        rush_id                 = 13;
}

message RoleCreditData
{
    optional bool   is_inited                = 1;  //是否初始化过
	optional uint64 next_can_play_time       = 2;  //能参与pvp战斗的时间
	optional uint64 last_check_recover_time  = 3;  //上次监测恢复时间
	optional int32  can_punish_point_recover = 4;  //是否满足恢复荣誉点
	optional uint64 next_can_match_time      = 5;  //能匹配PVP的时间
}

enum enNianPracticeStatus
{
	E_NIAN_PRACTICE_LOCK = 0; //未解锁
	E_NIAN_PRACTICE_CHALLENGE = 1; //挑战
	E_NIAN_PRACTICE_NONE = 2; //可以开始修行
	E_NIAN_PRACTICE_ONE = 3;//修行1 
	E_NIAN_PRACTICE_TWO = 4;//修行2
	E_NIAN_PRACTICE_THREE = 5;//修行3
	E_NIAN_PRACTICE_COMPLETE = 6;//完成念能力修行
}
message NianPractice
{
	optional enNianPracticeStatus nian_practice_status = 1; //念能力修行状态
	optional int32 nian_position = 2; //念能力修行位置
}
message HeroNianPractice
{
	optional int32 hero_id = 1;
	repeated NianPractice nian_practice = 2[(yd_fieldoptions.field_arysize)=6];
}
message RoleNianPracticeData
{
	repeated HeroNianPractice hero_nian_practice = 1[(yd_fieldoptions.field_arysize)=128]; 
}

//--Partner 相关pb-- start

enum enPartnerState
{
    EN_PARTNER_STATE_NONE                      = 0;
    EN_PARTNER_STATE_REST                      = 1;   //休息
    EN_PARTNER_STATE_FIGHT                     = 2;   //出战
    EN_PARTNER_STATE_DELETE                    = 3;   //不可用（删除）
    EN_PARTNER_STATE_INVALID                   = 4;   //非法状态
}

enum enPartnerNtfType
{
    EN_PARTNER_NTF_TYPE_NONE        = 0; //默认
	EN_PARTNER_NTF_TYPE_BATTLE_END  = 1; //战斗结束
	EN_PARTNER_NTF_TYPE_USE_ITEM    = 2; //使用物品
	EN_PARTNER_NTF_TYPE_MAX         = 3; //最大记得修改
	EN_PARTNER_NTF_TYPE_CLEAR_SKILL = 4; //清空技能
}

message PartnerSkill
{
    optional int32 skill_id                    = 1;   //技能配置表id
	optional int32 skill_lv                    = 2;   //技能等级
}

message PartnerAuctionCompetitionData
{
	optional float win_count  = 1;
	optional float lost_count = 2;
}

enum EPartnerType
{
	EN_PARTNER_TYPE_ACTIVE = 1;     //主动性
	EN_PARTNER_TYPE_SKILL = 2;      //技能加成型
	EN_PARTNER_TYPE_ASSIST = 3;     //辅助型
}

enum enPartnerAIType
{
	EN_PARTNER_AI_ATTACK  = 1;    //进攻型
	EN_PARTNER_AI_DEFEND  = 2;    //防守型
	EN_PARTNER_AI_SUPPORT = 3;    //支援型
}

message PartnerOne
{
    optional uint32                        id                           = 1;   //id, 配置表id
    optional uint64                        uid                          = 2;   //unique id, 标示id, 每个伙伴都不同
    optional uint64                        owner_id                     = 3;   //持有的role id, 为0表示无人持有
	optional int32                         level                        = 4;   //等级
    optional int32                         star                         = 5;   //星级
	optional uint64                        exp                          = 6;   //当前经验值
    optional int32                         quality                      = 7;   //品质
	optional EPartnerType                  type                         = 8;  //伙伴类型
	repeated CSAttr                        attr_list                    = 9  [(yd_fieldoptions.field_arysize) = 168]; //属性	
    repeated PartnerSkill                  skill_list                   = 10 [(yd_fieldoptions.field_arysize) = 3];  //主动技能, AI控制释放
    optional enPartnerState                state                        = 11;  //状态
    optional int64                         gen_time                     = 12;  //获得时间
    optional int64                         end_time                     = 13;  //失效时间 -1表示永久伙伴  
	optional int32                         power                        = 14;  //体力
	optional int32                         active_skill_index           = 15;  //激活的技能索引
	optional int32                         active_cnt                   = 16;  //切换激活次数
	optional bool                          auto_feed                    = 17;  //自动喂养
	repeated int32                         training_cnt                 = 18 [(yd_fieldoptions.field_arysize) = 3];  //训练次数
	optional bool                          is_fatigue                   = 19;  //是否疲劳
}

message PartnerGroupOne
{
	optional int32 group_id            = 1; //羁绊id
	optional int32 star                = 2; //羁绊星级
}

message RolePartnerData
{
    repeated PartnerOne role_partner_list      = 1 [(yd_fieldoptions.field_arysize) = 50]; //伙伴数据
	repeated uint64 battle_partner_id          = 2 [(yd_fieldoptions.field_arysize) = 3];  //出战斗伙伴
	optional uint64 follow_partner_id          = 3; //主城跟随伙伴id
	optional int32 last_op_time                = 4; 
	optional enPartnerAIType ai_type           = 5 [default = EN_PARTNER_AI_ATTACK];
	repeated PartnerGroupOne  group_list       = 6 [(yd_fieldoptions.field_arysize) = 50];
	optional int32 set_group_id                = 7; //配置的羁绊id
}

//--Partner 相关pb-- end

//--Life Skill 相关pb-- start

enum enLifeSkillType
{
    EN_LIFE_SKILL_TYPE_DEF                     = 1;  //提升物理防御
    EN_LIFE_SKILL_TYPE_MAG_DEF                 = 2;  //提升法术防御
    EN_LIFE_SKILL_TYPE_ATK                     = 3;  //提升物理攻击
    EN_LIFE_SKILL_TYPE_MAG_ATK                 = 4;  //提升法术攻击
    EN_LIFE_SKILL_TYPE_CD_REDUCE               = 5;  //提升减CD
    EN_LIFE_SKILL_TYPE_COOKING                 = 6;  //烹饪
    EN_LIFE_SKILL_TYPE_PHARMACY                = 7;  //炼药
    EN_LIFE_SKILL_TYPE_FORGE                   = 8;  //锻造
    EN_LIFE_SKILL_TYPE_TAILOR                  = 9;  //裁缝
    EN_LIFE_SKILL_TYPE_CRAFTWORK               = 10; //工艺
    EN_LIFE_SKILL_TYPE_MAKE_ENCHANTMENT_RED    = 11; //制符(红色)
    EN_LIFE_SKILL_TYPE_MAKE_ENCHANTMENT_YELLOW = 12; //制符(黄色)
    EN_LIFE_SKILL_TYPE_MAKE_ENCHANTMENT_BLUE   = 13; //制符(蓝色)
    EN_LIFE_SKILL_TYPE_MAKE_ENCHANTMENT_GREEN  = 14; //制符(绿色)
    EN_LIFE_SKILL_TYPE_MAKE_ENCHANTMENT_PURPLE = 15; //制符(紫色)
    EN_LIFE_SKILL_TYPE_MAKE_ENCHANTMENT_WHITE  = 16; //制符(白色)
    EN_LIFE_SKILL_TYPE_ALCHEMY                 = 17; //炼金
    EN_LIFE_SKILL_TYPE_GROW_FLOWERS            = 18; //养花
	EN_LIFE_SKILL_TYPE_HP                      = 19; //提升最大生命
	EN_LIFE_SKILL_TYPE_MP                      = 20; //提升最大魔法
	EN_LIFE_SKILL_TYPE_RESILIENCE              = 21; //伤害反弹
	EN_LIFE_SKILL_TYPE_MOVE_SPEED              = 22; //提升移动速度
	EN_LIFE_SKILL_TYPE_ATTACK_SPEED            = 23; //提升攻击速度
	EN_LIFE_SKILL_TYPE_CRIT                    = 24; //提升暴击
    EN_LIFE_SKILL_TYPE_MAX                     = 25; //最大值
}

message LifeSkillOne
{
    optional int32           id               = 1;  //配置表id
    optional enLifeSkillType type             = 2;  //生活技能类型
    optional int32           level            = 3;  //生活技能等级
    optional int32           exp              = 4;  //生活技能经验
    optional int32           today_used_times = 5;  //今日使用次数
    optional int32           total_used_times = 6;  //总使用次数
    optional bool            unlock           = 7;  //是否解锁
    optional int32           step             = 8;  //阶段
    optional uint64          step_start_time  = 9;  //阶段开始时间
    optional uint64          step_finish_time = 10; //阶段完成时间
    optional bool            is_running       = 11; //使用进行中（例如：养花中
}

message RoleLifeSkillData
{
    repeated LifeSkillOne role_life_skill_list  = 1 [(yd_fieldoptions.field_arysize) = 30]; //生活技能列表
    optional uint64       last_update_data_time = 2; //最后更新时间
}

//--Life Skill 相关pb-- end

message Proto_Vector3
{
	required int32 x = 1;
	required int32 y = 2;
	required int32 z = 3;
}


message RoleMapData
{
	optional int32 map_desc_id = 1;                       //主城地图id
	optional Proto_Vector3 pos = 2;						  //位置
	optional int32 direction = 5;						  //方向
}

// cd 时间的频道id
// CD的唯一标示，频道id
enum enCDChannelType
{
	EN_CD_CHANNEL_REFRESH_FRIEND_NET				= 0;	// 刷新好友关系网cd
	EN_CD_CHANNEL_GOODSTRANSPORT_PUBLISH_HELP		= 1;	// 行会货运发布求助cd时间
	EN_CD_CHANNEL_FAMILY_HURRY						= 2;	// 家族进入仪式场景催促cd时间
	EN_CD_CHANNEL_HUNTER_CHANGE						= 3;	// 更换猎人职业cd
	EN_CD_CHANNEL_HUNTER_TASK						= 4;	// 猎人建设专属任务的cd
	EN_CD_CHANNEL_GUILD_QUESTION					= 5;	// 行会答题
	EN_CD_CHANNEL_REFRESH_MASTER_LIST				= 6;	// 拜师列表刷新
	EN_CD_CHANNEL_REFRESH_APPRENTICE_LIST			= 7;	// 收徒列表刷新
	
	EN_CD_CHANNEL_MAX								= 10;  // 最大值,就是RoleCDData数组的最大值
}

//都是毫秒的时间
message SingleCDInfo
{
	optional uint64 start_time						= 1; // 设置的开始时间
	optional int32 cd_time							= 2; // cd时间
}

// 用数组的下标标示频道id
// 下标用enCDChannelType标示
message RoleCDData
{
	repeated SingleCDInfo cd_info					= 1[(yd_fieldoptions.field_arysize) = 10]; // cd 数据
}

message RoleEscortData
{
	optional int32 escort_count = 1; //护送次数 
	optional int32 height_escort_count = 2; //高级护送次数
	optional int32 escort_id = 3; //本次护送ID
	optional int32 escort_quest_id = 4; //本次护送任务ID
	optional int32 escort_fight_count = 5; //本次护送战斗次数
	optional int32 fight_failed_count = 6; //战斗失败次数
	optional int32 escort_accept_time = 7; //领取本次护送任务时间
}

message ExchangeItem
{
	optional int32 item_id = 1; //物品ID
	optional int32 exchange_time = 2; //兑换周期
	optional int32 exchange_count = 3; //兑换次数
}

message RoleTrapTowerData
{
	optional int32 pending_award_floor = 1; //待领取奖励的楼层
	repeated int32 task_award = 2[(yd_fieldoptions.field_arysize) = 8]; //任务奖励
	optional int32 award_score = 3; //积分奖励进度
	optional int32 reset_data_time = 4;
	optional int32 tmp_traptower_floor = 5; //当前陷阱塔层数
	optional int32 tmp_traptower_quest_id = 6; //当前陷阱塔任务ID
}

message RoleSixExperimentData
{
    optional int32  max_reward_score = 1; //已领取最高奖励得分
    optional uint64 last_start_time  = 2; //上次开始时间
    optional uint64 last_end_time    = 3; //上次结束时间
}

// 福利经验的数据
message RoleWelfareExpData
{
	optional uint64 day_refresh_time				= 1;	// 当前日刷新的时间
	optional uint64 week_refresh_time				= 2;	// 当前周刷新的时间
	repeated int32 type_counter						= 3[(yd_fieldoptions.field_arysize) = 20];	// 每个类型计数器，用类型做下标
	optional int32 cur_exp							= 4;	// 当前的福利经验
}


message ChamberCounter
{
	repeated Counter counter = 1 [(yd_fieldoptions.field_arysize) = 500];          //购买次数
	optional int32 last_refresh_time = 2;  //上次刷新时间
}

message MallCounter
{
	repeated Counter counter = 1 [(yd_fieldoptions.field_arysize) = 100];          //按周重置的购买次数
	optional int32 last_refresh_time = 2;  //上次刷新时间
	repeated Counter day_counter = 3 [(yd_fieldoptions.field_arysize) = 100];        //按天重置的购买次数
	repeated Counter total_counter = 4 [(yd_fieldoptions.field_arysize) = 100];      //按运营周期重置的购买次数
}


message MarketTradeRecord
{
	required int32 item_id = 1;   //物品id
	required int32 quality = 2;   //品质
	required int32 num = 3;       //数量
	required int32 price = 4;     //价格
	optional bool is_notify = 5;  //是否公示物品
	optional int32 deal_time = 6;  //成交时间
	optional int32 audit_time = 7; //审核完成时间
}

message MarketData
{
	repeated uint64 sell_list = 1 [(yd_fieldoptions.field_arysize) = 8];   //出售列表, 商品唯一id
	repeated uint64 focus_list = 2 [(yd_fieldoptions.field_arysize) = 20];  //关注列表
	repeated MarketTradeRecord sell_record = 3 [(yd_fieldoptions.field_arysize) = 20];
	repeated MarketTradeRecord buy_record = 4 [(yd_fieldoptions.field_arysize) = 20];
}


message RoleTradeData
{
	optional ChamberCounter chamber_data = 1;
	optional MallCounter mall_data = 2;
	optional MarketData market_data = 3;
}

message RoleMilitantMatchData
{
    //统计信息
    optional int32          total_score       = 1; //活动总积分    
    optional int32          max_win_comb      = 2; //最大连胜次数
    optional int32          total_win_count   = 3; 
    optional int32          total_fight_count = 4;
	optional int32          fight_honor       = 5;

    //单次活动信息
    optional int32          cur_score         = 6;  //当次活动积分, 活动结束积累到总积分
    optional int32          win_comb          = 7;  //连胜次数
    repeated int32          win_reward        = 8  [(yd_fieldoptions.field_arysize) = 50]; //已领取连胜奖励
    optional int32          win_count         = 9;  //胜利次数
    optional int32          fight_count       = 10; //战斗次数
    optional bool           can_match         = 11; //能否匹配
    optional bool           in_militant       = 12; //是否在武斗大会中
    optional uint64         next_match_time   = 13; //下次匹配时间
    optional enMilitantType militant_type     = 14 [default = EN_MILITANT_TYPE_NONE]; //参加的武斗大会类型
    optional int32          lose_count        = 15;
    optional uint64         enter_time        = 16; //进入时间.用于判断是否是过时的活动数据
    optional uint64         start_time        = 17; //开始时间
    optional uint64         end_time          = 18;
	optional int32          today_honor       = 19; //今日获得武勋
    optional int32          militant_id       = 20;
	optional uint64         last_update_time  = 21;
}

message RoleTest
{
    optional int32 test = 1;
}

message SingleTitleData
{
	optional int32 id						= 1;	// 称号id
	optional uint64 start_time				= 2;	// 获得的时间
	optional uint64 end_time				= 3;	// 过期称号时间(0为永久)
	//optional uint64 end_attr_time			= 4;	// 过期属性时间(0为永久)
}

message RoleTitleData
{
    optional int32  active_title_id     = 1; //当前生效的系统称号id

    repeated SingleTitleData all_title      = 4 [(yd_fieldoptions.field_arysize) = 50];
    
    optional GridItemBase       title_item = 3;
}

enum enFashionType
{
    EN_FASHION_TYPE_NONE     	= 0;
	EN_FASHION_TYPE_WEAPON   	= 1; //武器
	EN_FASHION_TYPE_HAIR     	= 2; //发型
	EN_FASHION_TYPE_CLOTHER  	= 3; //衣服
	EN_FASHION_TYPE_TROUSERS 	= 4; //裤子
	EN_FASHION_TYPE_WAIST	 	= 5; //腰部
	EN_FASHION_TYPE_DECORATION	= 6; //饰品
	EN_FASHION_TYPE_HANG		= 7; //挂饰
}

message FashionOne
{
    optional int32  id           = 1; //时装ID, 配置表ID
	optional uint64 time_limit   = 2; //拥有时限
	optional uint64 uuid		 = 4; //时装唯一id（可能是0）
}

message SpawnFashionID
{
	optional int32 spawn_id		 = 1;	// 套装id
	optional int32 id_size		 = 2;	// id对应的数目
}

message FashionSlot
{
    optional int32 id       = 1;
    repeated int32 fashions = 2 [(yd_fieldoptions.field_arysize)= 7];
}

message RoleFashionData
{
	optional bool is_change				= 1[default=false];	// true使用转职默认时装 
	repeated FashionOne  dressed_list	= 4[(yd_fieldoptions.field_arysize)= 7];
	repeated SpawnFashionID  spawn_list	= 5[(yd_fieldoptions.field_arysize)= 7];
}

message RoleGuildCompetitionInfo
{
    optional int32  competition_serial = 1;
	optional uint64 enter_end_time     = 2; 
}

message RoleGuildBattleInfo
{
    optional int32           power              = 1;
	optional enGuildCampType camp               = 2 [default = EN_GUILD_CAMP_TYPE_NONE];
	optional uint64          battle_uid         = 3;
	optional int32           battle_id          = 4;
	optional bool            has_battle_enter   = 5;
	optional int32           competition_serial = 6;
}

message RoleGuildCompetitionData
{
	optional RoleGuildBattleInfo      battle_info               = 1;
	repeated RoleGuildCompetitionInfo register_competition_info = 2 [(yd_fieldoptions.field_arysize)= 4];
}

message RoleArenaData
{
    optional bool   in_area       = 1;
	optional int32  player_idx    = 2;
	optional uint64 last_get_time = 3;
}

enum enMasterType
{
	EN_MASTER = 1; //师傅
	EN_APPRENTICE = 2; //学徒
	EN_NONE = 3; //无
}
enum enMQQuestionState
{
	EN_RIGHT = 1;
	EN_WRONG = 2;
	EN_WAIT = 3;
	EN_UNANSWER = 4;
}
message Apprentice
{
	optional uint64 role_id = 1; //徒弟role id
	optional int32 day_quest_count = 2; //今日完成师徒任务数
	optional bool day_accept_quest = 3; //今天是否接一轮新的师徒任务 
	optional int32 day_quest_num = 4; //今日完成师徒任务次数
}
message MasterQuestInfo
{
	optional int32 round 			 = 1;
	optional int32 quest_id 		 = 2;
	optional int32 npc_id            = 3; //战斗npc id //交任务npc 
    optional int32 item_id           = 4; //交物品id // default item id
    optional int32 item_type         = 5;
    optional int32 item_sub_type     = 6;
    optional int32 item_quality      = 7;
    optional int32 level_id          = 8; // 战斗关卡id
}
message RoleMasterQuestData
{
	optional enMasterType	type 			  = 1 [default = EN_NONE]; //身份类型
	optional int32 			target			  = 2;
	optional MasterQuestInfo info 			  = 3;
	optional int32			reset_time		  = 4;
	optional int32 			day_quest_count   = 5; //今日师徒任务进度 //此字段徒弟有效
	optional int32 			day_quest_num	  = 6; //今日完成师徒任务次数 //此字段徒弟有效

	optional int32			enjoin_time		  = 8;  // 在此时间前禁止接师徒任务
	optional bool 			finished		  = 9;  // 当前任务完成情况 //此字段徒弟有效
	optional uint64 		apprentice_id	  = 10; // 当前任务徒弟role_id //此字段师傅有效
	repeated Apprentice     complete_info	  = 11 [(yd_fieldoptions.field_arysize)= 3]; // 完成师徒任务的徒弟 //此字段师傅有效

	optional int32 			question_id		  = 15;
	optional enMQQuestionState question_state = 16 [default = EN_WAIT];
}

message AuctionCompetitionSeasonInfo
{
    optional int32     serial       = 1; //赛季编号
	optional GradeInfo grade_info   = 2; //段位信息
	optional int32     fight_count  = 3; //战斗场次
	optional int32     win_count    = 4; //胜利场次
    optional int32     mmr          = 5; //MMR
	optional int32     hunter_score = 6; //猎人积分
}

message RoleAuctionCompetitionData
{
	repeated AuctionCompetitionSeasonInfo grade_info          = 1 [(yd_fieldoptions.field_arysize)= 4]; //段位信息
	optional int32                        fight_count         = 2; //总战斗场次
	optional int32                        win_count           = 3; //总胜利场次
	optional int32                        credit_score        = 4; //信誉积分
	optional int32                        credit_level        = 5; //信誉等级
	optional uint64                       ban_end_time        = 6; //禁赛结束时间(未0表示没有)
	optional uint64                       ban_info_clear_time = 7; //禁赛信息清楚时间
	optional int32                        daily_win_count     = 8; //今日胜利次数
	optional bool                         daily_reward        = 9; //收胜奖励领取
	optional uint64                       last_update_time    = 10;
    optional GradeInfo                    best_grade_info     = 11;
	optional uint64                       can_match_time      = 12;
}

message LicenseSlotData
{
	optional int32 row = 1;       //行
	optional int32 col = 2;       //列
	optional int32 block_id = 3;  //格子Id
}

message RoleLicenseData
{
	repeated int32 block_bit_map = 1 [(yd_fieldoptions.field_arysize)= 20] ;   //方格的标致位，0表示为开启，1标识已经开启
	optional bool is_open = 2;  //是否已经开启
	optional int32 exchange_lp = 3;   //已经兑换的lp
	optional int32 cur_lp = 4;        //当前剩余的lp
	optional int32 block_point = 5;   //解锁格数量，每次上线时重新计算
	repeated LicenseSlotData active_skill_slot = 6 [(yd_fieldoptions.field_arysize)= 1];  //奥义槽
	repeated LicenseSlotData passive_skill_slot = 7 [(yd_fieldoptions.field_arysize)= 4];  //战略槽
}

enum enCreditMarketType
{
	EN_FIGHT_HONOR_MARKET		=	1;		//武勋值
	EN_MASTER_SCORE_MARKET		=	2;		//授业点
	EN_EQUIP_EXCHANGE_MARKET	=	3;   	//装备兑换商店
	EN_CRIDIT_SHOP_TYPE_1       =   4;
	EN_CRIDIT_SHOP_TYPE_2       =   5;
	EN_CRIDIT_SHOP_TYPE_3       =   6;
	EN_CRIDIT_SHOP_TYPE_4       =   7;
	EN_CRIDIT_SHOP_TYPE_5       =   8;
	EN_CRIDIT_SHOP_TYPE_6       =   9;
	EN_CRIDIT_SHOP_TYPE_7       =   10;

	EN_INSTANCE_ZONE_MARKET_A	=	11;		//副本积分商店40级，以下为50级到110级
	EN_INSTANCE_ZONE_MARKET_B 	=	12;		
	EN_INSTANCE_ZONE_MARKET_C 	=	13;
	EN_INSTANCE_ZONE_MARKET_D 	=	14;
	EN_INSTANCE_ZONE_MARKET_E 	=	15;
	EN_INSTANCE_ZONE_MARKET_F 	= 	16;
	EN_INSTANCE_ZONE_MARKET_G 	= 	17;
	EN_INSTANCE_ZONE_MARKET_H 	= 	18;
	
	EN_CREDIT_MARKET_MAX = 20;
}
message CreditShopData
{
	optional enCreditMarketType market_type = 1;
	repeated Item item_count = 2[(yd_fieldoptions.field_arysize) = 80];
	repeated Item sum_count = 3[(yd_fieldoptions.field_arysize) = 80];
}
message RoleCreditShopData
{
	repeated CreditShopData credit_shop_data = 1[(yd_fieldoptions.field_arysize) = 10];
	optional int32			reset_time		 = 2;
}


message TroupeChaseOne
{
	optional int32 chase_count = 1;        //追捕次数	
	repeated int32 level_id = 2[(yd_fieldoptions.field_arysize) = 7];           //已经追捕的关卡id
	optional int32 round_refresh_time = 3; //该轮的刷新时间, 每隔一个小时重新刷新一次
}

message RolePhantomTroupeData
{
	optional TroupeChaseOne member_chase = 1;                              //幻影旅团成员追捕
	optional TroupeChaseOne core_chase = 2;                                //幻影旅团中坚追捕
	optional TroupeChaseOne leader_chase = 3;                              //幻影旅团团长追捕
	optional int32 last_chase_time = 4;                                    //最后一次追捕时间
	repeated int32 spider_badge = 5[(yd_fieldoptions.field_arysize) = 7];  //蜘蛛纹章
	optional int32 enter_map_id = 6;                                       //进入战斗场景前的地图id
	optional Proto_Vector3 enter_pos = 7;                                  //进入战斗场景前的地图位置信息
}

message RoleActivityData
{
	optional RolePhantomTroupeData phantom_troupe_data	= 1;    //幻影旅团活动数据
}

enum enCityState
{
    EN_CITY_STATE_TYPE_NONE               = 0;
    EN_CITY_STATE_TYPE_PROHIBIT_MOVE      = 1;
	EN_CITY_STATE_TYPE_PROHIBIT_BE_ATTACK = 2;
}

message CityStateInfo
{
    optional enCityState state      = 1 [default = EN_CITY_STATE_TYPE_NONE];
	optional uint64      add_time   = 2;
	optional int32       duration   = 3;
}

message RoleStateData
{
	repeated CityStateInfo state_info = 2 [(yd_fieldoptions.field_arysize) = 8];
}

message CityBuffOne
{
	optional int32 id = 1;          //city buff id
	optional int32 create_time = 2; //创建时间
	optional int32 duration = 3;    //持续时间
	optional int32 layer = 4;       //层数	
}

message RoleBuffData
{
	repeated CityBuffOne city_buff = 1 [(yd_fieldoptions.field_arysize) = 20];
}

message DungeonInfo
{
    optional int32 id                 = 1; //配置表ID
	optional int32 finish_count       = 2; //完成次数(每次刷新)
	optional int32 total_finish_count = 3; //总完成次数

}
message RoleDungeonData
{
    repeated DungeonInfo dungeon_info    = 1 [(yd_fieldoptions.field_arysize) = 50];
	optional uint64      last_check_time = 2;
}

message RoleOnlineRewardData
{
	optional int32 reward_num = 1;            //今天可以祈福的总次数
	optional int32 reward_id = 2;             //奖励id
	optional bool is_get_reward = 3;          //奖励是否已领取
	optional int32 online_time = 4;           //今天在线累计时间(毫秒)
	optional int32 last_op_time = 5;          //最后一次操作时间
	optional int32 left_reward_num = 6;       //剩余可以祈福数量
}

//角色相关的基础数据
message RoleBaseData
{
	optional RoleBase                   base                               = 1; //角色基本信息
	optional HeroData                   hero                               = 2; //英雄列表
	optional RoleSkillData	            skill                              = 3; //指挥官身上的被动技能表
	optional RolePartnerData            partner_data                       = 4; //玩家伙伴数据
	optional RoleOnlineRewardData       online_reward                      = 5; //在线奖励
}


message TssList
{
	required string inner_productid = 1;   //月卡id
	optional int32 begin_time = 2;
	optional int32 end_time = 3;
	optional int32 open_days = 4;
	optional int32 first_buy_time = 5; 
}

enum EFirstPayState
{
	EN_FIRST_PAY_NONE = 0;           //没有首充
	EN_FIRST_PAY_NOT_GET_AWARD = 1;  //首充未领取奖励
	EN_FIRST_PAY_GET_AWARD = 2;      //首充已领取奖励
}

message PayAwardData
{
	optional int32 total_pay = 1;     //累计付费金额
	repeated int32 reward_id = 2 [(yd_fieldoptions.field_arysize) = 30];  //已经被领的
}

message WeekConsumeData
{
	optional int32 total_cosume = 1;  //累计消耗金额
	repeated int32 reward_id = 2 [(yd_fieldoptions.field_arysize) = 10];  //已经领取奖励id
	optional int32 lottery_use_num = 3;  //已经抽奖次数
	optional int32 lottery_num = 4;      //可以抽奖次数
	optional int32 last_time = 5;        //前端无关
	repeated int32 reward_itemid = 6 [(yd_fieldoptions.field_arysize) = 10];  //已经领取奖励id
}

enum EMidasBuyGoodsStatus
{
	EMBS_NONE = 0;                      //初始状态
	EMBS_GETTING_TOKEN = 1;             //获取token中
	EMBS_WAITING_PAY = 2;               //等待支付
	EMBS_DONE = 3;                      //发货完毕,结单
}

message MidasBuyGoodsInfo
{
	optional uint64 billno = 1;     //订单id
	optional int32 goods_id = 2;   //商品id
	optional int32 num = 3;        //商品数量
	optional EMidasBuyGoodsStatus status = 4;     //状态
	optional int32 lastop_time = 5; //订单状态最后变更时间
}

message LuckBagOne
{
	optional int32 goods_id = 1;      //商品id
	optional int32 count = 2;         //购买数量
	optional int32 last_buy_time = 3; //最后购买时间
}

message GrowUpFundsInfo
{
	optional bool is_buy = 1;
	repeated int32 award_id = 2 [(yd_fieldoptions.field_arysize) = 20]; 
}

message MonthCardInfo
{
	optional int32 end_time = 1;         //月卡结束时间
	optional bool is_award = 2;          //今天奖励是否领取
	optional int32 last_award_time = 3;  //领取奖励时间
}

message SupperCard
{
	optional bool is_buy = 1;
	optional int32 last_award_time = 2;  //领取奖励时间
}


message LuckBagInfo
{
	repeated LuckBagOne info = 1 [(yd_fieldoptions.field_arysize) = 20];    //小额礼包信息
	optional GrowUpFundsInfo growup_funds = 2;
	optional MonthCardInfo month_card = 3;  //月卡
	optional SupperCard supper_card = 4;    //终身卡
}

message RolePayData
{
	optional int32 diamond = 1;				//当前米大师钻石数量
	optional int32 pay_diamond_sum = 2;     //累计购买钻石数量
	optional int32 all_diamond_sum = 3;     //累积钻石数量（购买+赠送）
	optional int32 cost_diamond_sum = 4;    //累计花费的钻石数量
	optional int32 present_diamond_sum = 5; //累计赠送的钻石数量    
	repeated TssList tss_list = 8[(yd_fieldoptions.field_arysize) = 3];   //月卡、季卡、年卡
	optional int32 res_diamond = 7;         //特殊情况的钻石    （可用的钻石数量 = 米大师托管钻石 + res_diamond） 
	optional int32 first_pay_state = 9;     //首次奖励
	optional PayAwardData pay_award_data = 10;
	optional WeekConsumeData week_consume_data = 11;
	repeated MidasBuyGoodsInfo buy_goods_info = 12 [(yd_fieldoptions.field_arysize) = 50]; //直购订单信息
	optional LuckBagInfo luck_bag_info = 13;
}

message RoleRetriveData
{
	optional int32 vigor = 1;             //精力，可以找回经验
	repeated Counter award_cnt = 2 [(yd_fieldoptions.field_arysize) = 10];  //活动奖励找回
	optional int32 last_update_time = 3;
}



//角色财产相关的
message RoleFortuneData
{
	optional RoleItemData               item                               = 1; //道具列表
	optional RoleSkinData               skin                               = 2; //皮肤列表
	optional RoleRuneData               rune                               = 3; //符文
	optional RoleAheadCostData          ahead_cost                         = 4; //预付款
	optional RoleShopData               shop_data				           = 5; // 
	optional RoleTradeData              trade_data                         = 6; //交易数据
	optional RoleFashionData            fashion_data                       = 7; //时装数据
	optional RolePayData                pay_data                           = 8; //付费数据，钻石、月卡信息
	optional RoleRetriveData            retrive_data                       = 9; //经验、奖励找回
}


enum enSignState
{
	EN_SIGN_STATE_CANNOT_SIGN = 1;   //不能领取
	EN_SIGN_STATE_CAN_SIGN = 2;      //可以领取
	EN_SIGN_STATE_ALREADY_SIGN = 3;  //已经领取
	EN_SIGN_STATE_CAN_PAY_SIGN = 4;  //可补领
}

//radly
message RoleSignData
{
	repeated enSignState sign_state = 1[(yd_fieldoptions.field_arysize) = 10];   //签到标志位
	optional int32 pay_sign_num = 2;   //可以花钱补领次数
	optional int32 last_sign_time = 3; //最后签到时间
	optional int32 pay_count = 4;      //已经花钱签到的次数
}

//fatest
message RoleSignInMonthlyData
{
    repeated enSignState sign_state = 1[(yd_fieldoptions.field_arysize) = 7];   //累计领取奖励标志位
    optional bool  can_sign = 2;     //今天是否还可以签到
    optional int32 already_pay_sign_times = 3; //今天补领签到的次数
	optional int32 max_pay_sign_times = 4; //今天可以补领签到的次数
	optional int32 already_sign_times = 5;    //已经签到的次数
    optional int32 max_sign_times = 6;       //本月可以签到的次数
}

enum enWantedState
{
    EN_WANTED_STATE_NONE      = 0;
	EN_WANTED_STATE_INJURY    = 1; //重伤
	EN_WANTED_STATE_SURRENDER = 2; //投降
	EN_WANTED_STATE_DESTORY   = 3; //歼灭
	EN_WANTED_STATE_ARREST    = 4; //抓捕
	EN_WANTED_STATE_RUNNING   = 5; //进行中
}

enum enWantedChallengeState
{
    EN_WANTED_CHALLENGE_STATE_NONE    = 0; 
	EN_WANTED_CHALLENGE_STATE_RUNNING = 1; //进行中
	EN_WANTED_CHALLENGE_STATE_SUCCESS = 2; //成功
	EN_WANTED_CHALLENGE_STATE_FAILED  = 3; //失败
}

enum enWantedRewardType
{
    EN_WANTED_REWARD_TYPE_NONE      = 0;
	EN_WANTED_REWARD_TYPE_NORMAL    = 1;
	EN_WANTED_REWARD_TYPE_CHALLENGE = 2;
}

message FinalAttackRoleInfo
{
    optional uint64           role_id = 1;
	optional string           name    = 2 [(yd_fieldoptions.field_bufsize) = 32, (yd_fieldoptions.field_string_len) = 32];
	optional enProfessionType job     = 3;
	optional int32            level   = 4;
}

message WantedOne
{
    optional int32                  id                     = 1;
    optional enWantedState          state                  = 2;
    optional enWantedChallengeState challenge_state        = 3;
    optional FinalAttackRoleInfo    final_attack_role_info = 4;
	optional int32                  count                  = 5;
}

message WantedReward
{
    optional Item               item = 1;
	optional enWantedRewardType type = 2;
}

message RoleWantedData
{
    repeated WantedOne    wanted_list         = 1 [(yd_fieldoptions.field_arysize) = 20];
	repeated WantedReward reward_list         = 2 [(yd_fieldoptions.field_arysize) = 50];
	optional uint64       last_update_time_ms = 3;
	optional int32        new_item_num        = 4;
}

message RoleMultiLevelInfo
{
	required int32 multi_level_id = 1; //连战配置表ID
}

message RoleMultiLevelData
{
	repeated RoleMultiLevelInfo level_info_list = 1 [(yd_fieldoptions.field_arysize) = 1024];
	optional bool               is_cost_item    = 2;
}

message RoleCityEnterData
{
	repeated int32 enter_map_id = 1 [(yd_fieldoptions.field_arysize) = 50];
}

message RoleHLicenseData
{
    optional bytes first_exam_data = 1; // 考试数据
    optional bytes acquired_exam_reward = 2;

    optional int32 lincese_id            = 10; // 0: 无执照，1：新手（此时特训数据有意义）
    optional int32 lincese_score         = 11; // 
    optional bytes acquired_lincese_reward = 12; // 已获取的执照宝箱
    optional uint32 lincese_bouns_acquired_time = 13;

    repeated int32 special_training_data = 21[(yd_fieldoptions.field_arysize)= 10]; // 特训数据
    optional bytes acquired_special_training_reward = 22; //7天
    optional uint32 st_reset_week_time        = 23;
    repeated int32 special_training_random_list = 24[(yd_fieldoptions.field_arysize)= 2]; //
    optional uint32 st_reset_day_time = 25;
}

message ActivityTargetSingleData
{
	optional int32 id								= 1;	// 表格编号
	optional bool is_get_rwd						= 2;	// 是否获得奖励
	repeated int64 param							= 3[(yd_fieldoptions.field_arysize)= 5];	// 参数
}

message ActivityEightData
{
	repeated ActivityTargetSingleData data			= 1[(yd_fieldoptions.field_arysize)= 100];	// 所有数据
	repeated int32 score_rwd						= 2[(yd_fieldoptions.field_arysize)= 10];	// 领取过的积分兑换编号id
	optional int32 cur_score						= 3;	// 当前的积分
}

enum enCEType
{
    EN_CE_TYPE_NONE       = 0; 
	EN_CE_TYPE_LEVEL      = 1;  //等级
	EN_CE_TYPE_SKILL      = 2;  //技能
	EN_CE_TYPE_TALENT     = 3;  //天赋
	EN_CE_TYPE_LIFE_SKILL = 4;  //修炼
	EN_CE_TYPE_EQUIP      = 5;  //装备
	EN_CE_TYPE_GEMSTONE   = 6;  //宝石
	EN_CE_TYPE_PARTNER    = 7;  //伙伴
	EN_CE_TYPE_TREASURE   = 8;  //秘宝
	EN_CE_TYPE_FASHION    = 9;  //时装
	EN_CE_TYPE_MATRIX     = 10; //矩阵
	EN_CE_TYPE_RUNE       = 11; //徽章
	EN_CE_TYPE_TITLE      = 12; //称号
}

message RoleCEData
{
    repeated int64 ce_list         = 1 [(yd_fieldoptions.field_arysize)= 32];
    repeated int32 get_reward_list = 2 [(yd_fieldoptions.field_arysize)= 150];
}

message AutoRecoverOne
{
    optional int32  id                 = 1;
    optional uint64 last_recover_time  = 2;
    optional uint64 first_recover_time = 3;
}

message RoleAutoRecoverData
{
    repeated AutoRecoverOne auto_recover_list = 1 [(yd_fieldoptions.field_arysize) = 16];
}

message RisingPurchaseOne
{
    optional int32 group           = 1;
    optional int32 daily_buy_times = 2;
}

message RoleRisingPurchaseData
{
    repeated RisingPurchaseOne rising_purchase_list = 1 [(yd_fieldoptions.field_arysize) = 16];
    optional int32             last_update_time     = 2;
}

enum enLevelBlessType
{
    EN_LEVEL_BLESS_TYPE_NONE  = 0; //缺省
    EN_LEVEL_BLESS_TYPE_RUSH  = 1; //rush
    EN_LEVEL_BLESS_TYPE_MULTI = 2; //instance
}

message SelectLevelBlessData
{
    optional enLevelBlessType type         = 1 [default=EN_LEVEL_BLESS_TYPE_NONE];
    repeated int32            select_bless = 2 [(yd_fieldoptions.field_arysize) = 8];
    optional bool             is_active    = 3;
}

message RoleLevelBlessData
{
    repeated SelectLevelBlessData bless = 1 [(yd_fieldoptions.field_arysize) = 8]; 
}

enum enGiftType
{
    EN_GIFT_TYPE_NONE        = 0;
    EN_GIFT_TYPE_FASHION     = 1; //时装礼物
	EN_GIFT_TYPE_FASHION_SET = 2; //时装套装
}

enum enGiftAddType
{
    EN_GIFT_ADD_TYPE_NONE = 0;
	EN_GIFT_ADD_TYPE_SEND = 1; //赠送礼物
	EN_GIFT_ADD_TYPE_BEG  = 2; //乞求礼物
}

enum enGiftOpType
{
    EN_GIFT_OP_TYPE_NONE  = 0;
    EN_GIFT_OP_TYPE_DEL   = 1;
    EN_GIFT_OP_TYPE_REPLY = 2;
    EN_GIFT_OP_TYPE_RECV  = 3;
	EN_GIFT_OP_TYPE_READ  = 4;
}

enum enGiftListType
{
    EN_GIFT_LIST_TYPE_ALL  = 0; //所有礼物
	EN_GIFT_LIST_TYPE_RECV = 1; //获得的礼物列表
	EN_GIFT_LIST_TYPE_SEND = 2; //赠送的礼物列表
	EN_GIFT_LIST_TYPE_BEG  = 3; //请求的礼物列表
}

enum enGiftMessageType
{
    EN_GIFT_MESSAGE_TYPE_UPDATE = 0; //更新
    EN_GIFT_MESSAGE_TYPE_DELETE = 1; //删除
}

message OneGift
{
    optional int32      key  = 1;
	optional int32      num  = 2;
	optional enGiftType type = 3 [default = EN_GIFT_TYPE_NONE];
}

message GiftInfo
{
	repeated OneGift gift_list = 1 [(yd_fieldoptions.field_arysize) = 8];
}

message GiftClientRoleInfo
{
    optional uint64           role_id      = 1;                                //玩家id
    optional string           name         = 3;                                //姓名
    optional int32            level        = 4;                                //等级
    optional enProfessionType job          = 5 [default = EN_PROFESSION_NONE]; //职业
}

message GiftSnsRoleInfo
{
    optional uint64           role_id    = 1;
    optional string           name       = 2 [(yd_fieldoptions.field_bufsize) = 32];
    optional int32            level      = 3;
    optional enProfessionType job        = 4 [default = EN_PROFESSION_NONE]; //职业
}

message GiftOne
{
    optional uint64         uid            = 1;
    optional uint64         create_time    = 2;
    optional enGiftAddType  type           = 3;
    optional string         commet         = 4 [(yd_fieldoptions.field_bufsize) = 255];
    optional int32          diamond        = 5;
    optional uint64         target_role_id = 6;
    optional int32          target_level   = 7;
    optional int32          target_job     = 8;
    optional string         target_name    = 9 [(yd_fieldoptions.field_bufsize) = 32];
    optional bool           is_anonymous   = 10;
    optional bool           is_read        = 11;
    optional GiftInfo       gift_info      = 12;
    optional bool           is_recv        = 13;
    optional enGiftListType list_type      = 14 [default = EN_GIFT_LIST_TYPE_ALL];  
}

message RoleGiftData
{
    repeated GiftOne recv_gift           = 1 [(yd_fieldoptions.field_arysize) = 100];
    repeated GiftOne send_gift           = 2 [(yd_fieldoptions.field_arysize) = 20];
    repeated GiftOne beg_gift            = 3 [(yd_fieldoptions.field_arysize) = 20];
    optional int32   today_send_gift_num = 4;
    optional int32   today_beg_gift_num  = 5;
    optional uint64  last_update_time    = 6;
}

message RoleTormentTowerData
{
	optional int32 max_layer = 1;              //爬塔最大层数
	optional int32 max_layer_use_time = 2;     //最大层数使用的最短时间
	optional int32 last_reset_time = 3;        //上次重置的时间
	optional int32 reset_count = 4;            //可以重置的次数
	optional int32 award_bitmap = 5;           //首通奖励领取标志位
	optional int32 sweep_begin_time = 6;       //开始扫荡时间，0表示未在扫荡
	optional int32 cur_layer = 7;              //当前层数
	optional int32 sweep_end_time = 8;         //扫荡结束时间
}

message TormentTowerRecord
{
	optional int32 max_layer = 1;              //爬塔最大层数
	optional int32 max_layer_use_time = 2;     //最大层数使用的最短时间
}

message LRGInfoOne
{
	optional int32 id = 1;
	optional int32 count = 2;
}

message LegendRoadData
{
	repeated LRGInfoOne info = 1 [(yd_fieldoptions.field_arysize) = 20];
	optional int32 last_update_time = 2;
}


//玩法相关数据
message RolePlayData
{
	optional RoleBattleInfo             battle_info                        = 1;  //战斗信息
	optional RoleChapterScoreData       charpter_score                     = 2;  //关卡评分
	optional RoleQuestData              quest_data                         = 3;
	optional RoleSkyarenaData           skyarena_data                      = 4;  //天空竞技场数据
	optional RoleNoviceGuide            novice_guide                       = 6;  //新手引导
	optional RoleMPveData               mpve_hero_hp                       = 7;  //英雄MPve血量
	optional RoleMapData                map_data                           = 8;  //主城相关数据
	optional RoleCDData                 cd_data                            = 9;  //cd数据
	optional RoleEscortData             escort_data			               = 10; //护送数据
	optional RoleLifeSkillData          life_skill_data                    = 11; //生活技能数据
	optional RoleTrapTowerData          traptower_data	                   = 13; //陷阱塔数据
    optional RoleSixExperimentData      six_experiment_data                = 14; //六系试炼数据
	optional RoleWelfareExpData         welfare_data	                   = 15; //福利经验
    optional RoleMilitantMatchData      militant_data                      = 16; //武斗大会数据
	optional RoleTitleData 		        title_data                         = 17; //称号系统
	optional RoleGuildCompetitionData   guild_competition_data             = 18; //工会战数据
	optional RoleMasterQuestData        master_quest_data			   	   = 19; //师徒任务数据
	optional RoleAuctionCompetitionData auction_competition_data           = 20; //拍卖争夺会数据
	optional RoleLicenseData            license_data                       = 21; //十二支执照数据
	optional RoleCreditShopData			credit_shop_data				   = 22; //玩家积分商店数据
	optional RoleActivityData           activity_data                      = 23; //玩家活动数据 (包括幻影旅团活动、)
	optional RoleStateData              state_data                         = 24; //状态数据
	optional RoleCreditData             credit_data                        = 25; //玩家信誉数据
	optional RoleNianPracticeData       nian_practice	                   = 26; //玩家念修行数据 
	optional RoleArenaData              arena_data                         = 28; //擂台数据
	optional RoleBuffData               buff_data                          = 29; //buff信息
	optional RoleSignData               sign_data                          = 30; //签到信息
	optional RoleDungeonData            dungeon_data                       = 31; //副本数据
	optional RoleWantedData             wanted_data                        = 32; //捉拿悬赏数据
	optional RoleMultiLevelData         multi_level_data                   = 33; //连战关卡数据
	optional RoleCityEnterData          city_enter_data                    = 34; //地图开启信息             
    optional RoleHLicenseData           hlicense_data                      = 36; //猎人执照
	optional ActivityEightData          act_eight_data                     = 37; //嘉年华活动
	optional RoleSignInMonthlyData      sign_in_monthly_data               = 38; //每月签到
	optional RoleGiftData               gift_data                          = 39; //礼物数据
	optional RoleCEData                 ce_data                            = 40; //变强(战力)数据
    optional RoleAutoRecoverData        auto_recover_data                  = 41; //自动恢复数据
    optional RoleRisingPurchaseData     rising_purchase_data               = 42; //跳跃购买数据
    optional RoleLevelBlessData         level_bless_data                   = 43; //关卡祝福数据
	optional RoleTormentTowerData       torment_tower_data                 = 44; //试炼塔数据
	optional LegendRoadData             legend_road_info                   = 45; //传奇之路数据 
	optional Pvp1v1Data                 pvp_1v1_data                       = 46; //1v1数据
}


//作弊信息
enum ECheatType
{
	EBATTLE_CHEAT_TYPE_MOVE = 1;     //移动作弊
	EBATTLE_CHEAT_TYPE_NO_HIT = 2;   //该被命中但是却未命中的 (pvp)
	EBATTLE_CHEAT_TYPE_HIT = 3;      //不该命中，但是却命中（pve）
}

message NoHitCheatData
{
	optional int32 no_hit_num = 1;
	optional int32 total_hit_num = 2;
}

enum CheatPunishType
{
	CHEAT_PUNISH_NONE = 0;    
	CHEAT_PUNISH_WANING = 1;       //警告
	CHEAT_PUNISH_KICKOFF = 2;      //踢下线
	CHEAT_PUNISH_BAN_ROLE = 3;     //封号
}

message CheatStatisticsOne
{
	optional ECheatType type = 1;   //作弊类型
	optional int32 count = 2;       //作弊次数
	optional NoHitCheatData no_hit = 3;   //作弊数据
}

message RoleCheatData 
{
	optional uint32 cheat_battle_cnt = 1;       //作弊的战斗场次
	repeated CheatStatisticsOne cheat_info = 2 [(yd_fieldoptions.field_arysize)= 10];
	optional int32 begin_time = 3;              //开始时间
	optional int32 glory_val = 4;               //荣誉值
	optional int32 total_cheat_cnt = 5;         //总共作弊多少次
}

message ChatSilentOne
{
	optional ChatChannel channel = 1;
	optional int32 silent_end_time = 2;
}

enum enTeamVoiceState
{
	E_Team_Voice_State_Off = 0;
	E_Team_Voice_State_On = 1;
}

message RoleChatData
{
	repeated ChatSilentOne silent_data = 1 [(yd_fieldoptions.field_arysize)= 10];   //禁言数据
	optional int32 silent_end_time = 2;   //所以频道禁言结束时间
	optional string voice_room = 3 [(yd_fieldoptions.field_bufsize)= 32];    //语音聊天房间
	optional enTeamVoiceState voice_state = 4[default=E_Team_Voice_State_Off]; 
	optional int32 voice_room_uid = 5;  //语音房间uid
}

//角色杂项数据,统计
message RoleOtherData
{
	optional RoleBattleStatistic        statistic                          = 1; //战斗统计
	optional RoleMiscData               misc_data                          = 2;
	optional RoleSnsData                sns                                = 3; //社交数据
	optional RoleCounterData            counter                            = 4; //角色的一些限制型计数器,比如每日购买限制
	optional bytes                      role_avatar_flags                  = 5; //PotraitData.xls 标记是否拥有
	optional RoleCheatData              cheat_data                         = 6; //作弊统计信息
	optional RoleChatData               chat_data                          = 7; //聊天相关信息 
}

message tbRoleDetail
{
	required uint64                     role_id                            = 1  [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //角色ID
	optional RoleBaseData               role_base_data                     = 2[(yd_fieldoptions.field_bufsize)=655360];  //角色信息
	optional RoleFortuneData			role_fortune_data				   = 3[(yd_fieldoptions.field_bufsize)=655360];  //财产相关
	optional RolePlayData				role_play_data					   = 4[(yd_fieldoptions.field_bufsize)=655360];  //玩法数据
	optional RoleOtherData				role_other_data					   = 5[(yd_fieldoptions.field_bufsize)=655360];  //杂项数据
}

message CityTeamMember
{
	optional uint64 role_id = 1;         //角色id
	optional bool is_leader = 2;         //是否是队长
	optional int32 state = 3;            //状态
}

message CityTeamData
{
	repeated CityTeamMember team_member = 1[(yd_fieldoptions.field_arysize)= 5];  //队员信息
}

message CityRoleGuildCompetitionInfo
{
    optional uint64          battle_uid = 1;
	optional enGuildCampType camp       = 2 [default = EN_GUILD_CAMP_TYPE_NONE]; 
}

message CityRolePhantomTroupeInfo
{
	repeated int32 fin_level_id = 1[(yd_fieldoptions.field_arysize)= 20];
}

message CityRoleFamilyStationInfo
{
    optional uint64 family_caller_id 						= 1;	// 家族邀请列表发起者id
}

message CityRoleDungeonInfo
{
    optional uint64 dungeon_id = 1;
}

message CityBuffOneCS
{
    optional int32 id = 2;         //city buff id
	optional int32 left_time = 3;  //剩余时间
	optional int32 layer = 4;      //层数	
	optional bool is_frozen = 5;   //是否冻结
	optional int32 total_time = 6; //总时间。-1为永久
}

message RoleBuffDataCS
{
	repeated CityBuffOneCS buff = 1 [(yd_fieldoptions.field_arysize)= 20]; 
}

message RoleTransExpData
{
	optional uint64 target_id								= 1;	// 跟你传功的人id
	optional bool is_prepare								= 2;	// 是否是准备状态
}

message CityRoleInfo
{
	required uint64                       role_id           = 1;  //角色ID
	optional RoleBase                     base              = 2;  //角色基本信息
	optional HeroData                     hero              = 3;  //英雄列表
	optional RoleMapData                  map_data          = 26; //主城相关数据
	optional CityRoleQuestData            quest_data        = 4;  //任务数据
	optional CityTeamData                 team_data         = 5;  //队伍信息
	optional uint64                       guild_id          = 6;  //公会id
	optional int32                        title_id          = 7;  //称号id(0为取消显示)
	optional string                       title_name        = 9  [(yd_fieldoptions.field_bufsize) = 64,(yd_fieldoptions.field_string_len) = 64]; //称号名
    optional uint32                       title_item_id     = 22; //称号物品id
	repeated int32                        fashions          = 10 [(yd_fieldoptions.field_arysize) = 7];
    optional CityRoleGuildCompetitionInfo guild_competition = 11; 
	optional bool                         in_battle         = 12; //在战斗中
	optional CityRolePhantomTroupeInfo    troupe_info       = 13; //幻影旅团活动信息
	optional CityRoleFamilyStationInfo	  family_info		= 14;
	optional RoleBuffDataCS               buff_info         = 15; //Buff信息
	optional CityRoleDungeonInfo          dungeon_info      = 16;
	optional bool                         state_leave       = 17;
    optional int32                        title2_id         = 18; //猎人考核称号
	optional RoleTransExpData			  trans_exp_data	= 19; //传功数据
	optional int32                        transfer_id       = 20; //转职id
	optional int32                        follow_partner_id = 21; //跟随伙伴id
	optional bool                         follow_partner_fatigue = 23;  //跟随伙伴是否疲劳
}

message CityNpcGuildBattleInfo
{
    optional enGuildCampType camp    = 1 [default = EN_GUILD_CAMP_TYPE_NONE];
	optional int32           process = 2;
}

message CityNpcInfo
{
    required int32                  obj_id            = 1; //npc global id
	optional CityNpcGuildBattleInfo guild_battle_info = 2; //公会战信息
}

message RoleDisplayInfo	//客户端展示用的简要信息
{
	required uint64 role_id 					= 1; //角色唯一ID
	optional string name 						= 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
	optional uint32 level						= 3; //角色等级
	optional int32	rank							= 4; //RANK
	optional int32 	ce 						= 5; //战斗力
	optional uint32 avatar_id					= 6; //指挥官头像
	optional uint64	last_logout_time		= 7; //=0表示在线， 否则表示上次下线时间 	
}

message PartnerDefendInfo
{
	repeated PartnerOne       defend_partner                = 1 [(yd_fieldoptions.field_arysize) = 3];   //防守伙伴阵容
	optional int32            defend_fail_cnt               = 2; //防守失败扣的分数
	optional int32            last_defend_time              = 3; //
}

enum enMasterShowDetailType
{
	EN_MASTER_SHOW_NONE				= 1;	// 不显示
	EN_MASTER_SHOW_IS_MASTER		= 2;	// 显示拜他为师
	EN_MASTER_SHOW_IS_APPRENTICE	= 3;	// 显示收他为徒
	EN_MASTER_SHOW_ALL				= 4;	// 显示所有
}

message SnsSingleRankForbiddenData
{
	optional enIDIPRankForbiddenType type		= 1;
	optional uint32 forbidden_time				= 2;	// 封禁的结束时间戳（秒）
}

// idip禁止参与排行榜接口
message SnsRankForbiddenData
{
	repeated SnsSingleRankForbiddenData single_rank = 1[(yd_fieldoptions.field_arysize) = 20];
	optional uint32 forbidden_time				= 2;	// 全部排行榜封禁的结束时间戳（秒）
}

//message SnsSingleActForbiddenData
//{
//	optional enIDIPActivityForbiddenType type	= 1;	
//	optional uint32 forbidden_time				= 2;	// 封禁的结束时间戳（秒）
//}

// idip 禁止指定玩法
//message SnsActivityForbiddenData
//{
//	repeated SnsSingleActForbiddenData single_act = 1[(yd_fieldoptions.field_arysize) = 20];
//	optional uint32 forbidden_time				= 2;	// 全部玩法封禁的结束时间戳（秒）
//}

// idip封禁数据
message SnsForbiddenData
{
	optional SnsRankForbiddenData rank_data				= 1;	// 排行榜封禁数据
//	optional SnsActivityForbiddenData act_data			= 2;	// 玩法封禁
}

message Proto_RoleSimpleInfo	//角色基本展示信息，
{
	required uint64           role_id 					    = 1; //角色唯一ID
	optional string           name 						    = 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
	optional int32            level							= 3; //角色等级
	optional int32 	          ce 						    = 5; //战斗力
	optional uint32           avatar_id					    = 6; //指挥官头像
	optional uint64	          last_logout_time		        = 7; //=0表示在线， 否则表示上次下线时间 
	optional uint64           guild_id					    = 8; //公会ID
	optional enGuildMemTitle  guild_title 	                = 9;
	optional string           guild_name					= 10[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //
	optional string           signature 					= 11 [(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64]; //签名
	optional Birthday         birthday				        = 20; // 本人生日
	optional enPlayerZodiac   zodiac			            = 21; // 本人星座
	optional enSexType        sex					        = 22; // 本人性别
	optional string	          location				        = 23[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; // 所在省市
	optional enProfessionType profession	                = 24[default=EN_PROFESSION_NONE]; // 职业
	optional string           be_used_name 			        = 25 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //最近用过的角色名
	optional int32            team_count				    = 26; // 队伍的人数
	optional uint64           team_id					    = 27; // 队伍的id
	optional int32            team_max_count			    = 28; // 队伍的最大 人数
	optional int32            title_id					    = 29; // 称号id
	optional int32            player_id                     = 30; //playerdesc的描述id
	optional uint64           role_tax				        = 31; // 玩家当前贡献(只是一个记录值，依赖gm同步过来)
	optional uint64           battle_corps_id               = 32; //战队id
	optional uint64 		  family_id						= 33; // 家族id	
	repeated int32            fashions          			= 34 [(yd_fieldoptions.field_arysize) = 7];
	optional RoleSecretSetData secret_set					= 35;	// 私密设置
	optional ENHunterProfType hunter_prof					= 36 [default = EN_HUNTER_PROF_NULL];
	optional PartnerDefendInfo  defend_info                 = 37; //伙伴异步pvp防守信息
	optional int32            pa_score                      = 38; //伙伴异步pvp积分
	optional enMasterShowDetailType master_show				= 39[default = EN_MASTER_SHOW_NONE];
	optional uint32 			  create_time				= 40;	// 创角时间
	optional SnsForbiddenData forbidden_data				= 41;
    optional uint32           title_item_id                 = 42; //称号物品id
	optional int32            transfer_id                   = 43; //转职ID
	optional int32 			  division						= 44; //段位
}

message tbSnsRoleSimpleInfo
{
	required uint64 role_id					= 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional Proto_RoleSimpleInfo role_info	= 2;
}

enum enRoleLocation
{
	EN_ROLE_LOCATION_HALL	= 0; 			//大厅
	EN_ROLE_LOCATION_TEAM	= 1;			//组队中
	EN_ROLE_LOCATION_BATTLE	= 2;		//战斗中
}

// 系统推荐好友检查条件
enum enFriendRecommandCheckType
{
	EN_RECOMMAND_CHECK_MAIN_LINE		= 0[(yd_fieldoptions.field_enum_cname) = "剧情帮助"];
	EN_RECOMMAND_CHECK_FINISH_QUEST		= 1[(yd_fieldoptions.field_enum_cname) = "完成任务类型"];
	EN_RECOMMAND_CHECK_FINISH_LEVEL		= 2[(yd_fieldoptions.field_enum_cname) = "完成关卡类型"];
	EN_RECOMMAND_CHECK_FINISH_BATTLE	= 3[(yd_fieldoptions.field_enum_cname) = "完成战斗次数"];
	EN_RECOMMAND_CHECK_SAME_GUILD		= 4[(yd_fieldoptions.field_enum_cname) = "公会ID相同"];
}

enum enFriendRecommandReason
{
	EN_RECOMMAND_HELP_PROCESS		= 0; // 热心的剧情帮手
	EN_RECOMMAND_ALL_PROCESS		= 1; // 联手通过剧情关卡
	EN_RECOMMAND_DIFFICULT_GATE		= 2; // 联手完成高难度关卡
	EN_RECOMMAND_FIGHT_COUNT		= 3; // 联手完成N场战斗
	EN_RECOMMAND_SAME_GUILD			= 4; // 来自同一公会
}

enum enFriendNetRecommandReason
{
	EN_NETRECOMMAND_GUILD_HOT_MEMBER_OSEX		= 0; // 公会人气美女/帅哥
	EN_NETRECOMMAND_GUILD_MEMBER				= 1; // 公会成员
	EN_NETRECOMMAND_ALL_PROFESSION_OSEX			= 2; // 同系人气美女/帅哥
	EN_NETRECOMMAND_ALLPRO_FIGHT_RANK			= 3; // 同系强力人士
	EN_NETRECOMMAND_SAME_LEVEL_OSEX				= 4; // 同级美女/帅哥
	EN_NETRECOMMAND_SAME_LEVEL					= 5; // 等级相当
	EN_NETRECOMMAND_HOT_OSEX					= 6; // 人气美女/帅哥
	EN_NETRECOMMAND_FIGHT_RANK					= 7; // 本服强力人士
	EN_NETRECOMMAND_GUILD_FIGHT_RANK			= 8; // 公会强力人士
	EN_NETRECOMMAND_MAX							= 9; // 最大值
}

message Proto_RoleDetailInfo
{	
	required uint64 role_id 					= 1; //角色唯一ID
	optional int32 map_id 						= 2;	// <= 0 则不在战斗中
	optional enRoleLocation location = 3[default=EN_ROLE_LOCATION_HALL];//角色所在位置
	optional enBattleType battle_type = 4[default=E_Battle_Type_None];
	//.....待添加
	
	optional int32 friend_degree 				= 5; // 好友度
	optional uint64 friend_time					= 6; // 加好友的时间
	optional int32 team_count					= 7; // 队伍的人数
}

message Proto_RoleFullInfo
{
	optional Proto_RoleSimpleInfo simple_info = 1;
	optional Proto_RoleDetailInfo detail_info = 2;

}

message GuildRebatePlayerData
{
	repeated int32 reward_id			= 1[(yd_fieldoptions.field_arysize)=10];
}

// 玩家登陆同步到客户端的ssns公会数据
message SnsLoginGuildData
{
	optional GuildRebatePlayerData rebate_data		= 2;	// 返利数据
}

// 玩家登陆同步给客户端的sns邮件数据
message SnsLoginMailData
{
	optional int32 item_mail_count					= 1; // 带物品邮件未读数
}

enum enFamilyInviteStatus
{
	EN_FAMILY_STATUS_NULL					= 0;
	EN_FAMILY_STATUS_INVITING				= 1;	// 邀请中
	EN_FAMILY_STATUS_REFUSE					= 2;	// 拒绝或者超时
	EN_FAMILY_STATUS_INVITED				= 3;	// 已邀请
}

message FamilyEventRoleInfo
{
	optional uint64 role_id					= 1;
	optional string name    				= 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional int32 level          			= 3;	// 等级
	optional uint32 avatar_id				= 4;	// 头像
	optional int32 friend_degree   			= 5;	// 好友度
	optional enProfessionType profession	= 6[default=EN_PROFESSION_NONE]; // 职业
	optional int32 transfer_id              = 7;    //转职ID
}

message FamilyInviteRoleInfo
{
	optional FamilyEventRoleInfo info		= 1;
	optional enFamilyInviteStatus status	= 2[default=EN_FAMILY_STATUS_NULL];
	optional int32 time						= 3;	// 邀请的时间
}

// 家族邀请仪式阶段
enum enFamilyActiviyProcess
{
	EN_FAMILY_PROCESS_INVITING				= 1;	// 邀请阶段
	EN_FAMILY_PROCESS_CALL					= 2;	// 发起仪式
	EN_FAMILY_PROCESS_WAIT_PAY				= 3;	// 等待支付仪式
	EN_FAMILY_PROCESS_DINNER				= 4;	// 家族晚宴(上第一道菜)
	EN_FAMILY_PROCESS_EAT_ONE				= 5;	// 吃第一道菜
	EN_FAMILY_PROCESS_ONE_FOOD				= 6;	// 撤换第一道菜
	EN_FAMILY_PROCESS_START_TWO				= 7;	// 上第二道菜
	EN_FAMILY_PROCESS_EAT_TWO				= 8;	// 吃第二道菜
	EN_FAMILY_PROCESS_TWO_FOOD				= 9;	// 撤换第二道菜
	EN_FAMILY_PROCESS_START_THREE			= 10;	// 上第三道菜
	EN_FAMILY_PROCESS_EAT_THREE				= 11;	// 吃第三道菜
	EN_FAMILY_PROCESS_THREE_FOOD			= 12;	// 撤换第三道菜
	EN_FAMILY_PROCESS_START_FOUR			= 13;	// 上第四道菜
	EN_FAMILY_PROCESS_EAT_FOUR				= 14;	// 吃第四道菜
	EN_FAMILY_PROCESS_FOUR_FOOD				= 15;	// 撤换第四道菜
	EN_FAMILY_PROCESS_START_FIVE			= 16;	// 上第五道菜
	EN_FAMILY_PROCESS_EAT_FIVE				= 17;	// 吃第五道菜
	EN_FAMILY_PROCESS_FIVE_FOOD				= 18;	// 撤换第五道菜
	EN_FAMILY_PROCESS_START_SIX				= 19;	// 上第六道菜
	EN_FAMILY_PROCESS_EAT_SIX				= 20;	// 吃第六道菜
	EN_FAMILY_PROCESS_SIX_FOOD				= 21;	// 撤换第六道菜
	EN_FAMILY_PROCESS_START_SEVEN			= 22;	// 上第七道菜
	EN_FAMILY_PROCESS_EAT_SEVEN				= 23;	// 吃第七道菜
	EN_FAMILY_PROCESS_SEVEN_FOOD			= 24;	// 撤换第七道菜
	EN_FAMILY_PROCESS_RANK					= 25;	// 谈资论辈
	EN_FAMILY_PROCESS_TITLE					= 26;	// 修改称号
	EN_FAMILY_PROCESS_MEMO					= 27;	// 修改字号
	EN_FAMILY_PROCESS_CDD					= 28;	// 契约
}

message FamilyVoteRoleInfo
{
	optional uint64 role_id					= 1;	// 被投票人id
	repeated uint64 vote_id					= 2[(yd_fieldoptions.field_arysize) = 20];	// 谁投了他
}

message FamilyVoteRankInfo
{
	repeated uint64 rank_role				= 1[(yd_fieldoptions.field_arysize) = 20];	// 已经投票确定的人（根据序号来排辈分）
	repeated FamilyVoteRoleInfo vote_info	= 2[(yd_fieldoptions.field_arysize) = 20];	// 被投票人
	optional uint64 first_id				= 3;	// 第一次投票获得老大的id
	repeated uint64 no_role					= 4[(yd_fieldoptions.field_arysize) = 20];	// 反对上一次老大投票结果的人
	optional bool is_apply					= 5;	// 是否等待大家对上一次老大投票再次确认
}

message FamilyRoleMemoName
{
	optional string memo_name		    	= 1[(yd_fieldoptions.field_bufsize)=16, (yd_fieldoptions.field_string_len)=16]; // 字号
}

message FamilyMemoNameInfo
{
	repeated FamilyRoleMemoName name		= 1[(yd_fieldoptions.field_arysize) = 20];
}

// 第一个属于邀请的人，其他是被邀请的人
message SingleFamilyInviteData
{
	repeated FamilyInviteRoleInfo invite	= 1[(yd_fieldoptions.field_arysize) = 10];	// 发起邀请的人（前端保存在caller）和被邀请的人
	optional int32 time						= 2;	// 发起邀请的时间（邀请列表有超时时间）
	optional FamilyInviteRoleInfo caller	= 3;	// 发起邀请的人(只在同步给客户端的时候填充)
	optional enFamilyActiviyProcess process	= 4[default=EN_FAMILY_PROCESS_INVITING];
	optional int32 process_time				= 5;	// 仪式阶段结束时间(发起仪式，举行仪式等的结束时间)
	optional int32 food_index				= 6;	// 上的第几道菜
	optional FamilyVoteRankInfo vote_info	= 7;	// 长幼排序投票信息
	optional RoleFamilyTitle title		 	= 8;	// 确定的称号
	optional FamilyMemoNameInfo memo_name   = 9;	// 确定的字号
	repeated uint64 pay_role				= 10[(yd_fieldoptions.field_arysize) = 10];	// 谁支付了
	repeated uint64 role_in_map				= 11[(yd_fieldoptions.field_arysize) = 20];	// 在地图里面的人
	optional bool is_cd						= 12;	// 是否阶段超时未处理而进入cd,使用process_time
	optional int32 long_index				= 13;	// 上菜长动画在第几道菜（有一个跌倒动画，随机到某个上菜阶段）
}

// 玩家登陆同步到客户端的ssns数据
message SnsLoginData
{
	optional SnsLoginGuildData guild_data			= 1;
	optional SnsLoginMailData mail_data				= 2;
	optional SingleFamilyInviteData family_data		= 3;
}

message GuildTransportExpData
{
	repeated uint64 trans_role_id					= 1[(yd_fieldoptions.field_arysize)=5];
	repeated uint64 receive_role_id					= 2[(yd_fieldoptions.field_arysize)=5];
}

message GuildMiscData
{
	optional GuildRebatePlayerData rebate_data		= 1;	// 返利相关数据
	optional bool first_get_bonus					= 2;
	optional GuildTransportExpData trans_exp_data	= 3;	// 行会传功
}

enum enAddHotRecordType
{
	EN_ADD_HOT_STEP_ON								= 0;	// 踩一下
	EN_ADD_HOT_GIVE_GIFT							= 1;	// 送礼物
	EN_ADD_HOT_GET_GIFT								= 2;	// 获得礼物了
}

message ZoneAddHotRecord
{
	optional uint64 role_id									= 1;
	optional string name 									= 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional enProfessionType profession					= 3 [default=EN_PROFESSION_NONE];
	optional enAddHotRecordType type						= 4 [default=EN_ADD_HOT_STEP_ON];
	optional int32 transfer_id                              = 5; //转职ID
}

// 空间玩家的信息
message ZoneRoleInfo
{
	optional uint64 role_id									= 1;
	optional string name 									= 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional enProfessionType profession					= 3 [default=EN_PROFESSION_NONE];
	optional int32 transfer_id                              = 4; //转职ID
}
message ZoneRoleDetailInfo
{
	optional uint64 role_id									= 1;
	optional string name 									= 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional int32 level									= 3;	
	optional uint32 avatar_id								= 4; 
	optional enProfessionType profession					= 5 [default=EN_PROFESSION_NONE];
	optional int32 transfer_id                              = 6; //转职ID
}

message MyZoneMessageInfo
{
	optional uint64 message_id						= 1;										// 留言的唯一id
	optional ZoneRoleDetailInfo start_id			= 2;										// 发起留言的人
	optional ZoneRoleInfo target_id					= 3;										// 目标人
	optional string content							= 4[(yd_fieldoptions.field_bufsize)=512, (yd_fieldoptions.field_string_len)=512];	// 留言的内容
	optional uint64 time							= 5; 										// 留言的时间 
	optional bytes item_content						= 6[(yd_fieldoptions.field_bufsize)=512];	// 前端使用的物品链接,ZoneItemContent序列后
}

enum enNoteStatusType
{
	EN_NOTES_STATUS_UP			= 1;	// 点赞
	EN_NOTES_STATUS_REPLY		= 2;	// 回复
	EN_NOTES_STATUS_NOTE		= 3;	// 评论
	EN_MESSAGE_STATUS_NOTE		= 4;	// 留言板留言
	EN_MESSAGE_STATUS_REPLEY	= 5;	// 留言板回复
}

message ZoneStatusUpHistory
{
	optional ZoneRoleInfo role_info							= 1;	// 谁点赞的
	optional uint64 status_id								= 2;	// 状态唯一id
}

message ZoneStatusReplyHistory
{
	optional uint64 role_id									= 1;	// 在谁的空间
	optional ZoneRoleInfo role_info							= 2;	// 谁回复的
	optional uint64 status_id								= 3;	// 状态唯一id
	optional string content									= 4[(yd_fieldoptions.field_bufsize)=512, (yd_fieldoptions.field_string_len)=512];	// 回复的内容 
}

message ZoneStatusNoteHistory
{
	optional ZoneRoleInfo role_info							= 1;	// 谁评论的
	optional uint64 status_id								= 2;	// 状态唯一id
	optional string content									= 3[(yd_fieldoptions.field_bufsize)=512, (yd_fieldoptions.field_string_len)=512];	// 评论的内容 
}

message ZoneMessageNoteHistory
{
	optional ZoneRoleInfo role_info							= 1;	// 谁留言的
	optional string content									= 2[(yd_fieldoptions.field_bufsize)=512, (yd_fieldoptions.field_string_len)=512];	// 评论的内容 
	optional uint64 message_id								= 3;	// 留言唯一id
}

message ZoneMessageReplyHistory
{
	optional uint64 role_id									= 1;	// 在谁的空间
	optional ZoneRoleInfo role_info							= 2;	// 谁回复的
	optional string content									= 3[(yd_fieldoptions.field_bufsize)=512, (yd_fieldoptions.field_string_len)=512];	// 回复的内容 
	optional uint64 message_id								= 4;	// 留言唯一id
}

message MyZoneNotesHistory
{
	optional enNoteStatusType type					= 1;	// 类型
	optional ZoneStatusUpHistory up_info			= 2;	// 点赞信息
	optional ZoneStatusReplyHistory reply_info		= 3;	// 回复
	optional ZoneStatusNoteHistory notes_info		= 4; 	// 评论信息
	optional uint64 time							= 5;	// 秒
	optional ZoneMessageNoteHistory message_note	= 6;	// 留言
	optional ZoneMessageReplyHistory message_reply	= 7;	// 回复留言
}

// 空间信息 
message ZoneMessageBoardInfo
{
	optional int32 gift_count						= 1; // 礼物数量
	optional int64 hot_degree						= 2; // 人气
	optional int64 receive_gift						= 3; // 收到的礼物数量
	repeated uint64 step_role						= 4[(yd_fieldoptions.field_arysize) = 100]; // 哪些玩家踩了我
	repeated uint64 gift_record						= 5[(yd_fieldoptions.field_arysize) = 100];
	repeated uint64 no_read_record					= 6[(yd_fieldoptions.field_arysize) = 50];
	repeated uint64 hot_record						= 7[(yd_fieldoptions.field_arysize) = 20];
	optional int32 cur_skin							= 8; // 当前使用的皮肤
	repeated int32 cur_emblem						= 9[(yd_fieldoptions.field_arysize) = 3]; // 当前使用的徽章
	optional int32 cur_effect						= 10; // 当前使用的挂件
	optional int32 all_status_count					= 11; // 所有状态的个数
	repeated int32 all_emblem						= 12[(yd_fieldoptions.field_arysize) = 100];
}

enum enZoneRecordType
{
	EN_RECORD_HOT		= 1;	// 人气记录
	EN_RECORD_GIFT		= 2;	// 礼物记录
	EN_RECORD_NO_READ	= 3;	// 未读记录
}

message SingleZoneRecordInfo
{
	optional ZoneAddHotRecord hot_record		= 1;
	optional MyZoneMessageInfo message_info		= 2;
	optional MyZoneNotesHistory	notes_history	= 3;
}

message tbZoneMessageRecordInfo
{
	optional uint64 uuid				= 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];	
	optional uint64 role_id				= 2[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];	
	optional int32 type					= 3;	
	optional SingleZoneRecordInfo info	= 4;
}

message tbZoneStatusIDRecord
{
	optional uint64 uuid				= 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];	
	optional uint64 role_id				= 2[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional uint64 time				= 3;
}

message SnsRoleMiscData
{
	optional GuildMiscData guild				   = 1;
	optional uint64 next_time					   = 2; // 下次刷新的时间(每日刷新的)
	optional ZoneMessageBoardInfo zone_info		   = 3;
	optional uint64 week_next_time				   = 4; // 下次刷新的时间(每周刷新的)
}

message FriendInfo
{
	optional uint64 role_id				= 1;
	optional uint64 friend_time			= 2;
	optional int32 friend_degree		= 3;	// 好友度
}

// 我在谁的好友或者黑名单中
message IMOtherList
{
	optional uint64 role_id				= 1;
	optional bool is_friend				= 2;	// false 为黑名单  true为好友
}

// 好友模块的杂项信息
message FriendOtherInfo
{
	optional uint64 start_block_time	= 1;	// 开始屏蔽推荐好友的时间
}

// 当天的好友度
message FriendDayDegree
{
	optional uint64 role_id				= 1;
	optional int32 friend_degree		= 2;	// 好友度
}

message MyFriendInfo
{
	repeated FriendInfo myfriend		= 1[(yd_fieldoptions.field_arysize) = 110]; // 好友
	repeated FriendInfo black			= 2[(yd_fieldoptions.field_arysize) = 110]; // 黑名单
	repeated IMOtherList other			= 3[(yd_fieldoptions.field_arysize) = 1000];
	optional FriendOtherInfo info		= 4;
	repeated FriendDayDegree day_degree	= 5[(yd_fieldoptions.field_arysize) = 110];
	optional uint64 next_refresh_time	= 6;	// 下一次刷新的时间
}

enum enSnsMailStatus
{
	EN_SNS_MAIL_NO_READ					= 1;	// 未读
	EN_SNS_MAIL_ALREADY_READ			= 2;	// 已读
}
enum enMailType
{
	EN_MAIL_ROLE						= 1;    //单人邮件
	EN_MAIL_GLOBAL						= 2;	//群发邮件
}
message SingleMailInfo
{
	optional uint64 id					= 1;	// 唯一id
	optional enSnsMailStatus status		= 3;	// 邮件状态 
//	optional enMailType type			= 4[default=EN_MAIL_ROLE];    // 邮件类型
}

// 特殊活动邮件领取记录（mailtemplate用表配置）
message RoleSpecialMailData
{
	optional int32 static_id		= 1;	// mailtemplate表里面的编号（策划保证说不重复）
	optional uint64 time			= 2;	// 领取记录结束时间
}

message RoleGlobalMailData
{
	optional uint64 id				= 1;
	optional uint64 time			= 2;
}

// 邮件信息
// 策划规定20 +３０，最多５０的邮件
message MyMailInfo
{
	repeated SingleMailInfo simple_mail					= 1[(yd_fieldoptions.field_arysize) = 30];	// 普通邮件(无物品的)
	repeated SingleMailInfo item_mail					= 2[(yd_fieldoptions.field_arysize) = 20];	// 含有物品邮件(只有获取了物品才能算已读)
	repeated uint64 read_global_mail					= 3[(yd_fieldoptions.field_arysize) = 100];
	repeated uint64 del_global_mail						= 4[(yd_fieldoptions.field_arysize) = 100];
	repeated RoleSpecialMailData receive_data 			= 5[(yd_fieldoptions.field_arysize) = 20];	// 特殊活动邮件领取记录
	optional uint64 del_time							= 6;	// 上一次删除邮件的时间
	optional bool is_del								= 7[default=false];	// 是否需要到数据库清理邮件
	repeated RoleGlobalMailData achieve_global_mail		= 8[(yd_fieldoptions.field_arysize) = 100];
}

message tbMailBaseInfo
{
	required uint64 role_id 			= 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional MyMailInfo base_info		= 2;
}

message SnsGroupBase
{
	required uint64 group_id = 1;       //群id
	optional string group_name = 2 [(yd_fieldoptions.field_bufsize)=32];  //群名称
	optional int32 member_num = 4;      //群成员数量
	repeated int32 icon = 5 [(yd_fieldoptions.field_arysize) = 3];        //群图标
	optional bool remind = 6;           //是否设置了消息提醒 
	optional int32 last_get_seq = 7;    //最后获取的群消息序列号
	optional int32 last_hint_seq = 8;    //最后提示的群消息序列号
	optional string announce = 9 [(yd_fieldoptions.field_bufsize) = 80];
}


message SnsGroupList
{
	repeated SnsGroupBase own_group = 1[(yd_fieldoptions.field_arysize) = 11];  //创建的群组
	repeated SnsGroupBase join_group = 2[(yd_fieldoptions.field_arysize) = 51]; //加入的群组
}

enum enApprenticeJudgeType
{
	EN_JUDGE_NO_HELP			= 1;	// 没有帮助
	EN_JUDGE_JUST_SO_SO			= 2;	// 一般帮助
	EN_JUDGE_ALL_MY_BEST		= 3;	// 尽全力
}

// 单个任务/成果
message SingleTaskInfo
{
	optional int32 id							= 1;	// 教学任务/成果id
	optional int32 count						= 2;	// 完成的次数
	optional bool is_get						= 3;	// 是否领奖
}
// 教学成果
message SnsStudyAchievement
{
	optional SingleTaskInfo info				= 1;
}
// 师傅领取过的教学成果
message SnsMasterGetAchievement
{
	optional int32 id							= 1;	// 教学任务/成果id
	repeated uint64 role_id						= 2[(yd_fieldoptions.field_arysize) = 10];	// 领取过的徒弟id
}
// 教学成绩
message SnsTeachResult
{
	optional int32 judge_teach_score			= 1;	// 评价的教学成绩
	optional int32 result_teach_score			= 2;	// 成果教学成绩
	optional int32 task_teach_score				= 3;	// 教学任务教学成绩
}
// 关于师傅的信息
message SnsMyMasterPlayerInfo
{
	optional uint64 master_id						= 1[default=0]; 							// 师傅id
	optional string master_name 					= 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional enProfessionType profession 			= 3[default=EN_PROFESSION_NONE];			// 师傅职业
	optional bool isFinish							= 4[default=false]; 						// 是否出师
	repeated SingleTaskInfo task_info				= 5[(yd_fieldoptions.field_arysize) = 10];	// 教学任务
	optional bool is_set_task						= 6[default=false];							// 是否布置了任务
	optional bool is_up_task						= 7[default=false];							// 是否提交了任务
	optional bool is_get_final						= 9[default=false];							// 是否获取了教学任务最终奖励
	optional uint64 time							= 10;										// 拜师的时间
	optional int32 level							= 11;										// 师傅等级
	optional bool is_init_data						= 12;										// 是否初始化了教学任务
	optional bool is_refresh						= 13;										// 是否刷新过，用来玩家上线获取奖励的
	optional int32 transfer_id                      = 14;                                       // 转职ID
}
// 出师弟子信息
message SnsFinishApprenticePlayerInfo
{
	optional uint64 role_id							= 1; // 徒弟id
}
//  未出师弟子信息
message SnsMyApprenticePlayerInfo
{
	optional uint64 role_id							= 1;
	optional string name 							= 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional enProfessionType profession 			= 3[default=EN_PROFESSION_NONE];	// 弟子职业
	optional SnsTeachResult res						= 4;
	optional bool is_get_final						= 5[default=false];	// 是否获取了教学任务最终奖励
	optional uint64 time							= 6;	// 收徒时间
	optional int32 level							= 7;	// 弟子等级
	optional int32 master_score						= 8;	// 师傅的储备授业点
	optional bool is_up_task						= 9;	// 是否提交了任务
	optional bool is_refresh						= 10;	// 是否刷新过，用来玩家上线获取奖励的
	optional int32 transfer_id                      = 11;   // 转职ID
}

message SingleMasterApplyPlayerInfo
{
	optional uint64 role_id						= 1;
	optional string name 					    = 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional enProfessionType type				= 3[default=EN_PROFESSION_A];
	optional int32 lv							= 4;
//	optional uint64 guild_id					= 6;	// 行会id
	optional bool is_master						= 7;	// 是否是申请成为师傅，false为申请成为徒弟
	optional int32 transfer_id                  = 8;    // 转职ID
}

message AllMasterApplyPlayerInfo
{
	repeated SingleMasterApplyPlayerInfo apply_info	= 1[(yd_fieldoptions.field_arysize) = 50];	// 申请玩家信息
	optional bool is_dirty							= 2;
}

// 为了减少数据量，教学任务和成果都保存一份在徒弟身上
// 因此一些跟教学任务和成果有关数据也在徒弟身上
message SnsMasterInfo
{
	optional SnsMyMasterPlayerInfo master_info		= 1;											// 师傅的信息
	repeated SnsFinishApprenticePlayerInfo finish   = 2[(yd_fieldoptions.field_arysize) = 100];		// 出师的弟子
	repeated SnsMyApprenticePlayerInfo apprentice   = 3[(yd_fieldoptions.field_arysize) = 3];		// 未出师的弟子
	optional uint64 leave_time						= 4;											// 师傅上一次解除关系的时间
	optional int32 count							= 5;											// 每日收徒数
	optional uint64 time							= 6;											// 下一次日刷新时间
	optional MasterFindStatusInfo master_status		= 8;	// 收徒状态以及公告
	optional int32 apply_app_count					= 9;	// 当天收徒申请的次数
	optional int32 apply_master_count				= 10;	// 当天拜师申请的次数
	optional AllMasterApplyPlayerInfo all_apply		= 11[(yd_fieldoptions.field_arysize) = 50];	// 申请玩家信息
	repeated SnsMasterGetAchievement master_achi	= 12[(yd_fieldoptions.field_arysize) = 30];	// 师傅领取过的成果
	repeated SnsStudyAchievement achieve_info		= 13[(yd_fieldoptions.field_arysize) = 30];	// 做徒弟时的教学成果
	optional uint64 leave_master_time				= 14;	// 弟子上一次解除关系的时间
}

message tbSnsRoleDetail
{
	required uint64 role_id                        = 1  [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; // 角色ID
	optional SnsRoleMiscData misc_data             = 2;															 // 杂项数据
	optional MyFriendInfo friendinfo			   = 3;															 // 好友信息
	optional SnsGroupList group_list               = 4;                                                          // 群组信息
	optional SnsMasterInfo master_info			   = 5;															 // 师徒信息
}


enum enZoneDesignType
{
	EN_ZONE_DESIGN_SKIN			= 1;	// 皮肤
	EN_ZONE_DESIGN_EMBLEM		= 2;	// 徽章
	EN_ZONE_DESIGN_EFFECT		= 3;	// 挂件
}

// 空间评论信息
message MyZoneNotesInfo
{
	optional ZoneRoleInfo start_id							= 1;										// 发起评论的人
	optional ZoneRoleInfo target_id							= 2;										// 目标人
	optional string content									= 3[(yd_fieldoptions.field_bufsize)=512, (yd_fieldoptions.field_string_len)=512];	// 评论的内容
	optional uint32 id										= 4; 										// 评论的id
	optional uint64 time									= 5; 										// 评论的时间 
} 

// 缩略图(8k 一张)
message SingleZoneStatusSmallPhoto
{
	optional bytes content						= 1[(yd_fieldoptions.field_bufsize)=8192]; 	// 缩略图片
}
// 一条状态的所有缩略图
message ZoneStatusSmallPhoto
{
	repeated SingleZoneStatusSmallPhoto photo	= 1[(yd_fieldoptions.field_arysize)=4];
}

// 原图(256k 一张)
message SingleZoneStatusPhoto
{
	optional bytes content						= 1[(yd_fieldoptions.field_bufsize)=262144];
}
// 一条状态的所有原图
message ZoneStatusPhoto
{
	repeated SingleZoneStatusPhoto content	    = 1[(yd_fieldoptions.field_arysize)=4];
}

message MyZoneStatusPhoto
{
	repeated uint64 photo_id								= 1[(yd_fieldoptions.field_arysize)=4]; 	// 图片
	optional uint64 small_photo								= 2;	// 缩略图序列化成一个字段保存
}

message MyZoneStatusInfo
{
	optional uint64	uuid									= 1;										// 状态的唯一id
	optional string content									= 2[(yd_fieldoptions.field_bufsize)=512, (yd_fieldoptions.field_string_len)=512];	// 状态的内容
	optional uint64	time									= 3;										// 发出的时间
	optional int32 up_times									= 4;										// 点赞的数
	repeated ZoneRoleInfo up_role							= 5[(yd_fieldoptions.field_arysize)=100];	// 点赞的玩家
	optional int32 note_times								= 6;										// 评论数
	repeated MyZoneNotesInfo note_info						= 7[(yd_fieldoptions.field_arysize) = 3];	// 评论
	optional int32 note_index								= 8;										// 递增序号
	optional MyZoneStatusPhoto photos						= 9;
	optional bytes item_content								= 10[(yd_fieldoptions.field_bufsize)=512];	// 前端使用的物品链接,ZoneItemContent序列后
}

message tbZoneStatusPhotos
{
	required uint64 id                        		= 1 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];	// 图片唯一id
	required uint64 status_id					   	= 2 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];	// 所属的状态id
	optional bool is_small							= 3;	// 是否是小图(true为缩略图,false为原图)
	optional uint64 role_id							= 4;
	optional bytes content							= 5[(yd_fieldoptions.field_bufsize)=204800];
}

message tbZoneRoleStatus
{
	required uint64 role_id                        	= 1 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];	// 角色ID
	required uint64 status_id					   	= 2 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];	// 玩家发布的状态ID
	optional MyZoneStatusInfo info				   	= 3;															// 发布的状态信息
}

message tbZoneNotesInfo
{
	required uint64 status_id					   	= 1 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];	// 玩家发布的状态ID
	required uint32 note_id					   		= 2 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];	// 评论的id
	optional MyZoneNotesInfo info                  	= 3;															// 评论信息
}

message tbZoneMessageBoard
{
	required uint64 role_id                        	= 1 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];	// 角色ID
	required uint64 message_id					   	= 2 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];	// 评论的id
	optional MyZoneMessageInfo info					= 3;
}

enum enRoleDataOPType			//离线操作类型
{
	EN_ROLE_OP_NONE 					= 0; 
	EN_ROLE_OP_ITEM 					= 1;		//物品
	EN_ROLE_OP_ATTR					= 2;     //属性
	EN_ROLE_OP_CONTRIBUTION_HALF 	= 3;		//特殊操作，当前贡献减半
}

message RoleDataOP
{
	required enRoleDataOPType 	type 	= 1;
	optional int32 id 					= 2;
	optional int32 value 				= 3;
	optional int32 reason 				= 4;
	optional uint64 op_time 			= 5;	//操作时间
}

//如果500不够用（基本不可能），则合并相同type和id的操作(特殊操作除外)
message OfflineOPData
{
	repeated RoleDataOP op = 2[(yd_fieldoptions.field_arysize) = 500];
};

message tbRoleOfflineOP
{
	required uint64 role_id = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional OfflineOPData op_data = 2;
};

message Proto_PrivateMsgHead		//私人聊天信息
{
	required uint64 send_role_id = 1;
	optional int32 msg_num = 2;
	optional Proto_RoleSimpleInfo role_info = 3;
	optional uint64 recently_time = 4;
}

enum enShopType
{
	EN_SHOP_TYPE_CHAMBER  = 0 [(yd_fieldoptions.field_enum_cname) = "商会"];
	EN_SHOP_TYPE_MARKET   = 1 [(yd_fieldoptions.field_enum_cname) = "市场"];
	EN_SHOP_TYPE_TREASURE = 2 [(yd_fieldoptions.field_enum_cname) = "珍宝阁"];	
	EN_SHOP_TYPE_PLEDGE   = 3 [(yd_fieldoptions.field_enum_cname) = "誓约之境"];	
}

enum enChamberLabel
{
	EN_CHAMBER_LABEL_NONE			= 0; //
	EN_CHAMBER_LABEL_EQUIP 			= 1[(yd_fieldoptions.field_enum_cname) = "装备材料"];
	EN_CHAMBER_LABEL_RUNE 			= 2[(yd_fieldoptions.field_enum_cname) = "符文材料"];
	EN_CHAMBER_LABEL_GEMSTONE 		= 3[(yd_fieldoptions.field_enum_cname) = "宝石"];
	EN_CHAMBER_LABEL_OTHER 			= 4[(yd_fieldoptions.field_enum_cname) = "其他"];
	EN_CHAMBER_LABEL_MAX			= 8;
}

enum enMarketLabel
{
	EN_MARKET_LABEL_NONE			= 0; //
	EN_MARKET_LABEL_EQUIP 			= 1[(yd_fieldoptions.field_enum_cname) = "装备材料"];
	EN_MARKET_LABEL_CURIO 			= 2[(yd_fieldoptions.field_enum_cname) = "古董"];
	EN_MARKET_LABEL_MAX				= 8;
}

enum enTreasureLabel
{
	EN_TREASURE_LABEL_NONE				= 0; //
	EN_TREASURE_LABEL_FIFTY 			= 1[(yd_fieldoptions.field_enum_cname) = "60级装备"];
	EN_TREASURE_LABEL_SIXTY 			= 2[(yd_fieldoptions.field_enum_cname) = "50级装备"];
	EN_TREASURE_LABEL_FOURTY 			= 3[(yd_fieldoptions.field_enum_cname) = "40级装备"];
	EN_TREASURE_LABEL_THIRTY 			= 4[(yd_fieldoptions.field_enum_cname) = "30级装备"];
	EN_TREASURE_LABEL_MAX				= 8;
}


enum enMarketGoodsState
{
	EN_MGS_NOTICE = 1;    //公示
	EN_MGS_SELL = 2;      //在售
	EN_MGS_EXPIRED = 3;   //过期
}


message MarketGoodsData
{
	optional int32           item_id          = 1; //物品id
	optional Item            item             = 2; //物品信息
    optional Equip           equip            = 3; //装备	
	optional TreasureMap     treasure_map     = 4; //藏宝图
	optional Rune            rune             = 5; //念纹
	optional PartnerTreasure partner_treasure = 6; //伙伴秘宝
}


message MarketGoodsBase
{
	optional uint64             seller      = 1; //出售者
	optional string             seller_name = 2 [(yd_fieldoptions.field_bufsize)=32]; //出售者
	optional enMarketGoodsState state       = 3; //商品状态
	optional int32              start_time  = 4; //起始时间
	optional int32              end_time    = 5; //结束时间
	optional int32              price       = 6; //价格
}

message tbMarketGoods		//市场上架的商品
{
	required uint64 uid = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; 
	required MarketGoodsBase base_data = 2;  //基础信息
	optional MarketGoodsData goods_data = 3;  //商品信息
	optional bool pre_sell = 4;         //预上架
	optional int32 focus_num = 5;       //关注人数
	optional bool is_focus = 6;         //是否关注
	optional bool pre_del = 7;          //预删除
	optional uint64 seller = 8 [(yd_fieldoptions.field_type) = E_FIELDTYPE_INDEX];         //出售者
}



// 临时排行榜类型
enum enTemporaryRankType
{
    EN_TEMP_RANK_TYPE_NONE                  = 0; 
    EN_TEMP_RANK_TYPE_SIX_EXPERIMENT        = 1; //六系试炼
	EN_TEMP_RANK_TYPE_TRAPTOWER		        = 2; //陷阱塔
	EN_TEMP_RANK_TYPE_SEA_DISCOVERY	        = 3; //遗迹淘金
    EN_TEMP_RANK_TYPE_MILITANT_MATCH_BRONZE = 4; //武斗大会青铜俎
    EN_TEMP_RANK_TYPE_MILITANT_MATCH_SILVER = 5; //白银组
    EN_TEMP_RANK_TYPE_MILITANT_MATCH_GOLD   = 6; //黄金组
    EN_TEMP_RANK_TYPE_MAX                   = 7; //
}

message MilitantRankInfo
{
    required int32 win_count   = 1; //胜利计数
    required int32 fight_count = 2; //战斗计数
	optional string guild_name = 3 [(yd_fieldoptions.field_bufsize) = 64]; //工会名
}

//特殊系统需要的额外数据新加一个optional结构
message TemporaryRankInfo
{
    required int32            team_id       = 1; //队伍id
    optional int32            score         = 2; //分数
    optional string           name          = 3 [(yd_fieldoptions.field_bufsize) = 64]; //描述
    optional uint64           role_id       = 4; //玩家id(队伍作为主key时 存队长role id)

    optional MilitantRankInfo militant_info = 5; //武斗大会额外信息
}

// 临时排行榜
message TemporaryRank
{
    required int32                 id                       = 1; //排行榜ID
    required enTemporaryRankType   type                     = 2; //排行榜类型
    repeated TemporaryRankInfo     rank_info                = 3 [(yd_fieldoptions.field_arysize) = 20000]; //排行榜数据
    repeated TemporaryRankInfo     bak_rank_info            = 4 [(yd_fieldoptions.field_arysize) = 20000]; //备份用(比如记录上一次)
	optional uint64                version                  = 5;
	optional uint64                bak_version              = 6;
}

// 临时排行榜列表
message tbTemporaryRankList
{
    repeated TemporaryRank         rank_list                = 1 [(yd_fieldoptions.field_arysize)=8];
	optional uint64                update_count             = 2;
}

// 六系试炼全局数据
message tbSixExperimentData
{
    required bool   is_running      = 1; //是否进行中
    required uint64 start_time      = 2; //开始时间
    required uint64 end_time        = 3; //结束时间
	optional bool   first_max_score = 4; //是否有人到达最大分 
}

// 武斗大会全局数据
message tbMilitantMatchData
{
    required bool                     is_running             = 1; //是否进行中, 包括进入和开始阶段
    required bool                     is_start               = 2; //开始匹配战斗
    required uint64                   start_time             = 3; //开始时间
    required uint64                   end_time               = 4; //结束时间
    required uint64                   enter_time             = 5; //进入时间
	required uint64                   last_start_time        = 6; //最后次开始时间
	required uint64                   last_end_time          = 7; //最后次结束时间
	required uint64                   last_enter_time        = 8; //最后次进入时间
	required int32                    militant_id            = 9; //id
}

enum enGuildCompetitionState
{
    EN_GUILD_COMPETITION_STATE_NONE     = 0; //初始状态(没有生成信息)
	EN_GUILD_COMPETITION_STATE_REGISTER = 1; //报名状态(报名)
	EN_GUILD_COMPETITION_STATE_WAIT     = 2; //等待状态(等待报名的异步全部完成)
	EN_GUILD_COMEPTITION_STATE_PREPARE  = 3; //准备状态(剔除不存在工会的异步)
    EN_GUILD_COMPETITION_STATE_START    = 4; //开始状态
    EN_GUILD_COMPETITION_STATE_END      = 5; //结束状态(正常结束)
	EN_GUILD_COMPETITION_STATE_FINISH   = 6; //完成状态(最后状态, 不是正常结束情况直接到这一状态)
}

enum enGuildBattleState
{
    EN_GUILD_BATTLE_STATE_NONE    = 0; //初始状态
	EN_GUILD_BATTLE_STATE_CREATE  = 1; //创建状态
	EN_GUILD_BATTLE_STATE_ENTER   = 2; //进入状态
	EN_GUILD_BATTLE_STATE_PREPARE = 3; //准备状态
	EN_GUILD_BATTLE_STATE_RUNNING = 4; //进行状态
	EN_GUILD_BATTLE_STATE_END     = 5; //结束状态
}

enum enGuildVersusResult
{
    EN_GUILD_VERSUS_RESULT_NO_DEAL = 0; //没有处理
	EN_GUILD_VERSUS_RESULT_DRAW    = 1; //平局
	EN_GUILD_VERSUS_RESULT_WIN_ONE = 2; //胜1
	EN_GUILD_VERSUS_RESULT_WIN_TWO = 3; //胜2
}

message GuildCompetitionBaseInfo
{
    required enGuildCompetitionState   state              = 1; //状态
    required uint64                    week               = 2; //周时间戳
    required int32                     day                = 3; //周几(1-7)
    required uint64                    end_time           = 4; //结束时间(真正的结束时)
    required uint64                    lastest_end_time   = 5; //结束时间(强制结束时间)
	required int32                     competition_serial = 6; //序号 
	required int32                     round              = 7; //当前轮次
	required int32                     competition_idx    = 8; //索引(在tbGuildCompetitionData中competition_info的索引)
}

message RegisterGuildInfo
{
    required uint64 uid         = 1; //工会uid
	required int32  serial      = 2; //工会serial
	required string name        = 3 [(yd_fieldoptions.field_bufsize) = 64]; //工会名字(防止工会解散用)
	optional int32  versus_id   = 4; //当前vs表ID
	optional int32  guild_idx   = 5; //所在guild表索引
	optional int32  guild_level = 6;
}

message VersusInfo
{
    required int32                versus_id     = 1;
    required enGuildVersusResult  result        = 2; 
	required int32                guild_one_idx = 3; 
	required int32                guild_two_idx = 4; 
	optional int32                battle_id     = 5;   
}

// 对战表
message GuildCompetitionRoundInfo
{
    required int32 round_id         = 1;
    repeated int32 versus_info_list = 2 [(yd_fieldoptions.field_arysize) = 512];
	required int32 finish_count     = 3;
}

//冠军信息缓存
message ChampionGuildInfo
{
    repeated uint64 reward_role = 1 [(yd_fieldoptions.field_arysize) = 512]; //冠军奖励人
	required uint64 guild_id    = 2;
}

// 一次行会战数据
message GuildCompetitionInfo
{
    required GuildCompetitionBaseInfo  base_info         = 1;
	repeated GuildCompetitionRoundInfo round_info        = 2 [(yd_fieldoptions.field_arysize) = 10];   //轮次信息(目前估计1024个行会, 最多10轮)
    repeated VersusInfo                versus_info       = 3 [(yd_fieldoptions.field_arysize) = 1023]; //最多(1023场对战)
	repeated RegisterGuildInfo         guild_info        = 4 [(yd_fieldoptions.field_arysize) = 1024]; //1024个工会
	required ChampionGuildInfo         champion_info     = 5;
}

//排行数据
message GuildCompetitionRankInfo
{
    required uint64 uid         = 1;
	required string name        = 2 [(yd_fieldoptions.field_bufsize) = 64]; //工会名字(防止工会解散用)
	required int32  win_count   = 3;
	required int32  fight_count = 4;
	required int32  guild_level = 5;
	required int32  rank        = 6;
}

message GuildCompetitionIDInfo
{
    required uint64 uid  = 1;
	required int32  rank = 2;
}

message GuildCompetitionRank
{
    required uint64                   start_week_time = 1;
	repeated GuildCompetitionRankInfo rank_info       = 2 [(yd_fieldoptions.field_arysize) = 1024]; //排行榜
	repeated GuildCompetitionIDInfo   guild_id_info   = 3 [(yd_fieldoptions.field_arysize) = 1024];
}

// 行会战全局数据
message tbGuildCompetitionData 
{
    required int32                competition_start_pos = 1; //行会战开始索引
	required int32                competition_end_pos   = 2; //行会战结束索引
    repeated GuildCompetitionInfo competition_info      = 3 [(yd_fieldoptions.field_arysize) = 8]; //行会战数据
    required int32                competition_serial    = 4; //行会战序号
	required GuildCompetitionRank competition_rank      = 5;
}

//  一定要保证顺序，而且不能相同数值的类型
// 记得修改相应的最大值
enum enGameGlobalDataType
{
	EN_GLOBAL_DATA_TYPE_ACTIVITY_DATA     = 0; // 活动状态数据
	EN_GLOBAL_DATA_TYPE_RANK              = 1; // game独有rank数据
    EN_GLOBAL_DATA_TYPE_SIX_EXPERIMENT    = 2; // 六系试炼数据
    EN_GLOBAL_DATA_TYPE_MILITANT_MATCH    = 3; // 武斗大会数据
	EN_GLOBAL_DATA_TYPE_GUILD_COMPETITION = 4; // 行会战数据
	EN_GLOBAL_DATA_TYPE_SVR_MISC_DATA	  = 5; // 服务器杂项数据
	EN_GLOBAL_DATA_TYPE_GUILD_QUESTION	  = 6; // 行会答题

	EN_GLOBAL_DATA_TYPE_MAX               = 7; 
}

message SingleActivityStatus
{
	optional bool is_running			= 1;	// 是否运行
	optional uint64 start_time			= 2;	// 开始的时间
	optional uint64 end_time			= 3;	// 结束的时间
	optional int32 act_id				= 4;	// 活动id
}

message GlobalQuestionData
{
    optional int32      question_id = 1;
    repeated uint32     activity_time = 2[(yd_fieldoptions.field_arysize)=5];
    repeated uint64     answer_roles = 3[(yd_fieldoptions.field_arysize)=3];
}

// 活动状态数
message tbGlobalActivityData
{
	repeated SingleActivityStatus data	= 1[(yd_fieldoptions.field_arysize)=1000];
    optional GlobalQuestionData   question_data = 2;
}

message GuildQuestionPlayerData
{
	optional uint64 role_id		= 1;
	optional int32 score		= 2;
    optional string name        = 3 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional bool is_online		= 4;
	optional int32 transfer_id  = 5; //转职ID
}

enum ENGuildQuestionProcessType
{
	EN_GUILD_QUESTION_NULL			= 0;	// 结束阶段
	EN_GUILD_QUESTION_PREPARE		= 1;	// 准备阶段
	EN_GUILD_QUESTION_ANSWER		= 2;	// 回答阶段
	EN_GUILD_QUESTION_WAIT			= 3;	// 等待阶段
}

enum GuildSpecialQuestionType
{
	EN_GUILD_SPECIAL_TYPE_MAX_LV	= 1; // 等级最高
	EN_GUILD_SPECIAL_TYPE_MAX_FIGHT	= 2; // 战力最高
	EN_GUILD_SPECIAL_TYPE_TAX		= 3; // 历史贡献
}

message GuildQuestionData
{
	repeated GuildQuestionPlayerData player_data	= 1[(yd_fieldoptions.field_arysize)=300];		// 所有加入房间的玩家信息
	repeated uint64 answer_role_id					= 2[(yd_fieldoptions.field_arysize)=300];		// 答对的玩家id
	optional string answer_str						= 3[(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64];	// 正确答案字符串
	optional uint64 guild_id						= 6;
	optional ENGuildQuestionProcessType process_cast= 7;		// 用来标示轮训推送
	optional bool is_get_mail					= 8;	// 是否发送了邮件
}

// 行会答题全局数据
message tbGlobalGuildQuestion
{
	repeated GuildQuestionData guild_question   = 1[(yd_fieldoptions.field_arysize)=1000];
	optional bool is_start 						= 2;	// 是否开始活动
	optional ENGuildQuestionProcessType process = 3;	// 现在在什么阶段
	optional int32 question_index				= 4;	// 题目序号，0表示没有出题，真正的题目序号是1开始的
	optional int32 process_time					= 5;	// 阶段开始时间
	repeated int32 question_id					= 6[(yd_fieldoptions.field_arysize)=15];		// 所有出过的题目id
	optional bool is_other_type					= 7;	// 是否随机到类型2的题目
	optional bool is_get_mail					= 8;	// 是否所有行会发送了邮件
}

message tbGameGlobal
{
	optional int32 id4db   = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; // enGameGlobalDataType 类型 
	optional bytes content = 2[(yd_fieldoptions.field_bufsize) = 4000000]; // 对应类型的二进制流数据,注意数据库blob数据的最大长度
}


message ChamberItem
{
	required int32 item_id = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional double base_price = 4;     //今日基础价格
	optional int32 daily_buy_num = 5;	//当日购买数量
	optional int32 daily_sell_num = 6;	//当日出售数量
}


message ChamberTradeData
{
	repeated ChamberItem item_data = 1 [(yd_fieldoptions.field_arysize)=3000];   //商会商品交易数据
	optional int32 last_op_time = 2; //上次刷新价格时间
}


message MarketItem
{
	required int32 item_id = 1;   //物品id
	required int32 quality = 2;   //品质
	optional int32 price = 3;     //价格
}


message MarketTradeData
{
	repeated MarketItem item_data = 1 [(yd_fieldoptions.field_arysize)= 3000];   //商会商品交易数据
}


enum enTBMiscID
{
	EN_MISC_ID_CHAMBER_TRADE_DATA = 1;   //商会交易数据
	EN_MISC_ID_MARKET_TRADE_DATA = 2;    //市场交易数据
	EN_MISC_ID_SNS_GROUP_MSG_TIPS = 3;   //群组列表消息提示
	EN_MISC_ID_REGISTER_CONTROL = 4;     //注册人数信息
	EN_MISC_ID_TORMENT_TOWE_RECORD = 5;  //试炼塔最高层数记录
}

message SnsGroupMsgInfo
{
	required uint64 group_id = 1;    //群组id
	optional uint32 max_seq = 2;     //最大的消息系列号
}

message SnsGroupMsgTips
{
	repeated SnsGroupMsgInfo msg_info = 1 [(yd_fieldoptions.field_arysize)= 2000];
}

message AccountRegisteInfo
{
	optional uint32 qq_registe_num = 1;
	optional uint32 wx_registe_num = 2;
}

message MiscUnionData
{
	optional ChamberTradeData chamber_data = 1;   //EN_MISC_ID_CHAMBER_TRADE_DATA 商会交易数据 
	optional MarketTradeData market_data = 2;     //EN_MISC_ID_MARKET_TRADE_DATA 市场交易数据
	optional SnsGroupMsgTips sns_group_msg_tips = 3;     //EN_MISC_ID_SNS_GROUP_MSG_TIPS 群组列表消息提示
	optional AccountRegisteInfo account_registe_info = 4; //EN_MISC_ID_REGISTER_CONTROL 注册人数信息
	optional TormentTowerRecord torment_tower_record = 5; //EN_MISC_ID_TORMENT_TOWE_RECORD
}

message tbMiscData	//市场内物品信息, 数据用以计算价格波动
{
	required int32 id = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional MiscUnionData data = 2[(yd_fieldoptions.field_bufsize)=196608];
	optional MiscUnionData data2 = 3[(yd_fieldoptions.field_bufsize)=196608];
	optional MiscUnionData data3 = 4[(yd_fieldoptions.field_bufsize)=196608];
	optional MiscUnionData data4 = 5[(yd_fieldoptions.field_bufsize)=196608];
	optional MiscUnionData data5 = 6[(yd_fieldoptions.field_bufsize)=196608];
}

enum MoneyType
{
	EN_MONEYTYPE_NONE = 0;
	EN_MONEYTYPE_MONEY = 1;
	EN_MONEYTYPE_DIAMOND = 2;
	EN_MONEYTYPE_MAX = 3;
};

enum enGlobalDefine
{
	option allow_alias = true;
    GM_MAX_CMD_NUM = 16; // GM参数数量
    GM_MAX_CMD_LEN = 256; // GM参数最大长度
    CS_MAX_GM_LEN = 512; // GM指令最大长度
    CS_MAX_GM_RES_LEN = 10240; // GM指令应答最大长度
    MAX_PVP_TEAM_PLAYER_NUM = 3; //单个队伍最大人数
    MAX_STATE_NUM_BY_CHAR = 32;//最大的Actor状态数量字节
    MAX_BUFF_EFFECT = 8; //最大buff效果数量
    MAX_CS_NAME_LEN = 32; //名字最大长度
    MAX_SCENE_TRIGGER_FUNCTION = 4;
}

enum ActorObjType // 战场元素类型
{
	EN_ACT_TYPE_NONE                = -1;
	EN_ACT_TYPE_PLAYER_HERO         = 0;  //玩家的英雄
	EN_ACT_TYPE_APC                 = 1; 
	EN_ACT_TYPE_MONSTER             = 2;  //普通怪
	EN_ACT_TYPE_BOSS                = 3;  // BOSS
	EN_ACT_TYPE_TOWER               = 4;  //塔
	EN_ACT_TYPE_RESOURCECENTER      = 5;  //资源中心(资源回收点)
	EN_ACT_TYPE_HERO                = 12; // 非玩家英雄
	EN_ACT_TYPE_POWERUNIT           = 13; //动力炉
	EN_ACT_TYPE_CANNON              = 14; //炮
	EN_ACT_TYPE_HOME                = 15; //补给据点
	EN_ACT_TYPE_CHARGEDUNIT         = 17; //水晶
	EN_ACT_TYPE_MECH                = 18; // 机甲
	EN_ACT_TYPE_NEUTRAL_CANNON      = 19; //中立炮
	EN_ACT_TYPE_BALL                = 20; // 资源争夺战里的球
	EN_ACT_TYPE_RECYCLE_BIN         = 21; //回收点
	EN_ACT_TYPE_SCENE_TRIGGER       = 22; //触发器物件，一般没有模型
    EN_ACT_TYPE_STRONGHOLD          = 23; //据点类型
	EN_ACT_TYPE_AIR_WALL            = 24; //空气墙
	EN_ACT_TYPE_EVENT_GUARD_NPC	    = 25; //事件的守护NPC
	EN_ACT_TYPE_EVENT_CONVOY_NPC	= 26; //事件的护送NPC
	EN_ACT_TYPE_RIFT_BOSS			= 27; //大秘境BOSS
    EN_ACT_TYPE_PARTNER             = 28; //伙伴
    EN_ACT_TYPE_NPC                 = 29; //NPC
    EN_ACT_TYPE_DESTRUCTIBLE        = 30; //可破坏物件
	EN_ACT_TYPE_OBJ_ALL             = 32;
	EN_ACT_TYPE_SIM_PLAYER          = 33; //主城简要玩家
	EN_ACT_TYPE_MAGIC_BOSS			= 34; //魔境BOSS
    EN_ACT_TYPE_AIR_WALL_NO_LIMIT   = 35; //无镜头限制空气墙
}

enum enCampType
{
	EN_CAMP_TYPE_NONE = -1; //
	EN_CAMP_TYPE_BLUE = 0; //蓝方
	EN_CAMP_TYPE_RED = 1; //红方
	EN_CAMP_TYPE_GREEN = 2; //绿方	
	EN_CAMP_TYPE_NEUTRAL = 3; //中立
	EN_CAMP_TYPE_MAX = 4;
    EN_CAMP_TYPE_PRE_OCCUPY_RED = 5; //红预占领
    EN_CAMP_TYPE_PRE_OCCUPY_BLUE = 6; //蓝预占领
}

//战场形势统计中，关卡元素类型
enum LevelElementType
{
	EN_LE_TYPE_NPC = 0;				//NPC
	EN_LE_TYPE_STRONGHOLD = 1;		//据点
}

// 对象状态集合
enum enActorStateType
{
	EPSI_NONE                   = 0;//非法值
	
    EPSI_PROHIBIT_ACTIONS       = 1; //禁止行动
    EPSI_PROHIBIT_SKILLS        = 2; //不能放技能
    EPSI_IMMUNE_NEGATIVE_STATUS = 3; //免疫负面状态
    EPSI_IMMUNE_DAMAGE          = 4; //免疫所有伤害
    EPSI_IMMUNE_PHY_DAMAGE      = 5; //免疫物理伤害
    ESPI_IMMUNE_MGC_DAMAGE      = 6; //免疫魔法伤害
    
    EPSI_LYING                  = 7;//倒地状态:指被打倒在地的状态；
    EPSI_NUMBING                = 8;//硬直:指被敌人攻击命中并在短暂时间内，不能进行任何动作的状态；
    EPSI_IN_LOW_FLOAT           = 9; // 低浮空状态:指被敌人攻击命中并被打至空中的状态；
    EPSI_IN_AIR                 = 10; //是否在空中
    EPSI_IN_REBOUND             = 11; //反弹状态
    
    EPSI_PA_BODY                = 12; //霸体状态：该状态下，受到攻击时不会硬直、不会被击倒、不会浮空。

    EPSI_HIDDEN                 = 13; // 隐身
    EPSI_INVINCIBLE             = 14; // 无敌
    EPSI_GET_UP                 = 15; //起身保护状态
    EPSI_DMG_TO_HEAL            = 16; //回光返照，伤害变成治疗
    EPSI_PROHIBIT_SKILL_0       = 17; //封禁普通攻击
    EPSI_PROHIBIT_SKILL_1       = 18; //封禁一号位技能
    EPSI_PROHIBIT_SKILL_2       = 19; //封禁二号位技能
    EPSI_PROHIBIT_SKILL_3       = 20; //封禁三号位技能
    EPSI_INDOMITABLE            = 21; //不屈状态
    EPSI_PROHIBIT_JUMP          = 22; //禁止跳跃
    EPSI_PROHIBIT_SKILL_SWITCH  = 23; //封禁换人技能
    EPSI_PROHIBIT_MOVE          = 24; //禁止移动
    EPSI_PROHIBIT_PAUSE_FRAME   = 25; //禁止顿帧
	EPSI_IMMUNE_FORCE_FIELD     = 26; //免疫立场

    EPSI_CHAOS                  = 27; //混乱
    EPSI_SLEEP                  = 28; //睡眠
    EPSI_BLIND                  = 29; //致盲
}

enum enActionType
{
    EN_ACTION_TYPE_STAND = 0; //站立
	EN_ACTION_TYPE_RUN   = 1; //跑
	EN_ACTION_TYPE_DEAD  = 2; //死亡
}

enum DamageType
{
	EN_DAMAGETYPE_PHY = 0;//物理伤害
	EN_DAMAGETYPE_MGC = 1; //法术伤害
}


enum enChargedStatus
{
	EN_CHARGEDSTATUS_CHARGE 		= 0; //供能中
	EN_CHARGEDSTATUS_STOP 			= 1; //停止供能
	EN_CHARGEDSTATUS_FOREVER_STOP = 2; //永久停止供能

}

enum enMechStatus
{
	EN_MECHSTATUS_CHARGE   = 0; //充能中
	EN_MECHSTATUS_NOACTIVE = 1; //待激活
	EN_MECHSTATUS_DRIVE    = 2; //被驾驶状态
}

message RoomPlayerSimplePartnerInfo
{
    optional int32 partner_id = 1; //小伙伴ID
	optional int32 skin_id    = 2; //时装ID(0表示默认)
}

message BattlePlayerChatData
{
	optional uint32 ban_time = 1;	// 封号截止时间戳
	optional string reason = 2[(yd_fieldoptions.field_bufsize)=512];	// 封号原因
}

message RoomPlayerInfo
{
    required uint64                      role_id 				    = 1; //角色唯一ID
    required string                      name 					    = 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
    required uint32                      level					    = 3; //角色等级
    required uint32                      avatar_id				    = 4; //指挥官头像
    required enCampType                  camp				        = 5; //阵营,红蓝方
	repeated Item                        item_list					= 6 [(yd_fieldoptions.field_arysize)=3]; //设置使用的道具列表
	optional uint64                      guild_id 				    = 7;
	optional int32                       mag						= 8;
    required bool                        auto_fight                 = 9; //自动战斗状态
	required bool                        is_team_leader             = 10; //是否队长(没队伍时为true)
	required int32                       partner_id                 = 11; //小伙伴ID(不是UID)
	optional enProfessionType            profession 	            = 12 [default=EN_PROFESSION_NONE]; // 职业
	repeated int32                       fashions                   = 13 [(yd_fieldoptions.field_arysize)=7]; //时装
	required int32                       partner_skin               = 14; //伙伴时装ID
    optional int32                       title2_id                  = 15; //猎人考核称号ID
	optional bool                        can_auto_fight             = 16; //是否能自动战斗
	repeated RoomPlayerSimplePartnerInfo partner_info               = 17 [(yd_fieldoptions.field_arysize)=20]; //简要的伙伴信息(前端预加载用)
	optional enTeamVoiceState            state                      = 19; //语音状态
	optional AccountSafeScoreData        safe_score_data			= 20; //安全信用数据
	optional BattlePlayerChatData        forbidden_chat             = 21; //禁言数据
	optional int32                       transfer_id                = 22; //转职id
}

message RoomPlayerBattleInfo
{
    required RoomPlayerInfo player_info = 1;
    repeated uint32	 formation = 2 [(yd_fieldoptions.field_arysize)=8]; //阵容 
    repeated int32   skin_desc = 3 [(yd_fieldoptions.field_arysize)=8]; //阵容对应的皮肤
}  

message RoomExtraBattleInfo
{
    repeated int32 pre_load_actor = 1 [(yd_fieldoptions.field_arysize) = 128];
}

message SkillIDLevel
{
	required int32 skill_id = 1; //技能ID
	required int32 skill_lv = 2; //技能等级
	optional int32 transfer_id = 3;  //技能转职ID
}

message StateOne
{
	optional  int32  buff_id = 1;      //buffid
	optional  int32  level    = 2;
}

message RoomPlayerHeroInfo
{
	required int32        hero_id               = 1;
	repeated int32        equip_list            = 2[(yd_fieldoptions.field_arysize)=6];//装备列表
	repeated StateOne     state_list            = 3[(yd_fieldoptions.field_arysize)=36];//镶嵌的被动技能列表
	repeated SkillIDLevel skill_list            = 4[(yd_fieldoptions.field_arysize)=16];//技能列表
	repeated CSAttr       attr_list             = 5[(yd_fieldoptions.field_arysize)=168];//属性列表
    required int32        skin_desc_id          = 6; 
	required int32        debut_skill           = 7; //入场技
	repeated int32        deprecated_skill_list = 8[(yd_fieldoptions.field_arysize)=8]; //不会从ActorSkillDesc里添加的技能
	required int32        job_id                = 9;
    optional int32        equip_strength_level  = 10; // 附念最低等级
}

enum enPartnerBattleStatus
{
    EN_PARTNER_BATTLE_STATUS_NONE = 0;
	EN_PARTNER_BATTLE_STATUS_DIED = 1;
}

message RoomPlayerPartnerInfo
{
    required int32                 partner_id    = 1; 
    required uint64                partner_uid   = 2;
    repeated SkillIDLevel          ai_skill_list = 3 [(yd_fieldoptions.field_arysize)=6];  //ai技能列表(主动技能)
    repeated StateOne              state_list    = 4 [(yd_fieldoptions.field_arysize)=12]; //被动技能列表(被动技能)
    repeated CSAttr                attr_list     = 5 [(yd_fieldoptions.field_arysize)=144]; //属性列表
    required SkillIDLevel          hand_skill    = 6; //手动技能
	required int32                 skin_id       = 7;
	optional enPartnerBattleStatus status        = 8 [default=EN_PARTNER_BATTLE_STATUS_NONE]; 
	optional int32                 ai_macro      = 9;
	optional int32                 visual_field  = 10;
	optional int32                 relate_actor_id = 11;
	optional enPartnerAIType       ai_type       = 12[default=EN_PARTNER_AI_ATTACK];
}

message RoomPlayerBattleFullInfo
{
	required int32                 room_pos          = 1; //在房间中的位置
	required enCampType            camp              = 2;
	required RoomPlayerBattleInfo  base_info         = 3;
    repeated RoomPlayerHeroInfo    hero_info         = 4 [(yd_fieldoptions.field_arysize)=8];
	repeated int32                 battle_quest_list = 5 [(yd_fieldoptions.field_arysize)=32];
    optional int32                 src_svr           = 6; //所在服务器
    repeated RoomPlayerPartnerInfo partner_info      = 7 [(yd_fieldoptions.field_arysize)=50]; //伙伴
    optional bool                  disable_drop      = 8; 
}

message MPveData
{
	optional uint64 role_id = 1;
	repeated HeroHP hero_data = 2[(yd_fieldoptions.field_arysize)=2];
}

enum enTeamPlayerGetResourceType
{
	EN_RESOURCE_GEM_STONE		= 1;	// 宝石
	EN_RESOURCE_BIG_GOLDEN		= 2;	// 大金币
	EN_RESOURCE_SMALL_GOLDEN	= 3;	// 小金币
}


message SkillReportData
{
    optional string id_list         = 1;
    optional string level_list      = 2;
    optional string hit_list        = 3;
    optional string miss_list       = 4;
    //optional string cd_max_list     = 5;
    //optional string cd_min_list     = 6;
    optional string hit_max_list    = 7;
    optional string hit_min_list    = 8;
    optional string hurt_list       = 9;
    optional string use_count       = 10;
    
    optional int32  normal_use_count = 21;
    optional int32  normal_hit       = 22;
    optional int32  normal_mis       = 23;
    optional int32  normal_hurt      = 24;

    optional int32  sp_use_count = 31;
    optional int32  sp_hit       = 32;
    optional int32  sp_miss      = 33;
    //optional int32  sp_cd_max    = 34;
    //optional int32  sp_cd_min    = 35;
    optional int32  sp_hit_max   = 36;
    optional int32  sp_hit_min   = 37;
    optional int32  sp_hurt      = 38;
}
message MonsterSecData
{
    optional int32 hp_max = 1;
    optional int32 hp_min = 2;
    optional int32 hurt  = 3;
    optional int32 hurt_times = 4;
    optional int32 hurt_num_per_sec = 5;
    optional int32 att_times = 6;
    optional int32 export_hurt = 7;
    optional int32 life_time_total = 8;
}

message BattleEndReportData 
{
	optional int32   death                  = 1; //死亡次数
    optional int32   revive_times           = 2; //复活次数
	optional int64   hurt                   = 3; //受到的伤害
	optional int32   kill_count             = 4; //击杀
	optional int64   combo                  = 5; //连击
	optional int64   export_hurt            = 6; //造成伤害
    optional int32   treat                  = 7; // 受到的总治疗
    optional int32   export_treat           = 8; // 总治疗
    optional int32   sp_consume             = 9;
    optional int32   mp_consume             = 10;
    optional int32   partner_export_hurt    = 11;
    optional int32   partner_export_treat   = 12;
	optional int32   assist_count           = 13; //助攻数
	optional int32   hold_count             = 14; //占领数
	optional int32   hold_assit_count       = 15; //占领助攻数
	optional int32   trans_count            = 16; //运球数
	optional int32   trans_assit_count      = 17; //运球助攻数
    optional int32   special_buff_count     = 18; //天空竞技场获得buff数量
    optional int32   rescued_revive_times   = 19; //被队友复活次数

    optional int32   been_hit_times         = 22; //受击次数
    optional int32   partner_hurt           = 23; 
    optional int32   been_treat_times       = 24;
    optional int32   sec_hero_hp            = 25;

    optional MonsterSecData sec_monster_data   = 31;
    optional MonsterSecData sec_boss_data   = 32;

    optional SkillReportData skill_report   = 41;
    optional int32   pause_time             = 42;
    optional int32   use_drug_times         = 44; //使用药品次数
    optional int32   no_op_time_total       = 45;
}

message PartnerBattleInfo
{
    optional int32  id          = 1; //desc id
	optional uint64 uid         = 2; //uid
	optional uint64 fight_time  = 3; //ms
}

message RoomPlayerBattleEndInfo
{
    required uint64                       role_id                   = 1;  //角色ID 
    required enCampType                   camp                      = 2;  //阵营
    required bool                         is_mvp                    = 3;  //mvp
    required int32                        total_kill_monster_exp    = 4;  //杀怪获得的经验
    repeated GridItemBase                 acquired_drop_item        = 5;  //魂匣
	repeated Item                         quest_drop_list           = 6;  //任务物品列表
	repeated BattleKilledMonster          killed_monster_list       = 7;  //杀死的怪物
    repeated ItemGridCSData               acquired_team_drop_item   = 8;  //组队掉落物品
	optional int32                        avatar                    = 11; //头像
	optional string                       name                      = 12 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
	optional uint64                       guild_id                  = 13;  //公会ID 
	repeated HeroBattleInfo               hero_battle_info          = 18 [(yd_fieldoptions.field_arysize)=2]; 
	optional bool 				          halfway_join			    = 20; //是否是半途加入
	//optional int32                      challenge                 = 22; //挑战目标参数
    optional int32                        battle_state              = 23; //结束时状态(判断是否提前退出)
    optional int32 				          hp 					    = 24; //当前血量
    optional int32 				          mp						= 25; //当前魔法
    optional int32 				          active_hero_id			= 26; //英雄
    optional bool                         auto_fight                = 27; //自动战斗开启情况
	repeated int32				          resource_count			= 28; //每个财宝的个数（用enTeamPlayerGetResourceType做索引）
    required BattleEndReportData          report                    = 29; //
	optional uint64                       max_offline_sec           = 30; //最长离线时间
	optional uint64                       max_no_op_esc             = 31; //最长无操作时间
	repeated PartnerBattleInfo            patern_battle_info        = 32; //伙伴战斗数据
    //optional int32                      self_team_mmr             = 33;
    optional int32                        rival_team_mmr            = 34;
    optional int32                        job                       = 35; // 
	optional bool                         need_cost_instance_item   = 36;
	optional int32                        pab_win_score             = 37; //伙伴异步pvp获得分数，可正可负
}
  
enum enMovePathType
{
	EN_MOVEPATH_ONCE 		= 0;   //move路径一次
	EN_MOVEPATH_LOOP		= 1;	 //单路径循环： 到终点直接回归起点，继续循环
	EN_MOVEPATH_ROUND		= 2; 	//往返循环
}

enum RoleInitInfoType
{
	EN_ROLE_INIT_TYPE_HERO = 1[(yd_fieldoptions.field_enum_cname) = "英雄"]; //英雄
	EN_ROLE_INIT_TYPE_ITEM = 2[(yd_fieldoptions.field_enum_cname) = "物品"]; //物品
	EN_ROLE_INIT_TYPE_AVATAR = 3[(yd_fieldoptions.field_enum_cname) = "头像"]; //指挥官头像
    EN_ROLE_INIT_TYPE_QUEST = 4[(yd_fieldoptions.field_enum_cname) = "任务"]; //任务
}

//buff类别
enum BuffCategory
{
	EBBT_NEUTRAL = 0; //中性
	EBBT_BUFF = 1; //
	EBBT_DEBUFF = 2; //
	EBBT_HOT = 3; //
	EBBT_DOT = 4; //
}

//Buff应用状态
enum BuffApplyState
{
	BAS_NONE = 0; //无范围
	BAS_DISABLE = 1; //不可行动状态
}

//Buff作用对象类型
enum BuffTargetType
{
	BTT_ALL = 0; //所有对象
	BTT_BUILDING = 1; //所有建筑
	BTT_CREATURE = 2; //所有生物
}

//Buff Overlay类型
enum BuffOverlayType
{
	BOT_REBUILD = 0; //移除效果，重新生成
	BOT_ONLY_TIME = 1; //只更新时间
}

//Buff触发条件
enum BuffTriggerType
{
	BT_Normal = 0; //常规触发
	BT_AttrCompare = 1; //属性比较
	BT_LayNum = 2; //层数累积
	BT_Delay = 3; //延迟触发
	BT_Death = 4; //死亡触发
}

//Buff受击类型
enum BuffHitType
{
	BHT_All = 0; //被任何对象攻击
	BHT_HERO = 1; //被英雄攻击
	BHT_BOSS = 2; //被BOSS攻击
}

//Buff移除条件
enum BuffRemoveType
{
	BR_NONE = 0[(yd_fieldoptions.field_enum_cname) = "未填写"]; //无
	BR_AttrCompare = 1[(yd_fieldoptions.field_enum_cname) = "属性比较"]; //属性比较
	BR_LayNum = 2[(yd_fieldoptions.field_enum_cname) = "层数累积"]; //层数累积
	BR_Time = 3[(yd_fieldoptions.field_enum_cname) = "时间结束"]; //时间结束
	BR_Death = 4[(yd_fieldoptions.field_enum_cname) = "死亡移除"]; //死亡移除
	BR_Behit = 5[(yd_fieldoptions.field_enum_cname) = "受击移除"]; //受击移除
	BR_trigger = 6[(yd_fieldoptions.field_enum_cname) = "触发移除"];//触发移除
	BR_Rm_Buff = 7[(yd_fieldoptions.field_enum_cname) = "buff移除"]; //buff移除
	BR_Absorb_Over = 8[(yd_fieldoptions.field_enum_cname) = "伤害吸收完成"]; //伤害吸收完成
	BR_Caster_Spell = 9[(yd_fieldoptions.field_enum_cname) = "施放技能移除"]; //施放技能移除
	BR_AttackCount = 10[(yd_fieldoptions.field_enum_cname) = "普通攻击次数移除"]; //普通攻击次数移除
	BR_Behit_expect_dogface = 11[(yd_fieldoptions.field_enum_cname) = "非小兵伤害移除"]; //非小兵伤害移除
	BR_Caster_General_Spell = 12[(yd_fieldoptions.field_enum_cname) = "施放普通攻击移除"]; //施放普通攻击移除
	BR_Combos_Over = 13[(yd_fieldoptions.field_enum_cname) = "连击中断移除"]; //连击中断移除
	BR_Switch_Member = 14[(yd_fieldoptions.field_enum_cname) = "换人移除"]; //换人移除
	BR_Stop = 15[(yd_fieldoptions.field_enum_cname) = "移动停止移除"]; //移动停止移除
	BR_Add_Buff = 16[(yd_fieldoptions.field_enum_cname) = "buff添加移除"]; //buff移除
}

//Buff效果类型
enum BuffEffectType
{
	BET_NONE                         = 0 [(yd_fieldoptions.field_enum_cname) = "无效果"]; //无
	BET_ATTR_CHANGE                  = 1 [(yd_fieldoptions.field_enum_cname) = "属性改变"];//属性改变 //第一个参数:设置值 第二个参数:增加值 第三个参数:万分比提升
	BET_ATTR_SET                     = 2 [(yd_fieldoptions.field_enum_cname) = "设置属性"]; //属性一次性改变
	BET_REDUCE_DAM                   = 3 [(yd_fieldoptions.field_enum_cname) = "减免伤害"]; //减免伤害      
    BET_PRODUCT_DAM                  = 4 [(yd_fieldoptions.field_enum_cname) = "造成伤害"]; //造成伤害 //第一个参数:伤害类型
    BET_ADD_BUFF                     = 5 [(yd_fieldoptions.field_enum_cname) = "添加buff"]; //添加buff
    BET_REMOVE_BUFF                  = 6 [(yd_fieldoptions.field_enum_cname) = "移除buff"]; //移除buff
    BET_FLAG                         = 7 [(yd_fieldoptions.field_enum_cname) = "特殊状态"]; //特殊状态
    BET_SET_STATE                    = 8 [(yd_fieldoptions.field_enum_cname) = "设置状态"]; //设置状态，immune_damage等生成
    BET_REVIVAL                      = 9 [(yd_fieldoptions.field_enum_cname) = "复活"]; //复活
    BET_HEAL                         = 10[(yd_fieldoptions.field_enum_cname) = "治疗"]; //治疗
    BET_ABSORB_DMG                   = 11[(yd_fieldoptions.field_enum_cname) = "护盾"]; //护盾
    BET_DROP_SCENE_OBJECT            = 12[(yd_fieldoptions.field_enum_cname) = "掉落场景触发器"]; //掉落场景物件
    BET_DMG_ONE_SHOT                 = 13[(yd_fieldoptions.field_enum_cname) = "单次攻击提升伤害"]; //单次攻击提升伤害
    BET_Spawn_Around                 = 14[(yd_fieldoptions.field_enum_cname) = "在周围刷怪"]; //在周围刷怪
    BET_AURA                         = 15[(yd_fieldoptions.field_enum_cname) = "光环"]; //光环加Buff
    BET_2V2V2_BATTLE_ATTR_CHANGE     = 16[(yd_fieldoptions.field_enum_cname) = "2v2v2战斗属性改变"];
    BET_TARGET_ADD_BUFF              = 17[(yd_fieldoptions.field_enum_cname) = "给攻击目标加Buff"]; //给攻击目标加Buff
    BET_DMG_TARGET                   = 18[(yd_fieldoptions.field_enum_cname) = "对目标造成伤害"]; //对目标造成伤害 //第一个参数:伤害类型
    BET_RAND_PROHIBIT_SKILL          = 19[(yd_fieldoptions.field_enum_cname) = "随机封禁"];
    BET_SKILL_FIX                    = 20[(yd_fieldoptions.field_enum_cname) = "技能修正"]; //
	BET_SKILL_CD_RDU                 = 21[(yd_fieldoptions.field_enum_cname) = "技能CD减少"]; //
	BET_SKILL_CD_RDU_ONCE            = 22[(yd_fieldoptions.field_enum_cname) = "技能CD减少一次"]; // 
	BET_SKILL_SWITCH                 = 23[(yd_fieldoptions.field_enum_cname) = "技能置换"]; //
	BET_SKILL_ADDTION                = 24[(yd_fieldoptions.field_enum_cname) = "技能追加"]; //
	BET_PROJECTILE                   = 25[(yd_fieldoptions.field_enum_cname) = "释放飞行道具"]; //Buff释放飞行道具
	BET_TELEPORT_NEAR                = 26[(yd_fieldoptions.field_enum_cname) = "瞬移接近"]; //瞬移接近
	BET_TELEPORT_AWAY                = 27[(yd_fieldoptions.field_enum_cname) = "瞬移远离"]; //瞬移远离
	BET_DAMAGE_SHARE                 = 28[(yd_fieldoptions.field_enum_cname) = "均摊伤害"];
	BET_USE_SKILL                    = 29[(yd_fieldoptions.field_enum_cname) = "使用技能"]; //Buff释放技能
	BET_SCENE_DROP                   = 30[(yd_fieldoptions.field_enum_cname) = "场景掉落"]; //场景掉落
	BET_SUMMON                       = 31[(yd_fieldoptions.field_enum_cname) = "召唤"];
	BET_RECOVER_SP                   = 32[(yd_fieldoptions.field_enum_cname) = "回复SP"];
	BET_REDUCE_SP                    = 33[(yd_fieldoptions.field_enum_cname) = "减少SP"];
	BET_USE_DRUG                     = 34[(yd_fieldoptions.field_enum_cname) = "使用品质药品"];
	BET_RECOVER_MP                   = 35[(yd_fieldoptions.field_enum_cname) = "回复魔法"];
	BET_SKILL_FEATURE_CHANGE         = 36[(yd_fieldoptions.field_enum_cname) = "改变技能特性"];
	BET_ATTR_CHANGE_ONCE             = 37[(yd_fieldoptions.field_enum_cname) = "属性改变一次"];
	BET_TARGET_GROUP_BUFF_VAMPIRE    = 38[(yd_fieldoptions.field_enum_cname) = "目标有Buff组吸血"];
	BET_ADDTIONAL_BUFF               = 39[(yd_fieldoptions.field_enum_cname) = "Buff修正-附带Buff"];
	BET_TIME_EXPAND                  = 40[(yd_fieldoptions.field_enum_cname) = "Buff修正-延长持续时间"];
	BET_SKILL_BUFFGROUP_ADDTION      = 41[(yd_fieldoptions.field_enum_cname) = "技能追加-目标有Buff组"];
	BET_REMOVE_CATEGORY_BUFF         = 42[(yd_fieldoptions.field_enum_cname) = "移除指定类别Buff"];
	BET_ACTION_FEATURE_SWITCH        = 43[(yd_fieldoptions.field_enum_cname) = "动作特性开关"];
	BET_REMOTE_DMG_FIX               = 44[(yd_fieldoptions.field_enum_cname) = "远距离伤害修正"];
	BET_SKILL_SP_COST_FIX            = 45[(yd_fieldoptions.field_enum_cname) = "技能消耗SP修正"];
	BET_SKILL_CHARGE_MAX_INC         = 46[(yd_fieldoptions.field_enum_cname) = "增加充能次数上限"];
	BET_SET_BUFF_LAYER_BY_ATTR       = 47[(yd_fieldoptions.field_enum_cname) = "根据属性设置Buff层数"];
	BET_MP_ABSORB_DMG                = 48[(yd_fieldoptions.field_enum_cname) = "魔法护盾"];
    BET_REVERSE_DMG                  = 49[(yd_fieldoptions.field_enum_cname) = "反转伤害"];
	BET_SKILL_GROUP_CD_RDU           = 50[(yd_fieldoptions.field_enum_cname) = "技能组CD减少"]; //
    BET_REMOVE_BUFF_CAST_DMG         = 51[(yd_fieldoptions.field_enum_cname) = "移除Buff造成伤害"];
	BET_SKILL_GROUP_FIX              = 52[(yd_fieldoptions.field_enum_cname) = "技能组修正"];
}

//Buff效果触发条件
enum BuffEffectTriggerType
{
	BETT_BuffBegin          = 0 [(yd_fieldoptions.field_enum_cname) = "Buff开始时"];   //Buff开始时
	BETT_BuffEnd            = 1 [(yd_fieldoptions.field_enum_cname) = "Buff结束时"];   //Buff结束时
	BETT_Periodical         = 2 [(yd_fieldoptions.field_enum_cname) = "Buff周期性"];   //Buff周期性
	BETT_AttrCompare        = 4 [(yd_fieldoptions.field_enum_cname) = "属性比较"];     //属性比较
	BETT_Died               = 5 [(yd_fieldoptions.field_enum_cname) = "已经死亡"];     //已经死亡
	BETT_BuffInterrupt      = 6 [(yd_fieldoptions.field_enum_cname) = "buff中断触发(达到移除条件)"] ;//buff中断触发(达到移除条件)
	
	BETT_PostCastingSkill   = 7 [(yd_fieldoptions.field_enum_cname) = "使用技能之后"];  //施放技能之后，可填技能ID
	BETT_PostGeneralSkill   = 8 [(yd_fieldoptions.field_enum_cname) = "普攻之后"];             
	BETT_PostAttack         = 9 [(yd_fieldoptions.field_enum_cname) = "攻击之后"];    
	BETT_AtkCount           = 10[(yd_fieldoptions.field_enum_cname) = "技能攻击次数"];  //不用区分技能
	BETT_GeneralAtkCount    = 11[(yd_fieldoptions.field_enum_cname) = "普攻次数"];      //普攻次数

	BETT_AtkHit             = 12[(yd_fieldoptions.field_enum_cname) = "攻击命中"];      //技能攻击并命中触发，可填技能ID
	BETT_BeingHit           = 13[(yd_fieldoptions.field_enum_cname) = "即将受击"];      //即将受击
	BETT_BeenHit            = 14[(yd_fieldoptions.field_enum_cname) = "受击之后"];      //已经受击
	BETT_CritAtk_Hit        = 15[(yd_fieldoptions.field_enum_cname) = "暴击"];          //暴击
	BETT_CritAtk_BeHit      = 16[(yd_fieldoptions.field_enum_cname) = "被暴击"];        //被暴击

	BETT_FatalHit           = 17[(yd_fieldoptions.field_enum_cname) = "致死伤害时"];     //致死伤害时，可填技能ID
	BETT_Dying              = 18[(yd_fieldoptions.field_enum_cname) = "即将死亡"];       //即将死亡，可填技能ID
	BETT_Combos             = 19[(yd_fieldoptions.field_enum_cname) = "连击次数"]; 

	BETT_Delay              = 20[(yd_fieldoptions.field_enum_cname) = "延时触发"];             //延时触发
	BETT_Kill               = 21[(yd_fieldoptions.field_enum_cname) = "击杀触发"];             //击杀触发，可填技能ID
	BETT_NotHurt            = 22[(yd_fieldoptions.field_enum_cname) = "未被伤害"];             //未被伤害
	BETT_AttrCompareOneShot = 23[(yd_fieldoptions.field_enum_cname) = "单次伤害时比较属性"];    //单次伤害时比较属性
	BETT_AddBuff            = 24[(yd_fieldoptions.field_enum_cname) = "获取Buff触发"];         //获取Buff触发
	BETT_BeDmgAccumulation  = 25[(yd_fieldoptions.field_enum_cname) = "受伤累积"];             //受伤累积
	BETT_Run                = 26[(yd_fieldoptions.field_enum_cname) = "移动触发"];             //移动触发
	BETT_Die                = 27[(yd_fieldoptions.field_enum_cname) = "死亡时"];               //死亡时

	BETT_Skill_Hit          = 28[(yd_fieldoptions.field_enum_cname) = "技能命中"];             //仅技能命中
	BETT_ACTION	            = 29[(yd_fieldoptions.field_enum_cname) = "动作触发"];

//下面的暂时不用
	BETT_PreCastingSkill    = 30[(yd_fieldoptions.field_enum_cname) = "使用技能之前"];           //施放技能之前，可填技能ID
	BETT_PreGeneralSkill    = 31[(yd_fieldoptions.field_enum_cname) = "普攻之前"];             
	BETT_PreAttack          = 32[(yd_fieldoptions.field_enum_cname) = "攻击之前"];            
	BETT_GeneralAtk_BeHit   = 33[(yd_fieldoptions.field_enum_cname) = "被普通攻击命中"];         //被普通攻击命中
	BETT_GeneralAtk_Hit     = 34[(yd_fieldoptions.field_enum_cname) = "普通攻击命中"];           //普通攻击命中
	BETT_BeginReborn        = 35[(yd_fieldoptions.field_enum_cname) = "即将进入复活"];           //即将进入复活	
	BETT_AtkHurt            = 36[(yd_fieldoptions.field_enum_cname) = "技能攻击并造成伤害"];     //技能攻击并造成伤害
	BETT_AtkBeHurt          = 37[(yd_fieldoptions.field_enum_cname) = "被伤害触发"];            //被伤害触发
	BETT_AreaHeroDie        = 38[(yd_fieldoptions.field_enum_cname) = "区域内英雄死亡"];        //区域内英雄死亡
	BETT_Client             = 39[(yd_fieldoptions.field_enum_cname) = "客户端触发"];            //客户端触发
	
//新增触发
	BETT_HP_CHANGE          = 40[(yd_fieldoptions.field_enum_cname) = "生命值变化"];            //生命值变化时触发
	BETT_AuraCount          = 41[(yd_fieldoptions.field_enum_cname) = "区域计数"];              //区域计数满足条件时触发
}

// npc刷新规则 -- start
enum enSpawnTrigger
{
    ESPT_NULL       = 0;
    ESPT_BORN       = 1;
    ESPT_INTERVAL   = 2;
    ESPT_CAMPCHANGE = 3;
    ESPT_DEAD       = 4;
    ESPT_PASSIVE    = 5;  //被动触发器， 只有外部触发时，才触发刷新一次
    ESPT_ABYSS_BORN = 6;  //深渊的时候 

    ESPT_MAX        = 20;
}

enum enSpawnCondition
{
	ESPC_NULL					= -1;
	ESPC_NUM 					= 0;
	ESPC_CAMP					= 1;
	ESPC_TRIG_ON   			= 2;
	ESPC_GROUP_SPAWN  		= 3;
	ESPC_GROUP_REMAIN   		= 4; 
	ESPC_GROUP_Exist   		= 5;
	
	ESPC_MAX 		= 10;
}


enum enSceneDropObjEffectType
{
	ESDOET_NONE = 0;
	ESDOET_ADD_BUFF = 1[(yd_fieldoptions.field_enum_cname) = "buff"]; //添加buff
}

enum enSceneTriggerType
{
	ESTT_NONE                = 0;
	ESTT_Area_Trigger        = 1[(yd_fieldoptions.field_enum_cname) = "区域触发"]; //某个区域的触发
	ESTT_Interactive_Trigger = 2[(yd_fieldoptions.field_enum_cname) = "读条触发"]; //读条,参数是进度条编号
	ESTT_Kill_Trigger        = 3[(yd_fieldoptions.field_enum_cname) = "击杀触发"];
	ESTT_Periodical          = 4[(yd_fieldoptions.field_enum_cname) = "周期性触发"];
	ESTT_SceneTrigger_Exec   = 5[(yd_fieldoptions.field_enum_cname) = "触发器执行触发"];
	ESTT_Delay_Exec          = 6; //延时执行，不暴露填表
	ESTT_AI_Exec             = 7; //AI执行, 不暴露填表
	ESTT_Immediately_Exec    = 8[(yd_fieldoptions.field_enum_cname) = "马上触发"];
}

enum enSceneTriggerFunction
{
	ESTF_NONE                      = 0;
	ESTF_Teleport                  = 1[(yd_fieldoptions.field_enum_cname) = "传送"];
	ESTF_Add_Buff                  = 2[(yd_fieldoptions.field_enum_cname) = "获得Buff"];
	ESTF_Add_Team_Buff             = 3[(yd_fieldoptions.field_enum_cname) = "队伍获得Buff"];
	ESTF_Remove_Buff               = 4[(yd_fieldoptions.field_enum_cname) = "移除Buff"];
	ESTF_Add_Camp_Score            = 5[(yd_fieldoptions.field_enum_cname) = "增加阵营得分"];
    ESTF_Occupy                    = 6[(yd_fieldoptions.field_enum_cname) = "占领"];
    ESTF_Kill                      = 7[(yd_fieldoptions.field_enum_cname) = "击杀"];
    ESTF_Kill_By_Type              = 8[(yd_fieldoptions.field_enum_cname) = "击杀指定类型怪物"]; 
    ESTF_Add_Camp_Score_By_Count   = 9[(yd_fieldoptions.field_enum_cname) = "根据数量增加阵营得分"];
    ESTF_Spawn                     = 10[(yd_fieldoptions.field_enum_cname) = "触发刷怪"];
    ESTF_Remove_Owner              = 11[(yd_fieldoptions.field_enum_cname) = "移除所有者"];
	ESTF_Trigger_Level_Event_Group = 12[(yd_fieldoptions.field_enum_cname) = "触发关卡事件组"];
	ESTF_Spawn_Around              = 13[(yd_fieldoptions.field_enum_cname) = "周围刷怪"];
	ESTF_Heal                      = 14[(yd_fieldoptions.field_enum_cname) = "加血"];
    ESTF_Dmg                       = 15[(yd_fieldoptions.field_enum_cname) = "扣血"];
    ESTF_Open_Owner_AI             = 16[(yd_fieldoptions.field_enum_cname) = "打开所有者AI"];
    ESTF_Finish_Escort             = 17[(yd_fieldoptions.field_enum_cname) = "完成护送"];
    ESTF_Rescue                    = 18[(yd_fieldoptions.field_enum_cname) = "救助"];
    ESTF_Add_Buff_Range            = 19[(yd_fieldoptions.field_enum_cname) = "半径内获得buff"];
    ESTF_Play_Drama                = 20[(yd_fieldoptions.field_enum_cname) = "播放剧情"];
    ESTF_Kill_All                  = 21[(yd_fieldoptions.field_enum_cname) = "击杀所有怪物"];
    ESTF_Remove_Buff_Range         = 22[(yd_fieldoptions.field_enum_cname) = "半径内删除buff"];
    ESTF_Add_Heal_Range            = 23[(yd_fieldoptions.field_enum_cname) = "半径内指定对象类型回复血量"];
	ESTF_Goto_End                  = 24[(yd_fieldoptions.field_enum_cname) = "结算游戏"];
	ESTF_Add_Energy                = 25[(yd_fieldoptions.field_enum_cname) = "增加能量"];
	ESTF_Add_Energy_Range          = 26[(yd_fieldoptions.field_enum_cname) = "半径内增加能量"];
	ESTF_Team_Player_Get_Resources = 27[(yd_fieldoptions.field_enum_cname) = "队伍玩家获得财宝"];
	ESTF_Kill_Monster_By_Group     = 28[(yd_fieldoptions.field_enum_cname) = "击杀某个组的怪物"];
	ESTF_Level_Trans               = 29[(yd_fieldoptions.field_enum_cname) = "跨图传送"];
    ESTF_Group_Team                = 30[(yd_fieldoptions.field_enum_cname) = "队伍集合"];
    ESTF_Add_Count                 = 31[(yd_fieldoptions.field_enum_cname) = "计数增加"];
    ESTF_Set_Count                 = 34[(yd_fieldoptions.field_enum_cname) = "设置计数"];
    ESTF_Switch_UI                 = 32[(yd_fieldoptions.field_enum_cname) = "切换UI显示"];
    ESTF_Show_Flash_UI             = 33[(yd_fieldoptions.field_enum_cname) = "显示一次UI"];
}

enum enSceneTriggerRefresh
{
	ESTR_NONE = 0;
	ESTR_Periodical = 1; //周期性刷新
	ESTR_Begin = 2; //开始时刷新
	ESTR_Disappear = 3; //消失后
}

enum enChargeSkillType
{
	E_Charge_Skill_None = 0;
	E_Charge_Skill_Periodical = 1[(yd_fieldoptions.field_enum_cname) = "周期性充能"];
}

enum enRuneRank
{
	ERUNER_NONE = 0;
	ERUNER_COMMON = 1;
	ERUNER_MAGIC = 2;
	ERUNER_RARE = 3;
	ERUNER_EPIC = 4;
	ERUNER_LEGENDARY = 5;
}

enum enTradeStyle
{
	ETRADE_NONE 		= 0;
	ETRADE_SHOP 		= 1;
	ETRADE_MARKET 		= 2;
	ETRADE_REALTRADE 	= 3;
	
	ETRADE_MAX			= 4;
}

enum enLevelVictoryConditionType
{
    E_Victory_By_None            = 0[(yd_fieldoptions.field_enum_cname) = "无"];
    E_Victory_By_Score           = 1[(yd_fieldoptions.field_enum_cname) = "得分"];             //1v1 以比分来确定对错
    E_Victory_By_Destroy_Item    = 2[(yd_fieldoptions.field_enum_cname) = "击杀指定类型目标"]; //3v3 以销毁某类物品来确定对错
    E_Victory_By_Kill_Max        = 3[(yd_fieldoptions.field_enum_cname) = "击杀计数"];         //3V3 一方击杀人数总和达到某一值，则判定胜利
    E_Victory_By_Kill_Monster    = 4[(yd_fieldoptions.field_enum_cname) = "击杀指定ID怪物"];   //击杀指定ID怪物
	E_Victory_By_BOSS_HP         = 5[(yd_fieldoptions.field_enum_cname) = "Boss血量低于"];     //伤害BOSS指定血量
	E_Victory_By_Suvival         = 6[(yd_fieldoptions.field_enum_cname) = "存活指定时间"];     //坚持多久,参数为秒数
	E_Victory_By_Round_Kill_Max  = 7[(yd_fieldoptions.field_enum_cname) = "战斗轮次计分"];
}


// RankCommon
enum enRankType
{
    E_RANK_TYPE_NONE            = 0;
    E_RANK_TYPE_EXP             = 1; // 等级榜
    E_RANK_TYPE_TOWER           = 2; // 勇者之塔
    E_RANK_TYPE_1V1_DIVISION    = 3; // 段位榜
    E_RANK_TYPE_GUILD           = 4; // 公会榜
    E_RANK_TYPE_WEAPON          = 5; // 武器榜
    E_RANK_TYPE_ACHIEVE         = 6; // 成就榜
    E_RANK_TYPE_GS              = 7; // 战斗力
}
message RankCommonExtraData
{
    repeated ItemGridCSData  equip_list = 1;
    optional uint32          guild_refresh_time = 2;
}
message RankCommonInfo
{
	required uint64 id = 1;
	required int32  rank    = 2;
}
message RankCommonScore
{
    required uint64 id = 1;

    optional int32  score_i32_1 = 10;
    optional int32  score_i32_2 = 11;

    optional uint32 score_u32_1 = 20;
    optional uint64 score_u64_1 = 21;
}
message RankCommonBody 
{
	repeated RankCommonScore score_list = 1[(yd_fieldoptions.field_arysize) = 5001];
	repeated RankCommonInfo  info_list  = 2[(yd_fieldoptions.field_arysize) = 5001];
    // 保证extra_data位置不被read_from_pbmsg修改
    optional string          extra_data = 3[(yd_fieldoptions.field_bufsize)=1, (yd_fieldoptions.field_string_len)=1];
}
message tbRankCommon
{ 
	required int32 id4db = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional RankCommonBody body = 2[(yd_fieldoptions.field_bufsize)=1600000];
}
message RankExtData
{
    optional ItemGridCSData   equip = 1;
}
message GlobalRoleCEInfo
{
    required uint64 role_id = 1;
    required string role_name = 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
    optional int32  sns_server_id = 3;
    required int32  ce = 4;
    required int32  offline_time = 5;
    optional int32  flag = 6;
}
message tbGlobalRoleCE
{
    required string open_id = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //唯一ID;
    required GlobalRoleCEInfo info = 2;
}


enum enChatLinkType
{
	EN_CHAT_LINK_TYPE_ITEM = 1;            //物品
	EN_CHAT_LINK_TYPE_EQUIP = 2;           //装备
	EN_CHAT_LINK_TYPE_MARKET_GOODS = 3;    //摆摊商品
	EN_CHAT_LINK_TYPE_RUNE = 4;            //念纹	
}


message CSChatLink
{
	required enChatLinkType type = 1;     //超链接类型
	
	//optional Item item = 2;           //EN_CHAT_LINK_TYPE_ITEM //待删
	//optional Equip equip = 3;         //EN_CHAT_LINK_TYPE_EQUIP //待删
	optional tbMarketGoods goods = 4; //EN_CHAT_LINK_TYPE_MARKET_GOODS // 保留
	//optional Rune rune = 5;           //EN_CHAT_LINK_TYPE_RUNE //无使用

    optional ItemGridCSData item = 10; // 除4之外的结构待删 //EN_CHAT_LINK_TYPE_ITEM
}

message ZoneItemContent
{
	repeated CSChatLink chat_link = 1 [(yd_fieldoptions.field_arysize)=3]; //超链接请求参数
}

message CSChatContent
{
	optional string text = 1 [(yd_fieldoptions.field_bufsize)=512]; //文本内容
	optional bytes voice = 2 [(yd_fieldoptions.field_bufsize)=512]; //语音内容
	optional int32 voice_duration = 3; //语音时长
    //repeated Equip equip = 4[(yd_fieldoptions.field_arysize)=3];
    optional int32 alert_id = 5;//客户端自定义警告ID对应,用于队友
    optional int32 emoji_id = 6; //表情ID，客户端自定义,全场广播
	
	repeated CSChatLink chat_link = 7 [(yd_fieldoptions.field_arysize)=5]; //超链接请求参数
}

message tbRoleMsg		//私人message，不限好友陌生人，不限在线与否
{
	required uint64 recv_role_id 	= 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional uint64 send_role_id 	= 2[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional uint64 uuid 			= 3[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional uint64 send_time 		= 4;
	optional CSChatContent msg 		= 5;
}


message PrivateMsgData
{
	repeated tbRoleMsg msg = 3[(yd_fieldoptions.field_arysize)=100];  //消息记录
	optional uint32 max_seq = 5;       //消息最大序列号
	optional uint32 last_get_seq = 6;  //上次拉取的最大序列号
}


message tbPrivateMsg
{
	required uint64 role_id = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional PrivateMsgData role_msg = 2;  //好友私聊消息
	optional PrivateMsgData sys_msg = 3;   //系统私聊消息
}


message GroupMemberOne
{
	required uint64 role_id = 1;        //角色id
	optional int32 last_get_seq = 2;    //最后一次拉取seq
	optional string name = 3 [(yd_fieldoptions.field_bufsize)=32]; //角色名字
	optional int32 profession = 4; //职业
	optional int32 level = 5;      //等级
	optional bool remind = 6;      //是否设置了消息提醒 
	optional int32 last_clear_seq = 7;    //最后一次清楚seq
	optional int32 transfer_id = 8; //转职ID
}

message SnsGroupMember
{
	required uint64 creator = 1;     //创建者角色id
	repeated GroupMemberOne member = 2 [(yd_fieldoptions.field_arysize) = 70];      //群成员
	optional string announce = 3 [(yd_fieldoptions.field_bufsize) = 256];
}

message SnsGroupMessage
{	
	repeated tbRoleMsg msg = 1[(yd_fieldoptions.field_arysize) = 100];   //消息
	optional uint32 max_seq = 2;    //最大的消息序列号
}

message tbSnsGroup       //群组
{
	required uint64 group_id = 1 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];         //群id
	optional SnsGroupBase base = 2;       //群基本信息
	optional SnsGroupMember member = 3;   //群成员信息
	optional SnsGroupMessage message = 4[(yd_fieldoptions.field_bufsize)=1048576]; //群消息
}

message CorpsMemberOne
{
	optional uint64 role_id = 1;            //角色id 
	optional uint32 season_battle_cnt = 2;    //赛季场次
	optional uint32 season_win_cnt = 3;       //赛季胜利场次
	optional uint32 floor = 4;                //层数
	optional int32 offline_time = 5;          //离线时间
	optional uint32 history_max_floor = 6;    //
	optional uint32 total_battle_cnt = 7;     //历史总场次
	optional uint32 total_win_cnt = 8;        //历史总胜利场次
}

message CorpsMember
{
	repeated CorpsMemberOne member_list = 1 [(yd_fieldoptions.field_arysize)=9];    //成员信息
}

message CorpsBase
{
	optional string name = 1 [(yd_fieldoptions.field_bufsize)=32];     //战队名字
	optional string announce = 2 [(yd_fieldoptions.field_bufsize)=256]; //战队公告
	optional int32 join_min_lv = 3;         //进入最小等级
	optional int32 join_max_lv = 4;         //进入最大等级
	optional uint32 season_battle_cnt = 5;  //赛季场次
	optional uint32 season_win_cnt = 6;     //赛季胜利场次
	optional uint32 history_max_floor = 7;  //
	optional uint32 total_battle_cnt = 8;   //历史总场次
	optional uint32 total_win_cnt = 9;      //历史总胜利场次
	optional uint32 season = 10;            //当前第几赛季
}

message CorpsApplyList
{
	repeated CorpsMemberOne apply_role = 1 [(yd_fieldoptions.field_arysize)=25];            //角色id
}

message tbBattleCorps
{
	required uint64 id = 1 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];              //战队唯一id
	optional CorpsBase base = 2;         //基础信息
	optional CorpsMember member = 3;     //战队成员信息
	optional CorpsApplyList apply_list = 4;   //申请列表
}


message RoleMailParam
{
	repeated string mail_name = 1[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_arysize) = 5]; 	//邮件格式里用到的人名
}

// 前端设计显示5个物品，因此这里策划说修改成5个
// 超过5个，前端显示会有问题
message MailItem
{
	repeated ItemGridCSData item_list = 1[(yd_fieldoptions.field_arysize) = 5];
	optional int32 add_diamond = 2;  //赠送的钻石
}

// 现在这个结构用于给客户端发送邮件信息
// 注意前端收到时，已经填充了content，send_name，title。static_id和param字段没有值
// 后端用来game和sns创建邮件时用（减少之前的修改），在最后插入数据库前转换成后端专用结构
message tbRoleMail
{
	required uint64 id			= 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //唯一ID
//	required uint64 role_id 	= 2[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //收件者ID
	optional string send_name	= 3[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //发送者名字
	optional int32 static_id	= 4;														//邮件表格里的静态ID
	optional string content		= 5[(yd_fieldoptions.field_bufsize)=1600, (yd_fieldoptions.field_string_len)=1600]; //自定义邮件内容
	optional string title		= 6[(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64]; //邮件标题
	optional uint64 send_time	= 7; 														//发送时间
	optional RoleMailParam param = 8;
	optional MailItem item_list = 9;
}

message RoleSimpleMailExt
{
	optional uint64 id				= 1; //唯一ID
	optional string send_name		= 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //发送者名字
	optional string content			= 3[(yd_fieldoptions.field_bufsize)=1024, (yd_fieldoptions.field_string_len)=1024]; //自定义邮件内容
	optional string title			= 4[(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64]; //邮件标题
	optional uint64 send_time		= 5; //发送时间
}

message RoleItemMailExt
{
	optional RoleSimpleMailExt simple_info	= 1;
	optional MailItem item_list 			= 2;
}

// 用来插入数据库的记录
message SingleDBMailInfo
{
	optional RoleSimpleMailExt simple_mail	= 1;
	optional RoleItemMailExt item_mail 		= 2;
}

// 内存保存的玩家邮件结构
// 降低内存，将邮件用两个结构来存
message RoleMailExtInfo
{
	repeated RoleSimpleMailExt simple_mail = 1[(yd_fieldoptions.field_arysize) = 30];
	repeated RoleItemMailExt item_mail     = 2[(yd_fieldoptions.field_arysize) = 20];
}

// 数据库中邮件新结构
message tbRoleNewMail
{
	required uint64 id						= 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //唯一ID
	required uint64 role_id 				= 2[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //收件者ID
	optional SingleDBMailInfo mail_info		= 3;
	optional uint64 send_time			    = 4; //发送时间
}


enum EventLogType
{
	EN_EVENTLOG_PAY_SUCCESS                 = 1;           //支付成功
	EN_EVENTLOG_ADD_ITEM                    = 2;	       //添加物品
	EN_EVENTLOG_TRADE_PLAYER_LOG            = 3;           // 珍宝阁的玩家数据
	EN_EVENTLOG_DEL_ITEM                    = 4;	       //添加物品
	EN_EVENTLOG_MARKET_SELL                 = 5;	       //市场出售物品成功
	EN_EVENTLOG_ADD_EQUIP                   = 6;	       //添加装备
	EN_EVENTLOG_DEL_EQUIP                   = 7;	       //删除装备
	EN_EVENTLOG_DEL_SNS_GROUP               = 8;           //离开群组（被踢、解散）
	EN_EVENTLOG_RECOVER_EQUIP               = 9;           //恢复装备
	EN_EVENTLOG_GUILD_BOSS_SALE_ROLE_CHANGE = 10;          //竞拍返还金币
	EN_EVENTLOG_GUILD_BOSS_SALE_REWARDS     = 11;          //竞拍奖励
	EN_EVENTLOG_ADD_TITLE                   = 12;          //添加称号
	EN_EVENTLOG_DEL_TITLE                   = 13;          //删除称号
	EN_EVENTLOG_SEALED_PLAYER               = 14;          //封号
	EN_EVENTLOG_SILENT_PLAYER               = 15;          //禁止
	EN_EVENTLOG_ADD_DIAMOND                 = 16;          //添加钻石
	EN_EVENTLOG_SEND_MSG_WINDOW				= 17;		   //玩家弹窗提示
	EN_EVENTLOG_MOD_DIAMOND					= 18;		   //修改钻石
	EN_EVENTLOG_MOD_NAME					= 19;		   //修改名字
	EN_EVENTLOG_FORBIDDEN_RANK				= 20;		   //禁止排行
	EN_EVENTLOG_FORBIDDEN_ACT				= 21;		   //禁止玩法
	EN_EVENTLOG_ADD_GIFT                    = 22;          //添加礼物记录

	EN_EVENTLOG_MAX                         = 23;		   //最大值，如果超了修改更新
}

message EventLogSealedPlayer
{
	optional int32 time = 1;    //封号时间
}

message EventLogSilentPlayer
{
	optional int32 time = 1;           //封号时间
	optional ChatChannel channel = 2;  //禁言频道
}


message EventLogPay
{
	optional uint32 create_time = 1;                    //订单创建时间
	optional uint32 pay_price = 2;					   //订单支付金额
	optional uint32 pay_id = 3;						   //订单商品id
}


message EventLogAddItem
{
	repeated ItemGridCSData item_list = 1 [(yd_fieldoptions.field_arysize) = 10];
	optional enItemChangeReason reason = 2;
	optional int32 add_diamond = 3; //赠送的钻石
}


message EventLogDelItem
{
	repeated Item item_list = 1 [(yd_fieldoptions.field_arysize) = 10];
	optional enItemChangeReason reason = 2;
	optional int32 del_diamond = 3; //赠送的钻石
}


message EventLogMarketSell
{
	required tbMarketGoods goods = 1;  //成功出售的商品
	optional uint64 buyer_roleid = 2;  //购买者id
}

message EventLogDelEquip
{
	required int64 equip_id = 1; //装备UUID
	optional enItemChangeReason reason = 2;
}

message EventLogRecoverEquip
{
	required string equip_data = 1[(yd_fieldoptions.field_bufsize)=2048, (yd_fieldoptions.field_string_len)=2048]; //装备数据
	optional enItemChangeReason reason = 2;
}

message EventLogQuitSnsGroup
{
	required uint64 group_id = 1;   //群组id
}

message EventLogGuildBossSaleRoleChange
{
	optional int32 item_id = 1;
	optional int32 sale_gold = 2;
}

message EventLogGuildBossSaleRewards
{
	optional string buy_role_name = 1[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional int32 item_id = 2;
	optional int32 buy_gold = 3;
	optional int32 reward_gold = 4;
}

message EventLogAddTitle
{
    optional int32 id         = 1; //称号ID
	optional int32 time       = 2; //称号时间 0表示永久
	optional int32 attr_time  = 3; //属性时间 0表示永久
}

message EventLogDelTitle
{
    optional int32 id = 1; //称号ID
}

message EventLogAddGift
{
    optional GiftOne gift = 1; //礼物信息
}

message EventLogAddDiamond
{
	optional int32 add_num = 1;   //添加钻石数量
}

message EventLogSendMsgWindow
{
	optional string msg 	= 1[(yd_fieldoptions.field_bufsize)=1024, (yd_fieldoptions.field_string_len)=1024];
}

message EventLogModifyDiamond
{
	optional int32 mod_num			= 1;	// 修改的数量，正数是加，负数是扣
	optional bool is_bind			= 2;	// true为绑定钻石
	optional enItemChangeReason reason = 3;
}

message EventLogModifyName
{
	optional string name 	= 1[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional string reason 	= 2[(yd_fieldoptions.field_bufsize)=512, (yd_fieldoptions.field_string_len)=512];
}

message EventLogForbiddenRank
{
	optional enIDIPRankForbiddenType type		= 1;
	optional int32 forbidden_time				= 2;
	optional string reason 	= 3[(yd_fieldoptions.field_bufsize)=512, (yd_fieldoptions.field_string_len)=512];
}

message EventLogForbiddenAct
{
	optional enIDIPActivityForbiddenType type		= 1;
	optional int32 forbidden_time				= 2;
	optional string reason 	= 3[(yd_fieldoptions.field_bufsize)=512, (yd_fieldoptions.field_string_len)=512];
}

message EventLogData
{
	optional EventLogType                    event_type     	= 1;
	optional EventLogPay                     pay_msg        	= 2;  //支付成功
	optional EventLogAddItem                 add_item       	= 3;  //添加物品   
	optional EventLogDelItem                 del_item       	= 4;  //删除物品   
	optional EventLogMarketSell              market_sell    	= 5;  //市场出售成功 
	optional EventLogDelEquip                del_equip      	= 7;  //删除装备
	optional EventLogQuitSnsGroup            quit_sns_group 	= 8;  //离开群组
	optional EventLogRecoverEquip            recover_equip  	= 9;  //恢复装备 
	optional EventLogGuildBossSaleRoleChange role_change    	= 10; //竞拍返还金币
	optional EventLogGuildBossSaleRewards    sale_rewards   	= 11; //竞拍奖励
	optional EventLogAddTitle                add_title      	= 12; //添加称号
	optional EventLogDelTitle                del_title      	= 13; //删除称号
	optional EventLogSealedPlayer            sealed_player  	= 14; //封号
	optional EventLogSilentPlayer            silent_player  	= 15; //禁言
	optional EventLogAddDiamond              add_diamond    	= 16; //添加钻石
	optional EventLogSendMsgWindow			 send_msg_window 	= 17; //发送弹窗消息
	optional EventLogModifyDiamond			 mod_diamond		= 18; //修改钻石
	optional EventLogModifyName				 mod_name			= 19; //修改名字
	optional EventLogForbiddenRank		     forbidden_rank     = 20; //禁止排行
	optional EventLogForbiddenAct			 forbidden_act		= 21; //禁止某个玩法
    optional EventLogAddGift                 add_gift           = 22; //添加礼物记录
}


message tbEventLog
{
	required uint64 role_id = 1 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	required uint64 msg_id = 2 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional int32  create_time = 3;                                                                     //创建时间
	optional int32  expire_time = 4;                                                                     //过期时间
	
	optional EventLogData data = 11;												                     //数据
	optional TradePlayerDepositEvent trade = 16;                                        				 //玩家的珍宝阁数据
}

message AuctionRankInfo
{
    optional GradeInfo grade_info  = 1;
	optional int32     win_count   = 2;
	optional int32     fight_count = 3;
	optional int32     serial      = 4;
}

message GuildBattleRankInfo
{
    optional int32 win_count   = 1;
	optional int32 fight_count = 2;
}

message RankInfo 
{
	optional int32                    rank            = 1;
	optional uint64                   role_id         = 2;
	optional uint64                   exp             = 3;
	optional string                   role_name       = 6;
    optional int32                    trans_id        = 29; // 转职职业

    optional int32                    level           = 15; //等级

    optional int32                    job             = 23; // 职业
    optional string                   guild_name      = 14; //公会
	optional uint32 				  fight_value	  = 25;	// 行会战力
    optional int32                    guild_member_count = 42;

	optional int32                    pvp_1v1_grade   = 31;
	optional int32                    pvp_1v1_star    = 32;

    optional int32                    tower_floor     = 33;
    optional int32                    tower_time      = 34;

    optional ItemGridCSData           weapon = 44;

    optional uint64                    achieve_point = 46;
}

//联合主键
message tbFriend
{
	required uint64 role_id   			= 1 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //角色ID
//	optional MyFriendInfo friendinfo	= 2;
}

enum ChallengeType
{
    ChallengeType_NONE    = 0[(yd_fieldoptions.field_enum_cname) = "无"];              //无
    ChallengeType_COMBOS  = 1[(yd_fieldoptions.field_enum_cname) = "最大连击数"];      //最大连击数
    ChallengeType_HURT    = 2[(yd_fieldoptions.field_enum_cname) = "受到的总伤害"];    //受到的总伤害
    ChallengeType_HP      = 3[(yd_fieldoptions.field_enum_cname) = "任一角色剩余血量"];//任一角色剩余血量
    ChallengeType_BUFF    = 4[(yd_fieldoptions.field_enum_cname) = "BUFF"];            //BUFF
    ChallengeType_SKILL   = 5[(yd_fieldoptions.field_enum_cname) = "被技能命中"];      //被技能命中
    ChallengeType_MONSTER = 6[(yd_fieldoptions.field_enum_cname) = "被怪物击中"];      //被怪物击中
}

enum enRiftMapType
{
	EN_RIFT_NORMAL_MAP = 1; //常规地图
	EN_RIFT_BOSS_MAP   = 2; //秘境BOSS地图
}
message RiftDataHeroOne
{
	optional int32 hero_id = 1;
	repeated CSAttr attr_list = 2 [(yd_fieldoptions.field_arysize)=168];//属性列表	

}
message RiftData
{
	optional int32 rift_score = 1; //秘境积分 初始为0 切换地图使用
	optional int32 rift_floor = 2; //秘境层数
	optional int32 rift_key = 3; //秘境钥匙(废弃)
	optional int32 rift_time = 4; //秘境通关时间
	optional enRiftMapType map_type = 5; //秘境地图类型
	optional bool reset_map = 6; //秘境地图重置
	optional uint64 ulLastResetMapTime = 7; //上次重置地图时间(1970 秒单位)
	optional int32 active_hero_id = 8;
	repeated RiftDataHeroOne hero_list = 9[(yd_fieldoptions.field_arysize)=2];
	optional int32 level_id = 10;
	optional int32 theme = 11; 
	repeated int32 rift_buff = 12[(yd_fieldoptions.field_arysize)=10]; //每日强化
};

message SouBoxClick
{
	required int32	index = 1;		//点击匣子编号
	required uint64 role_id = 2;
	optional string role_name 			= 3[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
	required uint64 click_time 		= 4;
}

message GuildPublishHelpItemInfo
{
	optional int32 id					= 1;	// 物品id
	optional int32 count				= 2;	// 请求次数														// 玩家id
	optional uint64 time				= 3;	// 请求的开始时间
}

message GuildMemberRebateData
{
	optional enGuildMemTitle last_title		= 1;		// 上一次满足最低任职天数要求的职位
	optional int32 last_title_time			= 2;		// 上一次在职的时间
}

message GuildMember
{
	required uint64 role_id 				= 1;
	required enGuildMemTitle title 			= 2;	//职位
	required int32 week_tax					= 3;	//周贡献
	required int32 total_tax				= 4;	//历史共获得贡献
	optional int32 level 					= 5;	//等级
	optional int32 avatar_id 				= 6;	//等级
	optional string role_name 				= 7[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
	optional uint64 last_logout_time		= 8;	//最后下线时间。 = 0表示在线
	optional uint64 join_title_time			= 9;	// 在职的开始时间
	optional uint64	join_time 				= 10;

	optional enProfessionType profession	= 11[default=EN_PROFESSION_A]; // 职业
	optional int32 guild_bonus				= 12;	// 分红
	optional uint64 last_guild_fight_time	= 13;	// 上一次记录战斗力的时间
	optional int32 last_fight_value			= 14;	// 上一次记录的战斗力
	optional GuildMemberRebateData rebate_data	= 15;	// 返利相关数据
	optional int32 transfer_id              = 16;   //转职ID
	optional int32 division					= 17;	//段位
}
 
message GuildApply
{
	required uint64 role_id 				= 1;
	required uint64 apply_time 				= 2;
	optional int32 level 					= 3;	//等级
	optional int32 avatar_id				= 4;
	optional int32 ce						= 5;
	optional string role_name 				= 6[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名	
	optional enProfessionType profession	= 7;	// 职业
	optional int32 tranfer_id               = 8;    //转职ID
	optional int32 division					= 9;	//段位
}

enum enGuildApplySet
{
	EN_GUILD_APPLY_NONE				= 0; //
	EN_GUILD_APPLY_NORMAL			= 1; //正常
	EN_GUILD_APPLY_BEINVITED	   = 2; //被邀请
	EN_GUILD_APPLY_CLOSED	    	= 3; //关闭
	EN_GUILD_APPLY_AUTO_JOIN		= 4;	//自动加入
}

message GuildMemData
{
	repeated GuildMember member 			= 1[(yd_fieldoptions.field_arysize) = 300];	// 所有成员
	optional int32 vice_president_cnt 		= 2;	// 当前副会个数
	optional int32 simple_member_cnt		= 3;	// 普通组员个数
	optional int32 high_level_cnt			= 4;	// 精英个数
}

message GuildApplyData
{
	repeated GuildApply  apply 			= 1[(yd_fieldoptions.field_arysize) = 100];	

}

enum enAchieveChallenge
{
	EN_Achieve_Challenge_continue		= 0; //挑战目标继续
	EN_Achieve_Challenge_fail			= 1; //挑战目标失败
	EN_Achieve_Challenge_succ			= 2; //挑战目标达成
}

message BattleChallengeInfoNtf
{
	required uint64 battle_id = 1; //战斗ID
	required uint64 role_id = 2; //角色ID
	optional ChallengeType achieve_challenge_type = 3; //ChallengeType
	optional enAchieveChallenge is_achieve_challenge = 4;	//是否完成挑战目标
	optional int32 challenge_argv1 = 5; //challenge参数1
	optional int32 challenge_argv2 = 6; //challenge参数2
}

// 行会建筑类型
enum eGuildArchType
{
	EN_ARCHI_SHOP			= 1;	// 公会商店
	EN_ARCHI_ATTR			= 2;	// 公会属性
	EN_ARCHI_BOSS 			= 3;	// 公会BOSS
	EN_ARCHI_MAIN			= 4;	// 主城
}

// 小类型的积分(单个玩家限制)
message GuildScoreTypeLimitData
{
	optional int32 id					= 1;	// 表格里面的编号
	optional int32 cur_score			= 2;	// 当前的积分
	repeated uint64 role_id				= 3[(yd_fieldoptions.field_arysize) = 300];
}

// 小类型的积分(无玩家限制)
message GuildScoreTypeData
{
	optional int32 id					= 1;	// 表格里面的编号
	optional int32 cur_score			= 2;	// 当前的积分
}

// 行会返利相关
message GuildRebateData
{
	optional int32 act_score 			= 1;	// 活跃积分
	optional int32 social_score			= 2;	// 社交积分
	repeated GuildScoreTypeLimitData limit_data	= 3[(yd_fieldoptions.field_arysize) = 5];
	repeated GuildScoreTypeData unlimit_data	= 4[(yd_fieldoptions.field_arysize) = 10];
	optional int64 consume_all			= 5;	// 消费总额
	repeated uint64 consume_role		= 6[(yd_fieldoptions.field_arysize) = 300];	// 消费过的玩家
}

message GuildBaseInfo
{
	required uint64 id 						= 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];		//唯一ID
	optional uint32 avatar_id				= 2; //公会头像
	optional uint64 guild_coin				= 3; //公会币
	optional enGuildStatus	status			= 4; //公会状态
	optional enGuildApplySet apply_set  	= 5; //公会申请设置
	optional string name 					= 6 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //公会名
	optional string notice 					= 7 [(yd_fieldoptions.field_bufsize)=128, (yd_fieldoptions.field_string_len)=128]; //公告
	optional uint64 create_time 			= 8;
	optional uint64 guild_bonus				= 9; // 公会分红
	optional int32 guild_hot				= 10[default=100]; // 公会人气
	optional bool is_new					= 11; // 是否弹劾过会长
	optional int32 sequence_id				= 12; // 前端显示的唯一id
	optional uint32 guild_fight_value		= 13; // 行会战斗力
	repeated GuildArchitectureInfo arc_info = 14[(yd_fieldoptions.field_arysize) = 4];	// 建筑信息，用建筑类型的做索引
	optional GuildRebateData rebate_data	= 15;	// 返利
    optional QQGroupInfo qq_gpinfo          = 16; //QQ绑定的群
    optional GuildAttrArrayInfo attr_data   = 17; //升级的公会属性
}

message GuildMiscInfo
{
	optional int32 mem_num					= 1;
	optional int32 mem_online_num			= 2;
	optional bool is_apply					= 3;
	optional int32 vice_president_cnt 		= 4;	// 当前副会个数
	optional int32 simple_member_cnt		= 5;	// 普通组员个数
	optional int32 high_level_cnt			= 6;	// 精英数量
	optional int64 all_act_score			= 7;	// 行会总活跃
}

message RedEnvelopesObtainUser
{
	required string obtain_user = 1[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];// 领取红包的用户
	optional uint32 obtain_coin = 2;		// 获得的金币数
	optional uint64 obtain_uid = 3; // user id
	optional uint32 obtain_header = 4; // 头像Id
	optional int32 transfer_id	= 5;
}

message GuildRedEnvelopesInfo
{
	required uint64 id				=	1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];		//红包唯一ID
	optional uint64 sender_id		=	2;	//	发送者 id 
	optional string sender_name		=	3[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; // 发送人名字
	optional uint32 header_id		=	4;  // 头像id
	optional int32 transfer_id		=   5;
	
	optional uint32 create_time		=	6;	//	红包发送时间
	optional uint32 item_id			=	7;	//  红包物品id (备用)
	optional uint32 sum_coin		=	8;	//	红包最后的总金额
	optional string word			=	9[(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64];	//	发红包的祝福语
	repeated RedEnvelopesObtainUser obtain_users = 10[(yd_fieldoptions.field_arysize) = 20];
	optional uint32 total_num		=   11 ; //红包拆成多少个
}

message GuildRedEnvelopesData
{
	repeated GuildRedEnvelopesInfo guild_redEnvelopes = 1[(yd_fieldoptions.field_arysize) = 200];
}

enum enGuildEvent
{
	EN_GUILD_EVENT_NONE							= 0;
	EN_GUILD_EVENT_ENTER						= 1;	//加入
	EN_GUILD_EVENT_QUIT							= 2;	//退出
	EN_GUILD_EVENT_FIRE							= 3;	//请离
	EN_GUILD_EVENT_CONSUME						= 4;	//维护消耗
	EN_GUILD_EVENT_UPGRADE						= 5;	//公会升级
	EN_GUILD_EVENT_CONSUME_ERR					= 7;	//维护消耗资金不足
	EN_GUILD_EVENT_PRESIDENT_CHANGE 			= 8;
	EN_GUILD_EVENT_CREATE_READY					= 9;	//创建并响应ok
	EN_GUILD_EVENT_INHERIT_PRESIDENT			= 10;	//太久没有上线，被弹劾，被其他成员接任
	EN_GUILD_EVENT_SIGN_CHANGE					= 11;	//宣言修改
	EN_GUILD_EVENT_VICE_PRESIDENT_CHANGE 		= 12;	//副会长任命
	EN_GUILD_EVENT_MERGE_GUILD 					= 13;	//合并公会
	EN_GUILD_EVENT_HIGH_LEVEL_CHANGE 			= 14;	//精英任命
	EN_GUILD_EVENT_UPGRADE_SHOP					= 15;	//公会商店建筑升级
	EN_GUILD_EVENT_UPGRADE_ATTR					= 16;	//公会属性建筑升级
	EN_GUILD_EVENT_UPGRADE_BOSS					= 17;	//公会BOSS建筑升级
	EN_GUILD_EVENT_GUILD_ATTR_UPGRADE			= 18;	//行会属性升级
}

message GuildEventParam
{
	repeated string mail_name = 1[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_arysize) = 3];
}

message GuildEvent
{
	required enGuildEvent type = 1;	//类型
	optional uint64 event_time = 2;	//事件发生时间
	optional GuildEventParam str_param = 3;	// 字符参数
}

message tbGuildEvent
{
	required uint64 guild_id							= 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];		// 行会id
	required uint64 uuid 								= 2[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];		// 唯一id
	optional uint64 event_time 							= 3;	//事件发生时间
	optional GuildEvent event_data						= 4;
}

message GuildEventData
{
	repeated GuildEvent event_list = 1[(yd_fieldoptions.field_arysize) = 1000];
}

enum enGuildactivityStatus
{
	EN_GUILD_ACTIVITY_PREPARE 	= 1;
	EN_GUILD_ACTIVITY_READY		= 2;
	EN_GUILD_ACTIVITY_START		= 3;
	EN_GUILD_ACTIVITY_END		= 4;
}

message GuildActivityCompetition
{
    repeated uint64 day_info = 1 [(yd_fieldoptions.field_arysize) = 7];
}

message GuildMergeInfo
{
	repeated uint64 merge_guild							= 1 [(yd_fieldoptions.field_arysize) = 100];					// 申请与我们合并的公会 
}

message GuildActivityData	//公会活动
{
	optional GuildActivityCompetition competition_info  = 1; //公会战
	optional GuildRedEnvelopesData red_envelopes_data 	= 2[(yd_fieldoptions.field_bufsize)=262144];	// 公会红包
}

message tbGuild
{
	required uint64 id 									= 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];		// 唯一ID
	optional GuildBaseInfo base_info					= 2; 															// 公会基本信息
	optional GuildMemData member_data 					= 3[(yd_fieldoptions.field_bufsize)=131072];					// 公会成员
	optional GuildApplyData  apply_data 				= 4;															// 申请列表
	optional GuildActivityData activity_data 			= 5[(yd_fieldoptions.field_bufsize)=196608];  					// 公会活动
	optional int64 day_refresh_next_time				= 6;															// 公会日刷新下一次刷新的时间 
	optional GuildMergeInfo merge_guild					= 7;															// 申请与我们合并的公会 
	optional int64 week_refresh_next_time				= 8;															// 公会周刷新下一次刷新的时间
};
/*------------------------------------------------------------------------------------------------*/
message GuildInfo		//公会简要信息
{
	optional uint64 guild_id = 1;
	optional string name = 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //公会名	
};

message GuildRoleInfo
{
	optional uint64 role_id = 1;
	optional string name = 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名	
	optional int32 avatar_id = 3;
};

message GuildWarTeam
{
	optional int32 id = 1;
	optional uint64 guild_id = 2;
	optional int32  action_point = 3;  //本队行动点
	optional uint64 battle_start = 4;
	optional uint64 battle_end = 5;
	repeated GuildRoleInfo role_list = 6[(yd_fieldoptions.field_arysize) = 3]; //出战阵容
	
}

enum enClashLevel
{
	EN_CLASH_LV_LOW = 0;
	EN_CLASH_LV_MID = 1;
	EN_CLASH_LV_HIGH = 2;
}

message GuildWarEntryRole
{
	required uint64 role_id 					= 1; //角色唯一ID
	optional string name 						= 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
	optional int32 level							= 3;
	optional bool online							= 4;
	optional int32 team_id 						= 5; 	//= -1表示没有组
	optional int32 avatar_id					= 6;
}

message GuildWarClashSide
{
	optional uint64 guild_id = 1;
	optional string name = 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //名	
	optional int32 score		= 3; //分数
	repeated GuildWarTeam team_list = 4[(yd_fieldoptions.field_arysize) = 10];
	repeated GuildWarEntryRole entry_role_list = 5[(yd_fieldoptions.field_arysize) = 100];  //确认资格的公会成员
	optional int32 fighting_team_size = 6;
}
message GuildWarBattle
{
	optional bool end 	= 1;
	optional uint64 room_id = 2;
	optional int32 team_blue_id = 3;
	optional int32 team_red_id = 4;
	optional uint64 battle_start = 5;
	optional uint64 battle_end = 6;	

	optional enCampType result = 7; // =胜利方
	optional GuildInfo blue_guild = 8;
	optional GuildInfo red_guild = 9;
	repeated GuildRoleInfo blue_role_list = 10[(yd_fieldoptions.field_arysize) = 3];
	repeated GuildRoleInfo red_role_list = 11[(yd_fieldoptions.field_arysize) = 3];
}

message GuildWarClash	//对阵冲突双方
{
	optional GuildWarClashSide  side_blue = 1;	//
	optional GuildWarClashSide  side_red = 2; 
	optional uint64 victory_guild = 3; //获胜方
	optional enClashLevel clash_level = 4; 
	repeated GuildWarBattle battle_record = 5[(yd_fieldoptions.field_arysize) = 50]; 
};

message GuildWarSchedule	//公会战对阵表
{
	optional bool end						= 1;
	optional int32  week_day = 2;  // 周几,5, 6,7
	optional uint64 start_time = 3;
	optional uint64 end_time = 4;
	repeated GuildWarClash clash_list = 5[(yd_fieldoptions.field_arysize) = 100];

	optional	uint64 confirm_start_time = 6;	//参赛资格确认起始时间,  
	optional	uint64 confirm_end_time = 7;		//参赛资格确认结束时间
	optional	uint64 guild_formation_start_time = 8;	//公会出战阵容设置起始时间,
	optional	uint64 guild_formation_end_time = 9;		//公会出战阵容设置结束时间	
};

message GuildWarWeekTime
{
	optional	uint64 start_time = 1;	//起始时间,
	optional	uint64 end_time = 2;		//结束时间
	optional	uint64 apply_start_time = 3;	//报名起始时间, 季后赛不用报名
	optional	uint64 apply_end_time = 4;		//报名结束时间
	optional	uint64 formation_start_time = 5;	//个人出战阵容设置起始时间,
	optional	uint64 formation_end_time = 6;		//个人出战阵容设置结束时间	


}
message GuildWarJoinGuild
{
	optional uint64 guild_id = 1;
	optional string name = 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //公会名	
	optional int32 score = 3;	//当届总积分
	optional int32 elo_value = 4; //匹配值，
};
message GuildWarWeek	//公会战每周信息
{
	optional int32 week_id					= 1; //week序列, 从0开始， 3就是季后赛了
	optional GuildWarWeekTime time_info = 2;
	repeated GuildWarJoinGuild guild_entry_list = 3[(yd_fieldoptions.field_arysize) = 300];  //本周报名参赛的公会, 季后赛系统会设置好，不允许报名
	optional GuildWarSchedule fri_schedule = 4;
	optional GuildWarSchedule sat_schedule = 5;  
	optional GuildWarSchedule sun_schedule = 6;     
};

message GuildWarChampion
{
	optional int32 id = 1;
	optional uint64 start_time = 2;
	optional uint64 end_time = 3;
	optional GuildInfo guild_info = 4;
};

enum enGuildWarStatus		//公会战当前进度
{
	EN_GUILD_WAR_WEKK_1 = 1;
	EN_GUILD_WAR_WEKK_2 = 2;
	EN_GUILD_WAR_WEKK_3 = 3;
	EN_GUILD_WAR_WEKK_play_offs = 4;		//季后赛
	EN_GUILD_WAR_END		= 5;	//已经结束
};

message GuildWarJoinGuildData
{
	repeated GuildWarJoinGuild join_guild_list = 1[(yd_fieldoptions.field_arysize) = 300];
}

message GuildWarData
{
	repeated GuildWarWeek war_list = 1[(yd_fieldoptions.field_arysize) = 4];
}

message tbGuildWar
{
	required int32 id = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional int32 status = 2;
	optional uint64 start_time = 3;		//真实开始时间
	optional uint64 end_time = 4;			//真实结束时间
	optional GuildWarData war_data = 5;
	optional GuildWarChampion champion = 6;   //冠军信息
	optional GuildWarJoinGuildData join_guild_data = 7; //参赛过的所有队伍信息
};

enum enLevelDifficulty
{
	E_Level_Difficulty_None = 0;
	E_Level_Difficulty_Normal = 1[(yd_fieldoptions.field_enum_cname) = "普通"];
	E_Level_Difficulty_Hard = 2[(yd_fieldoptions.field_enum_cname) = "困难"];
	E_Level_Difficulty_Nightmare = 3[(yd_fieldoptions.field_enum_cname) = "噩梦"];
	E_Level_Difficulty_Hell = 4[(yd_fieldoptions.field_enum_cname) = "地狱"];
}


enum enMatchGameType
{
    EN_MATCH_GAME_TYPE_NONE     = 0;
    EN_MATCH_GAME_TYPE_PARTNER  = 1;
    EN_MATCH_GAME_TYPE_SKYARENA = 2;
    EN_MATCH_GAME_TYPE_1V1      = 3;
    EN_MATCH_GAME_TYPE_1V1_AI   = 4; // 1v1 寻找AI
}
enum enPlayerMatchState
{
    MATCH_STATE_NONE                = 0;
    MATCH_STATE_MATCHING            = 1;  //匹配中 GameSvr 使用
    MATCH_STATE_MATCHING_TEAM       = 11; // 匹配服内部状态 MatchSvr 使用
    MATCH_STATE_MATCHING_RIVAL      = 12;
    MATCH_STATE_MATCHING_COMFIRM    = 13;
    MATCH_STATE_MATCHING_IN_QUEQE   = 14; // 等待队列 
    MATCH_STATE_PREPARE             = 2;  //开始锁定状态
    MATCH_STATE_FIGHTING            = 3;  //战斗中
    MATCH_STATE_TIMEOUT             = 4;
    MATCH_STATE_COMFIRM_TIMEOUT     = 21; // 确认超时
    MATCH_STATE_CANCLED             = 5;  // 
    MATCH_STATE_ERROR               = 6; // 
}

message PlayerMatchSimpleInfo
{
    required uint64     role_id = 1; // role_id
    required int32      mmr = 2;
    optional int32      job_id = 3;
    optional int32      level  = 4;
    optional int32      trans_id  = 5;
}

message MatchConfirmInfo
{
    required uint64 role_id = 1;
    optional bool   confirmed = 3;

    optional int32  job_id = 6;
    optional int32  level  = 7;

    optional string name = 8;
    //[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
	optional int32 transfer_id = 9; //转职ID
}

message MatchMiscInfo
{
    optional uint64 last_matched_team_id = 5;
	optional string name = 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
}

message PlayerMatchFullInfo
{
    repeated PlayerMatchSimpleInfo team_member_info = 1[(yd_fieldoptions.field_arysize)=3];
    required int32   mmr = 2;
    optional uint64  team_id = 4;
    optional MatchMiscInfo misc_info = 6;
}

message tbName
{
	optional string account_id = 1 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];// 玩家的账号id，游客(iemi+mac),fbid
	optional string name = 2 [(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64, (yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //角色名
	optional uint64 role_id = 3;
};

message tbRiftSeasonData
{
	required int32 id = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //赛季轮数
	optional int32 nseason = 2; //赛季轮数
	optional int32 tseason = 3; //赛季时间
	optional int32 theme = 4; //赛季主题
}

message BangPlayer
{
	repeated uint64 bang_player = 1[(yd_fieldoptions.field_arysize) = 65535]; //点赞过的玩家
}

message tbHeroCommentData
{
	required uint64 comment_id = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //评论ID
	optional uint32 hero_id = 2; //英雄ID
	optional string comment = 3 [(yd_fieldoptions.field_bufsize)=156, (yd_fieldoptions.field_string_len)=156]; //评论
	optional int32 time = 4; //评论发布时间
	optional int32 bang = 5; //点赞数目
	optional BangPlayer bang_player = 6; //点赞过的玩家
	optional uint64 comment_player_id = 7;
	optional string comment_player_name = 8 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional int32 top_three_rank = 9; 
}

message tbMPveCharpterID
{
	required int32 id = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; 
	optional int32 charpter_id = 2;
	optional int32 charpter_gen_time = 3;
}

enum enTeamPlayerState
{
	E_Team_Player_State_Follow = 1; //跟随队长状态，对战自己也属于这个状态
	E_Team_Player_State_Not_Follow = 2; //暂离状态
}

enum enTeamPlayerDelayOp
{
	E_Team_Player_Delay_Op_None = 0;
	E_Team_Player_Delay_Op_Not_Follow = 1; //离开战场暂离
	E_Team_Player_Delay_Op_Quit_Team = 2; //离开战场时离队
}


message TeamMember
{
	required uint64              role_id        = 1;
	optional string              name           = 2  [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional int32               level          = 3;
	optional int32               rank           = 4;
	optional int32               elo            = 5;
	optional bool                is_leader      = 6;
	optional int32               position       = 7; 
	optional enTeamPlayerState   state          = 8  [default=E_Team_Player_State_Follow];   //每个成员的队伍状态
	optional int32               city_hero_id   = 9;  //模型
	optional int32               prof           = 10; //职业
	optional enTeamPlayerDelayOp delay_op       = 11  [default=E_Team_Player_Delay_Op_None]; //离开战场时的操作
	optional int32               avatar_id      = 12; //头像
	optional int32               hp             = 13; //血量
	optional int32               max_hp         = 14; //最大血量
	optional int32               mp             = 15; //魔法
	optional int32               max_mp         = 16; //最大魔法
	optional int64               battle_id      = 17; //-1为不在战斗中，否则根据battle_id判断逻辑
	repeated int32               resource_count = 18 [(yd_fieldoptions.field_arysize) = 5];  //每个财宝的个数（用enTeamPlayerGetResourceType做索引）
	optional int32               cur_score      = 19; //当前关卡获得的积分
	repeated int32               fashions       = 20 [(yd_fieldoptions.field_arysize) = 7];  //时装
	optional bool                is_leave_state = 21; //是否离开状态
	optional bool                is_offline     = 22; //是否二次离线
	optional int32               voice_room_uid = 23[default = 0]; //语音房间内的uid
	optional enTeamVoiceState    voice_state    = 24[default = E_Team_Voice_State_Off]; //语音状态
	optional int32               transfer_id    = 25; //转职ID
}

enum CSTeamNotifyEvent
{
	CS_TEAM_NOTIFY_EVENT_CREATE              = 1;  //队伍创建
	CS_TEAM_NOTIFY_EVENT_JOIN                = 2;  //队伍加入
	CS_TEAM_NOTIFY_EVENT_QUIT                = 3;  //队伍退出
	CS_TEAM_NOTIFY_EVENT_KICK                = 4;  //踢人
	CS_TEAM_NOTIFY_EVENT_APPOINT_LEADER      = 5;  //转让队长
	CS_TEAM_NOTIFY_EVENT_APPLY_LEADER        = 6;  //申请带队
	CS_TEAM_NOTIFY_EVENT_SETTINGS_CHANGED    = 7;  //设置改变
	CS_TEAM_NOTIFY_EVENT_MEMBER_INFO_CHANGED = 8;  //队员信息有改动
	CS_TEAM_NOTIFY_EVENT_APPLY               = 9;  //队伍申请
	CS_TEAM_NOTIFY_EVENT_STATE_CHANGED       = 10; //队员状态有改变
	CS_TEAM_NOTIFY_EVENT_LOGIN               = 11; //重登同步, 必须全量
    CS_TEAM_NOTIFY_EVENT_CREATE_ON_INVITE    = 12; //因为邀请而创建
	CS_TEAM_NOTIFY_EVENT_DELAY_OP            = 13; //未来离开战场时的操作
	CS_TEAM_NOTIFY_EVENT_DISMISS             = 14; //队伍解散
	CS_TEAM_NOTIFY_EVENT_LEVEL_BEFORE        = 15; //离开组队前调用
	CS_TEAM_NOTIFY_EVENT_FASHION_CHANGE      = 16; //时装改变，更新时装
	CS_TEAM_NOTIFY_EVENT_STATE_LEAVE_CHG     = 17; //离开状态改变
	CS_TEAM_NOTIFY_EVENT_STATE_OFFLINE_CHG   = 18; //离线状态改变
	CS_TEAM_NOTIFY_EVENT_JOIN_VOICE_ROOM     = 19; //加入语音房间
	CS_TEAM_NOTIFY_EVENT_CHG_VOICE_STATE     = 20; //修改语音状态
}

enum OGOperationEvent
{
	OG_OPERATION_Query_Player = 1; 		//查询玩家等级
	OG_OPERATION_Query_Player_Item = 2; //查询玩家道具
	OG_OPERATION_Add_Player_Item = 3; 	//添加物品
	OG_OPERATION_Del_Player_Item = 4; 	//删除物品
	OG_OPERATION_Add_Player_Equip = 5; 	//添加装备
	OG_OPERATION_Del_Player_Equip = 6; 	//删除装备
	OG_OPERATION_Sealed_Player = 7;		//封停玩家
	OG_OPERATION_Kick_Player = 8;		//踢玩家下线
	OG_OPERATION_Recover_Player_Equip = 9;	//恢复玩家装备
	OG_OPERATION_Notice = 10; //公告
	OG_OPERATION_GM_Player_Mail = 11; //单人邮件
	OG_OPERATION_GM_Mail = 12; //群发邮件
	OG_OPERATION_QUESTIONNAIRE = 13; //问卷调查
	OG_OPERATION_LOGIN_NOTICE = 14; //登录公告
	OG_OPERATION_GM_MAIL_NEW = 15; //新的系统邮件
	OG_OPERATION_GM_PLAYER_MAIL_NEW = 16; //新的单人邮件
	OG_OPERATION_BIND_PHONE = 17; //绑定手机
	OG_OPERATION_Add_Diamond = 18;
	OG_OPERATION_Del_Diamond = 19;
	OG_OPERATION_Query_All_Role = 20;	// 查询账号下的所有角色
}

message Proto_RoomHeroInfo
{
    required int32 hero_id = 1;
    repeated int32 skill_list = 2[(yd_fieldoptions.field_arysize)=8];//技能列表
    required int32 debut_skill = 3; //入场技
}

message Proto_RoomPlayerInfo
{
    repeated Proto_RoomHeroInfo hero_list = 1[(yd_fieldoptions.field_arysize)=2];
}

enum enNpcFunctionType
{
	EN_FUNCTION_NPC_TYPE_NONE              = 0  [(yd_fieldoptions.field_enum_cname) = "无"];
    EN_FUNCTION_NPC_TYPE_TRANS             = 1  [(yd_fieldoptions.field_enum_cname) = "传送NPC"];
	EN_FUNCTION_NPC_TYPE_TRIGGER_BATTLE    = 2  [(yd_fieldoptions.field_enum_cname) = "战斗触发NPC"];
	EN_FUNCTION_NPC_TYPE_COLLECT           = 3  [(yd_fieldoptions.field_enum_cname) = "采集NPC"];
	EN_FUNCTION_NPC_TYPE_TASK              = 4  [(yd_fieldoptions.field_enum_cname) = "任务NPC"];
	EN_FUNCTION_NPC_TYPE_YUNBIAO           = 5  [(yd_fieldoptions.field_enum_cname) = "运镖NPC"];
	EN_FUNCTION_NPC_TYPE_SYZJ              = 6  [(yd_fieldoptions.field_enum_cname) = "誓约之境用"];
	
	EN_FUNCTION_NPC_TYPE_RIFT              = 8  [(yd_fieldoptions.field_enum_cname) = "秘境探险NPC"];
	EN_FUNCTION_NPC_ITEM_EXCHANGE          = 9  [(yd_fieldoptions.field_enum_cname) = "物品兑换NPC"];
	EN_FUNCTION_NPC_OPEN_PENAL             = 10 [(yd_fieldoptions.field_enum_cname) = "开面板NPC"];
	EN_FUNCTION_TRAP_CHALLENGE             = 11 [(yd_fieldoptions.field_enum_cname) = "陷阱塔挑战"];
    EN_FUNCTION_NPC_QUEST_EXP_CHAIN        = 12 [(yd_fieldoptions.field_enum_cname) = "修行任务链NPC"];
    EN_FUNCTION_NPC_MILITANT_MATCH         = 13 [(yd_fieldoptions.field_enum_cname) = "武斗大会"];
	
	EN_FUNCTION_NPC_AREA_TRIGGER           = 14 [(yd_fieldoptions.field_enum_cname) = "区域触发NPC"];
	
	EN_FUNCTION_NPC_MASTER_RELATION        = 15 [(yd_fieldoptions.field_enum_cname) = "拜师收徒"];
	EN_FUNCTION_NPC_MASTER_TASK            = 16 [(yd_fieldoptions.field_enum_cname) = "师徒任务"];
	EN_FUNCTION_NPC_TYPE_PARTNER_FIGHT     = 17 [(yd_fieldoptions.field_enum_cname) = "伙伴战斗"];
	EN_FUNCTION_NPC_TYPE_CORPS             = 18 [(yd_fieldoptions.field_enum_cname) = "战队"];
	EN_FUNCTION_NPC_TYPE_SKYARENA          = 19 [(yd_fieldoptions.field_enum_cname) = "天空竞技场"];
	EN_FUNCTION_NPC_TYPE_AIR_WALL          = 20 [(yd_fieldoptions.field_enum_cname) = "空气墙"];
	EN_FUNCTION_NPC_TYPE_RESOURCE          = 21 [(yd_fieldoptions.field_enum_cname) = "资源点NPC"];

	EN_FUNCTION_NPC_TYPE_GOLD_BOX		   = 22 [(yd_fieldoptions.field_enum_cname) = "暗金宝箱"];
	EN_FUNCTION_NPC_TYPE_SILVER_BOX		   = 23 [(yd_fieldoptions.field_enum_cname) = "白银宝箱"];	
	EN_FUNCTION_NPC_TYPE_CREATEFAMILY	   = 24 [(yd_fieldoptions.field_enum_cname) = "创建家族"];
	EN_FUNCTION_NPC_TAG_BEHAVIOR_TREE_NPC  = 25 [(yd_fieldoptions.field_enum_cname) = "标记执行行为树npc"];
	
	EN_FUNCTION_NPC_FAMILY_CELEMONY        = 26 [(yd_fieldoptions.field_enum_cname) = "家族仪式操作"]; 
	EN_FUNCTION_NPC_FAMILY_SERVE_GOODS     = 27 [(yd_fieldoptions.field_enum_cname) = "家族仪式上菜操作"]; 
	EN_FUNCTION_NPC_FAMILY_DINNER          = 28 [(yd_fieldoptions.field_enum_cname) = "家族用餐"]; 
	EN_FUNCTION_NPC_TYPE_ENTER_DUNGEON     = 29 [(yd_fieldoptions.field_enum_cname) = "进入副本"]; 
	EN_FUNCTION_NPC_GUILD_DANCE            = 30 [(yd_fieldoptions.field_enum_cname) = "行会跳舞开启"]; 
}

message ActivityRankInfo
{
    optional int32            rank           = 1;
    optional int32            score          = 2;
    optional string           name           = 3;
    optional uint64           role_id        = 4;

    optional MilitantRankInfo militant_info  = 5; //武斗大会信息
}

message FightOrder
{
    repeated uint64 role_list = 1 [(yd_fieldoptions.field_arysize) = 5];
}

enum enMilitantMatchRoomState
{
    EN_MILITANT_MATCH_ROOM_STATE_NONE  = 0;
    EN_MILITANT_MATCH_ROOM_STATE_WAIT  = 1;
    EN_MILITANT_MATCH_ROOM_STATE_MATCH = 2;
    EN_MILITANT_MATCH_ROOM_STATE_READY = 3;
    EN_MILITANT_MATCH_ROOM_STATE_MAX   = 4;
}

enum enMilitantType
{
    EN_MILITANT_TYPE_NONE   = 0;
    EN_MILITANT_TYPE_BRONZE = 1; //青铜
    EN_MILITANT_TYPE_SILVER = 2; //白银
    EN_MILITANT_TYPE_GOLD   = 3; //黄金
    EN_MILITANT_TYPE_MAX    = 4; 
}

message MilitantMatchInfo
{
    optional uint64 role_id   = 1;
    optional string name      = 2 [(yd_fieldoptions.field_arysize) = 64];
    optional int32  level     = 3; 
    optional bool   is_leader = 4;  
}

enum enTeamReadyType
{
	EN_TEAM_READY_TYPE_NONE              = 0; //默认
    EN_TEAM_READY_TYPE_PARTNER           = 1; //伙伴组队匹配
	EN_TEAM_READY_TYPE_SYNC_DUNGEON_INFO = 2; //同步副本信息
	EN_TEAM_READY_TYPE_START_DUNGEON     = 3; //开始副本
    EN_TEAM_READY_TYPE_SA                = 4; //天空竞技场组队匹配
	EN_TEAM_READY_TYPE_START_MULTI_LEVEL = 5; //开始连战
}

enum enLicenseSlotType
{
	EN_LST_ACTIVE_SKILL = 1;   //奥义槽
	EN_LST_PASSIVE_SKILL = 2;  //战略槽
}

// 家族基础信息
message RoleFamilyBase
{
	optional RoleFamilyTitle title			= 1;	// 称号
	optional string signature				= 2[(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64]; // 宣言
	optional int32 mem_max_count			= 3;	// 成员上限
	optional int32 family_degree			= 4;	// 家族值
	optional uint64 group_id				= 5;	// 家族群组id
}

message FamilyMemberInfo
{
	optional uint64 role_id					= 1;
	optional string name    				= 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional int32 level          			= 3;	// 等级
	optional uint32 avatar_id				= 4;	// 头像
	optional string memo_name		    	= 5[(yd_fieldoptions.field_bufsize)=16, (yd_fieldoptions.field_string_len)=16]; // 字号
	optional enProfessionType profession	= 6[default=EN_PROFESSION_NONE]; // 职业
	optional int32 transfer_id              = 7;    //转职ID
}

// 家族所有成员信息
message RoleFamilyMem
{
	repeated FamilyMemberInfo member		= 1[(yd_fieldoptions.field_arysize) = 20];
}

// 投票类型
enum enFamilyEventType
{
	EN_FAMILY_EVENT_NULL					= 0;	// 空事件(初始化用)
	EN_FAMILY_EVENT_MODIFY_TITLE			= 1;	// 修改称号
	EN_FAMILY_EVENT_INVITE_MEMBER			= 2;	// 接纳新人
	EN_FAMILY_EVENT_FIRE_MEMBER				= 3;	// 请离旧人
	EN_FAMILY_EVENT_LEAVE_FAMILY			= 4;	// 脱离家族
	EN_FAMILY_EVENT_ADD_COUNT				= 5;	// 扩充人数
}

message FamilyEventModifyTitle
{
	optional RoleFamilyTitle old_title		= 1;	// 久称号
	optional RoleFamilyTitle new_title		= 2;	// 新称号
	optional bool is_item					= 3;
}

message FamilyEventRoleLeave
{
	optional uint64 role_id					= 1;
	optional string reason    				= 2[(yd_fieldoptions.field_bufsize)=128, (yd_fieldoptions.field_string_len)=128];	// 请离原因
}

// 发起的事件申请
message FamilyEventInfo
{
	optional enFamilyEventType type			= 1[default=EN_FAMILY_EVENT_NULL];
	optional uint64 role_id					= 2;	// 发起者
	optional uint64 end_time				= 3;	// 结束时间
	repeated uint64 accept_mem				= 4[(yd_fieldoptions.field_arysize) = 20];	// 同意的人的id
	repeated uint64 refuse_mem				= 5[(yd_fieldoptions.field_arysize) = 20];	// 拒绝的人的id
	optional FamilyEventModifyTitle title	= 6;	// 修改称号
	repeated FamilyEventRoleInfo new_mem	= 7[(yd_fieldoptions.field_arysize) = 10];	// 接纳新人
	optional FamilyEventRoleLeave leave_mem	= 8;	// 请离旧人
	optional bool is_lock					= 9;	// 投票锁定
}

message tbRoleFamilyInfo
{
	optional uint64 uuid 					= 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; 
	optional RoleFamilyBase base_info		= 2;
	optional RoleFamilyMem mem_info			= 3;
	optional FamilyEventInfo event_info		= 4;

}

message FamilyGlobalData
{
	repeated SingleFamilyInviteData data	= 1[(yd_fieldoptions.field_arysize) = 1000];
}

message snsSkyarenaSeason
{
    optional int32      season_id = 2;
    optional uint32     season_start_time = 3;
    optional uint32     season_finish_time = 4;
}

message SnsMiscGlobalData
{
    optional snsSkyarenaSeason skyarena_season = 1;
    optional int32             pvp1v1_season = 2;
}

// 一定要保证顺序，而且不能相同数值的类型
// 记得修改相应的最大值
enum enSnsGlobalDataType
{
	EN_SNS_GLOBAL_FAMILY_DATA     			= 0; // 家族的全局数据
	EN_SNS_GLOBAL_MISC_DATA					= 1; // 杂项数据
	EN_SNS_GLOBAL_DATA_TYPE_MAX             = 5; 
}

message tbSnsGlobal
{
	optional int32 id4db = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; 
	optional SnsMiscGlobalData  content = 2;
}

message tbSnsFamilyGlobalData
{
	required int32 id4db= 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; 
    optional FamilyGlobalData data = 2[(yd_fieldoptions.field_bufsize)=524288];
    // 对应类型的二进制流数据,注意数据库blob数据的最大长度;
}


enum ECityBuffType
{
	E_CITY_BUFF_TYPE_NONE = 0[(yd_fieldoptions.field_enum_cname) = ""];
	E_CITY_BUFF_TYPE_OTHER = 1 [(yd_fieldoptions.field_enum_cname) = "其它"]; //其它
}

enum ECityBuffGroupType
{
	E_CITY_BUFF_GROUPE_TYPE_NONE = 0[(yd_fieldoptions.field_enum_cname) = ""];
	E_CITY_BUFF_GROUPE_TYPE_REPLACE = 1 [(yd_fieldoptions.field_enum_cname) = "替换式"];  //替换式
	E_CITY_BUFF_GROUPE_TYPE_FROZE = 2 [(yd_fieldoptions.field_enum_cname) = "冻结式"];    //冻结式
}

enum ECityBuffDurationType
{
	E_CITY_BUFF_DURATION_TYPE__NONE = 0[(yd_fieldoptions.field_enum_cname) = ""];
	E_CITY_BUFF_DURATION_TYPE_REAL_TIME = 1[(yd_fieldoptions.field_enum_cname) = "真实时间"]; //真实时间
	E_CITY_BUFF_DURATION_TYPE_ONLINE = 2[(yd_fieldoptions.field_enum_cname) = "在线时间"];  //在线时间
}

enum ECityBuffStackType
{
	E_CITY_BUFF_STACK_TYPE_EFFECT_NONE = 0[(yd_fieldoptions.field_enum_cname) = ""];
	E_CITY_BUFF_STACK_TYPE_EFFECT_OVERLAY = 1[(yd_fieldoptions.field_enum_cname) = "效果叠加型"]; //效果叠加型
	E_CITY_BUFF_STACK_TYPE_TIME_OVERLAY = 2[(yd_fieldoptions.field_enum_cname) = "时间叠加型"];  //时间叠加型
}


enum ECityBuffEffectType
{
	E_CITY_BUFF_EFFECT_TYPE_NONE = 0[(yd_fieldoptions.field_enum_cname) = ""];
	E_CITY_BUFF_EFFECT_TYPE_ZOOM = 1[(yd_fieldoptions.field_enum_cname) = "模型缩放"];   //模型缩放
	E_CITY_BUFF_EFFECT_TYPE_MOD_PROP = 2[(yd_fieldoptions.field_enum_cname) = "修改属性"];   //修改属性
}

enum ECityBuffRemoveType
{
	E_CITY_BUFF_REMOVE_TYPE_NONE = 0 [(yd_fieldoptions.field_enum_cname) = ""];
	E_CITY_BUFF_REMOVE_TYPE_ENTER_MAP = 1 [(yd_fieldoptions.field_enum_cname) = "进入场景移除"];   //进入场景
	E_CITY_BUFF_REMOVE_TYPE_OFFLINE = 2[(yd_fieldoptions.field_enum_cname) = "离线移除"];  //离线时
	E_CITY_BUFF_REMOVE_TYPE_ACCEPT_TASK = 3[(yd_fieldoptions.field_enum_cname) = "接受任务移除"]; //接受任务，放弃任务时需要移除？？
	E_CITY_BUFF_REMOVE_TYPE_COMPLETE_TASK = 4[(yd_fieldoptions.field_enum_cname) = "完成任务移除"]; //完成任务,(条件达成时)
	E_CITY_BUFF_REMOVE_TYPE_DELETE_TASK = 5[(yd_fieldoptions.field_enum_cname) = "删除任务移除"]; //删除任务时
	E_CITY_BUFF_REMOVE_TYPE_BY_CLIENT = 6[(yd_fieldoptions.field_enum_cname) = "手动移除"]; //手动移除
	E_CITY_BUFF_REMOVE_TYPE_LEAVE_MAP = 7 [(yd_fieldoptions.field_enum_cname) = "离开场景移除"];  
}

message tbGlobalMail
{
	required uint64 id			= 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //唯一ID
	optional string send_name	= 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //发送者名字（没有static_id值，就赋值）
	optional int32 static_id	= 3;														//邮件表格里的静态ID
	optional string content		= 4[(yd_fieldoptions.field_bufsize)=1600, (yd_fieldoptions.field_string_len)=1600]; //自定义邮件内容（没有static_id值，就赋值）
	optional string title		= 5[(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64]; //邮件标题（没有static_id值，就赋值）
	optional uint64 send_time	= 6; 														//发送时间
	optional uint64 end_time    = 7;
	optional RoleMailParam param = 8;
	optional MailItem item_list = 9;
	optional int32 min_lv		= 10;	// 最低等级
	optional int32 max_lv		= 11;	// 最高等级（0为无限制）
	optional uint32 min_time	= 12;	// 最低创建角色时间
	optional uint32 max_time	= 13;	// 最高创建角色时间（0为无限制）
	optional uint32 create_time	= 14; 														//邮件创建时间
}

enum ELoginAwardType
{
	ELOGIN_AWARD_TYPE_ITEM = 0 [(yd_fieldoptions.field_enum_cname) = "物品"];  
	ELOGIN_AWARD_TYPE_PARTNER = 1 [(yd_fieldoptions.field_enum_cname) = "伙伴"];
	ELOGIN_AWARD_TYPE_DIAMOND = 2 [(yd_fieldoptions.field_enum_cname) = "钻石"];
}

enum ESignInMonthlyType
{
	ESIGHINMONTHLY_TYPE_EVERYDAY = 0 [(yd_fieldoptions.field_enum_cname) = "每日"];  
	ESIGHINMONTHLY_TYPE_ACCUMULATE = 1 [(yd_fieldoptions.field_enum_cname) = "累计"];
}

enum enGlobalAwardType
{
    EN_GLOBAL_AWARD_TYPE_NONE                 = 0;
    EN_GLOBAL_AWARD_TYPE_SIX_EXPERIMENT_RANK  = 1;
	EN_GLOBAL_AWARD_TYPE_SIX_EXPERIMENT_SCORE = 2;
	EN_GLOBAL_AWARD_TYPE_MILITANT_MATCH_RANK  = 3;
	EN_GLOBAL_AWARD_TYPE_MILITANT_WIN_COUNT   = 4;
	EN_GLOBAL_AWARD_TYPE_MILITANT_FIGHT_COUNT = 5;
}

message GlobalAwardOne
{
    optional enGlobalAwardType type          = 1;
    optional uint64            role_id       = 2;
	optional enProfessionType  job           = 3;
	optional int32             level         = 4;
	optional int32             rank          = 5;
	optional enMilitantType    militant_type = 6;
	repeated int32             param_int     = 7 [(yd_fieldoptions.field_arysize) = 10];
}

message GlobalAwardList
{
    repeated GlobalAwardOne list  = 2 [(yd_fieldoptions.field_arysize) = 20000];
}
message tbGlobalAwardList
{
	required int32           id4db = 1 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional GlobalAwardList body  = 2 [(yd_fieldoptions.field_bufsize)=1600000];
}

message SvrHunterProfCount
{
	optional ENHunterProfType type				= 1[default=EN_HUNTER_PROF_NULL];
	optional int32 count						= 2;
}

message SingleGamePhotoFaceData
{
	optional string image_url	= 1[(yd_fieldoptions.field_bufsize)=256, (yd_fieldoptions.field_string_len)=256];
	optional string goto_url	= 2[(yd_fieldoptions.field_bufsize)=256, (yd_fieldoptions.field_string_len)=256];
	optional string goto_para	= 3[(yd_fieldoptions.field_bufsize)=256, (yd_fieldoptions.field_string_len)=256];
	optional string button_url	= 4[(yd_fieldoptions.field_bufsize)=256, (yd_fieldoptions.field_string_len)=256];
	optional string version		= 5[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional int32 start_time	= 6;
	optional int32 end_time		= 7;
	optional int32 min_lv		= 8;
	optional int32 max_lv		= 9;
	optional int32 min_recharge = 10;
	optional int32 max_recharge	= 11;
	optional int32 index		= 12;	// 如果为-1，就是没有赋值
}

// 游戏内拍脸图
message IDIPGamePhotoFaceData
{
	repeated SingleGamePhotoFaceData photo_face_array	= 1[(yd_fieldoptions.field_arysize) = 5];	
}

message PvP1v1GlobalData
{
	optional int32 season = 1;  //赛季ID
}

message GachaRecordOne
{
	optional uint64 role_id = 1;
	optional string name = 2 [(yd_fieldoptions.field_bufsize) = 32];
	optional int32 item_id = 3;
	optional int32 num = 4; 
}

message GachaRecordData
{
	repeated GachaRecordOne record = 1 [(yd_fieldoptions.field_arysize) = 100];
	optional int32 max_seq = 2;
}

message GlobalMiscData
{
	optional uint64 last_daily_update_time = 2; //每日上次刷新时间
	repeated SvrHunterProfCount prof_count = 3 [(yd_fieldoptions.field_arysize) = 10];// 统计服务器的猎人职业选择的个数
    optional int32  regist_account_count = 4; // 服务器注册人数
	optional IDIPGamePhotoFaceData photo_face_data = 5;
	optional PvP1v1GlobalData pvp_1v1_data = 6;
	optional GachaRecordData gacha_record = 7;
}

message tbGlobalMiscData
{
    required int32           id4db = 1 [(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
    optional GlobalMiscData body  = 2;
}

enum enAddPartnerReason
{
    EN_ADD_PARTNER_REASON_NONE     = 0;
    EN_ADD_PARTNER_REASON_ITEM     = 1;
    EN_ADD_PARTNER_REASON_GM       = 2;
    EN_ADD_PARTNER_REASON_UNLOCK   = 3;
    EN_ADD_PARTNER_REASON_QUEST    = 4;
    EN_ADD_PARTNER_REASON_ACTIVITY = 5;
}

enum enLearnPartnerSkillType
{
    EN_LEARN_PARTNER_SKILL_TYPE_NONE     = 0;
	EN_LEARN_PARTNER_SKILL_TYPE_NEW      = 1;
	EN_LEARN_PARTNER_SKILL_TYPE_REPLACE  = 2;
	EN_LEARN_PARTNER_SKILL_TYPE_LEVEL_UP = 3;
}

enum enMultiLevelState
{
    EN_MULTI_LEVEL_STATE_NONE    = 0;
    EN_MULTI_LEVEL_STATE_START   = 1;
    EN_MULTI_LEVEL_STATE_RUNNING = 2;
    EN_MULTI_LEVEL_STATE_END     = 3;
    EN_MULTI_LEVEL_STATE_FINISH  = 4;
}

enum enLoadState
{
    EN_NEED_LOAD = 1;
    EN_LOADING = 2;
    EN_LOAD_SUCESS = 3;
}

message QuestionnaireRewardItem
{
	repeated Item item_list = 1[(yd_fieldoptions.field_arysize)=8];
}

message SingleQuestionaireData
{
	optional int64 questionnaire_id = 1;
	optional int32 questionnaire_lv = 2;
	optional int64 start_time = 3;
	optional int64 end_time = 4;
	optional string title = 5[(yd_fieldoptions.field_bufsize)=256,(yd_fieldoptions.field_string_len)=256];
	optional string content = 6[(yd_fieldoptions.field_bufsize)=256,(yd_fieldoptions.field_string_len)=256];
	optional string url = 7[(yd_fieldoptions.field_bufsize)=256,(yd_fieldoptions.field_string_len)=256];
	optional QuestionnaireRewardItem reward_item = 8;
}

message QuestionnaireData
{
	repeated SingleQuestionaireData single_data = 1[(yd_fieldoptions.field_arysize)=5];
}

message tbQuestionnaireData
{
	optional int32 id4db 				 = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional QuestionnaireData data		 = 2;
}

enum enMultiLevelType
{
    EN_MULTI_LEVEL_TYPE_NONE    = 0;
	EN_MULTI_LEVEL_TYPE_NORMAL  = 1;
	EN_MULTI_LEVEL_TYPE_DUNGEON = 2;
}

message SingleLoginData
{
	optional int32 index = 1;
	optional uint64 begin_time = 2;
	optional uint64 end_time = 3;
	optional string title = 4[(yd_fieldoptions.field_bufsize)=256,(yd_fieldoptions.field_string_len)=256];
	optional string notice = 5[(yd_fieldoptions.field_bufsize)=8192,(yd_fieldoptions.field_string_len)=8192];
	optional bool is_pop = 6;
}

message IDIPLoginNotice
{
	repeated SingleLoginData data = 1[(yd_fieldoptions.field_arysize)=5];
}

message tbLoginNoticeData
{
	optional int32 id4db = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional IDIPLoginNotice notice = 2;
}

message tickDay
{
	repeated int32 day = 1[(yd_fieldoptions.field_arysize)=7];
}

message SingleRoundNotice
{
	optional int32 index = 1;
	optional uint64 begin_time = 2;
	optional uint64 end_time = 3;
	optional int32 tick_begin_time = 4;
	optional int32 tick_end_time = 5;
	optional int32 tick = 6;
	optional tickDay tick_day = 7;
	optional string notice = 8[(yd_fieldoptions.field_bufsize)=8192,(yd_fieldoptions.field_string_len)=8192];
}

message IDIPRoundNotice
{
	repeated SingleRoundNotice data = 1[(yd_fieldoptions.field_arysize)=5];
}

message tbNoticeData
{
	optional int32 id4db = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional IDIPRoundNotice notice = 2;
}

message BindPhoneRewardItem
{
	repeated Item item_list = 1[(yd_fieldoptions.field_arysize)=8];
}
message tbBindPhone
{
	optional int32 id4db = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY];
	optional string activity_title = 2[(yd_fieldoptions.field_bufsize)=128, (yd_fieldoptions.field_string_len)=128];
	optional bool is_turn_on = 3;
	optional BindPhoneRewardItem reward_item = 4;
}

enum trainningTarget
{ // 后台不用
    E_TRAIN_T_1  = 1[(yd_fieldoptions.field_enum_cname) = "使用技能"];
    E_TRAIN_T_2  = 2[(yd_fieldoptions.field_enum_cname) = "使用技能命中"];
    E_TRAIN_T_3  = 3[(yd_fieldoptions.field_enum_cname) = "连续使用技能"];
    E_TRAIN_T_4  = 4[(yd_fieldoptions.field_enum_cname) = "ActionLabel命中"];
    E_TRAIN_T_5  = 5[(yd_fieldoptions.field_enum_cname) = "使用技能闪避"];
}

message BarrageInfo{
	required string content = 1[(yd_fieldoptions.field_bufsize)=128];
	required int32 display_time =2;
	optional int32 place = 3;
	optional int32 color = 4;
	optional int32 send_time = 5;
	optional uint64 role_id = 6;
}

message BarrageListInAnime{
	required uint32 anime_id=1;
	required uint32 start_seq=2;
	repeated BarrageInfo info_list  = 3 [(yd_fieldoptions.field_arysize)=1000];
}

message BarrageListInAnimes{
	repeated BarrageListInAnime list_in_animes =1[(yd_fieldoptions.field_arysize)=30];
}

message tbBarrage{
	required int32 id4db = 1[(yd_fieldoptions.field_type)= E_FIELDTYPE_PRIMARYKEY];
	optional BarrageListInAnimes data=2;
}

message SelectMultiLevelInfo
{
    optional uint64 role_id  = 1;
	optional int32  level_id = 2;
}

message InstanceChallengeInfo
{
    optional int32                     id        = 1;
    optional enInstanceChallengeStatus status    = 2 [default = EN_INSTANCE_CHALLENGE_STATUS_NONE];
    repeated int32                     param_int = 3 [(yd_fieldoptions.field_arysize) = 8];
}

message InstanceChallenge
{
    repeated InstanceChallengeInfo challenge_list = 1 [(yd_fieldoptions.field_arysize) = 8];
}

enum enRemindType
{
	EN_REMIND_TYPE_NONE				= 0;
	EN_REMIND_TYPE_SINGLE_REMIND 	= 1;//单次提醒
	EN_REMIND_TYPE_ACCU_REMIND 		= 2;//累计提醒
	EN_REMIND_TYPE_SINGLE_REST 		= 3;//单次下线
	EN_REMIND_TYPE_ACCU_REST 		= 4;//累计下线
	EN_REMIND_TYPE_FORBID_NIGHT		= 5;//宵禁
	EN_REMIND_TYPE_FORBID_PLAY 		= 6;//禁玩
}

message HealthGameRemindInfo
{
	required enRemindType 	remind_type 	= 1[default = EN_REMIND_TYPE_NONE];
	required uint32			time			= 2;//时间
	optional uint32			rest_time		= 3;//休息时间
	optional uint32			sealed_time		= 4;//实际封号时间戳	
	optional uint32			unsealed_time	= 5;//实际解封时间戳	
}

enum ESysFuncID
{
	E_SYS_FUNC_ID_TRADE               = 1 [(yd_fieldoptions.field_enum_cname) = "贸易"];;      //贸易
	E_SYS_FUNC_ID_TRADE_MARKET        = 2 [(yd_fieldoptions.field_enum_cname) = "贸易.市场"];    //贸易.市场
	E_SYS_FUNC_ID_TRADE_SH	          = 3 [(yd_fieldoptions.field_enum_cname) = "贸易.商会"];    //贸易.商会
	E_SYS_FUNC_ID_TRADE_JBG           = 4 [(yd_fieldoptions.field_enum_cname) = "贸易.珍宝阁"];   //贸易.珍宝阁

	E_SYS_FUNC_ID_GUILD               = 5 [(yd_fieldoptions.field_enum_cname) = "行会"];       //行会
	E_SYS_FUNC_ID_GUILD_SHOP          = 6 [(yd_fieldoptions.field_enum_cname) = "行会.商店"];
	E_SYS_FUNC_ID_TASK                = 7 [(yd_fieldoptions.field_enum_cname) = "任务"];
	E_SYS_FUNC_ID_GUILD_TASK          = 8 [(yd_fieldoptions.field_enum_cname) = "行会.任务"];
	
	E_SYS_FUNC_ID_HERO	              = 9 [(yd_fieldoptions.field_enum_cname) = "英雄"];
	E_SYS_FUNC_ID_EQUIP               = 10 [(yd_fieldoptions.field_enum_cname) = "装备"];
	E_SYS_FUNC_ID_EQUIP_STRENGTHEN    = 11 [(yd_fieldoptions.field_enum_cname) = "装备.强化"];
	E_SYS_FUNC_ID_EQUIP_SMELT         = 12 [(yd_fieldoptions.field_enum_cname) = "装备.冶炼"];
	E_SYS_FUNC_ID_EQUIP_RESET         = 13 [(yd_fieldoptions.field_enum_cname) = "装备.重铸"];
	
	E_SYS_FUNC_ID_RUNE                = 14 [(yd_fieldoptions.field_enum_cname) = "徽章"];
	E_SYS_FUNC_ID_RUNE_LIST           = 15 [(yd_fieldoptions.field_enum_cname) = "徽章.手册"];
	E_SYS_FUNC_ID_RUNE_MAKE           = 16 [(yd_fieldoptions.field_enum_cname) = "徽章.制造"];
	E_SYS_FUNC_ID_RUNE_RZ             = 17 [(yd_fieldoptions.field_enum_cname) = "徽章.熔铸"];
	E_SYS_FUNC_ID_RUNE_JZ             = 18 [(yd_fieldoptions.field_enum_cname) = "徽章.精致"];
	
	E_SYS_FUNC_ID_GEMSTONE_COMPOSE    = 19 [(yd_fieldoptions.field_enum_cname) = "宝石.合成"];
	E_SYS_FUNC_ID_FRIENDS             = 20 [(yd_fieldoptions.field_enum_cname) = "好友"];
	E_SYS_FUNC_ID_TREASURE            = 21 [(yd_fieldoptions.field_enum_cname) = "财宝"];
	E_SYS_FUNC_ID_RANK                = 22 [(yd_fieldoptions.field_enum_cname) = "排行榜"];
	
	E_SYS_FUNC_ID_BATTLE_SKY          = 23 [(yd_fieldoptions.field_enum_cname) = "对战.天空竞技场"];
	E_SYS_FUNC_ID_BATTLE_AH           = 24 [(yd_fieldoptions.field_enum_cname) = "对战.拍卖会争夺"];
	E_SYS_FUNC_ID_BATTLE_HUNTER       = 25 [(yd_fieldoptions.field_enum_cname) = "对战.猎人考试"];
	E_SYS_FUNC_ID_BATTLE_YIJI         = 26 [(yd_fieldoptions.field_enum_cname) = "对战.遗迹大乱斗"];
	
	E_SYS_FUNC_ID_VENTURE             = 27 [(yd_fieldoptions.field_enum_cname) = "冒险"];
	E_SYS_FUNC_ID_VENTURE_DRAMA       = 28 [(yd_fieldoptions.field_enum_cname) = "冒险.剧情模式"];
	E_SYS_FUNC_ID_VENTURE_HUNTER      = 29 [(yd_fieldoptions.field_enum_cname) = "冒险.猎人试练"];
	
	E_SYS_FUNC_ID_BATTLE_DMJ          = 30 [(yd_fieldoptions.field_enum_cname) = "对战.大秘境"];
	
	E_SYS_FUNC_ID_CHAT                = 31 [(yd_fieldoptions.field_enum_cname) = "聊天"];
	E_SYS_FUNC_ID_BATTLE_WDDH         = 34 [(yd_fieldoptions.field_enum_cname) = "对战.武斗大会"];
	E_SYS_FUNC_ID_BATTLE_XLC          = 35 [(yd_fieldoptions.field_enum_cname) = "对战.训练场"];
	E_SYS_FUNC_ID_BATTLE_TT           = 36 [(yd_fieldoptions.field_enum_cname) = "天梯.拍卖会争夺"];

	E_SYS_FUNC_ID_TRADE_PLEDGE        = 37 [(yd_fieldoptions.field_enum_cname) = "贸易.誓约之证"];
	E_SYS_FUNC_ID_GOODS_TRANSPORT	  = 51 [(yd_fieldoptions.field_enum_cname) = "行会货运"];
}

message TriggerNpcData
{
	optional int32  city_map_id = 1;     //主城id
	optional int32  npc_obj_id = 2;		 //npc obj id
	optional int32  citysvr_id = 3;      //地图服务器id
}

message HeroNianPracticeChallenge
{
	optional int32 hero_id = 1;
	optional int32 nian_position = 2;
}

message TrainingData
{
	optional bool switch_active_hero	= 1; 
    repeated Proto_RoomPlayerInfo computer_list = 2[(yd_fieldoptions.field_arysize)=8]; //电脑AI列表
    repeated uint32 formation = 3[(yd_fieldoptions.field_arysize) = 4]; //出战英雄
    optional int32 training_guide_id   = 4; //练习任务组id
}

message BattleMatchInfo
{
    repeated uint64 role_list = 1[(yd_fieldoptions.field_arysize) = 8]; 
    repeated int32 role_mmr_list = 2[(yd_fieldoptions.field_arysize) = 8]; 
    repeated int32 rival_mmr_list = 3[(yd_fieldoptions.field_arysize) = 8]; 
    optional uint64 ai_role_id = 4;
}

message LevelMiscData
{
    optional int32 ai_level    = 1;
    optional int32 transfer_id = 2; //转职ID

}

message LevelRushData
{
    optional int32 id = 1; //rush id;
    optional int32 difficulty = 2; 
}

message LevelInstanceData
{
    optional int32 id        = 1; //instance id;
    optional int32 abyss_id  = 2;
    optional bool  special   = 3;
}

message LevelMultiData
{
    optional bool  is_multi_level       = 1;
    optional int32 multi_level_id       = 2;
    optional bool  is_final_multi_level = 3;
    optional int32 multi_level_desc_id  = 4;
    optional int32 multi_level_step     = 5;
}

message LevelTrapTowerData
{
    repeated int32 traptower_buff_id = 1 [(yd_fieldoptions.field_arysize) = 4];
}

message LevelGuildBattleData
{
    optional int32  guild_battle_id  = 1;
    optional uint64 guild_battle_uid = 2;
}

message LevelTriggerNpcData
{
    optional TriggerNpcData npc_data = 1; //触发npc信息
}

message LevelHeroNianPracticeChallengeData
{
    optional HeroNianPracticeChallenge hero_nianpractice_challenge = 1; //念修行挑战ID
}

message LevelTrainingData
{
    optional TrainingData training_data = 1; //练习模式数据
}

message LevelBattleMatchData
{
    optional BattleMatchInfo battle_match_info = 1; 
}

message LevelQuestionData
{
    optional int32 question_boss_id = 1;
    optional float hp_correct       = 2;
    optional float att_correct      = 3;
}

message LevelPhantomTroupeData
{
    optional int32 troupe_support_buff = 1;  //旅团支援buff
}

enum enConstType
{
	EN_CONST_NONE													= 0;
	EN_CONST_CHAMBER_TAX 											= 1	 [(yd_fieldoptions.field_enum_cname) = "商会税率"];
	EN_CONST_MARKET_TAX 											= 2	 [(yd_fieldoptions.field_enum_cname) = "市场税率"];
	EN_CONST_TREASURE_TAX 											= 3	 [(yd_fieldoptions.field_enum_cname) = "珍宝阁税率"];
	EN_CONST_TREASURE_GRID 											= 4	 [(yd_fieldoptions.field_enum_cname) = "珍宝阁格子数"];
	EN_CONST_GUILDWAR_ENTRY_COIN									= 5	 [(yd_fieldoptions.field_enum_cname) = "公会战报名消耗公会资金"];
	EN_CONST_GUILDWAR_ENTRY_LV										= 6	 [(yd_fieldoptions.field_enum_cname) = "公会战报名公会等级"];
	EN_CONST_GUILDWAR_ENTRY_MEM_NUM									= 7	 [(yd_fieldoptions.field_enum_cname) = "公会战报名要求公会成员人数"];
	EN_CONST_GUILDWAR_ROOM_WAIT										= 8	 [(yd_fieldoptions.field_enum_cname) = "公会战房间等待时间"];
	EN_CONST_GUILDWAR_WINNER_ACTION_POINT 							= 9	 [(yd_fieldoptions.field_enum_cname) = "公会战胜利扣除行动力"];
	EN_CONST_GUILDWAR_LOSER_ACTION_POINT 							= 10 [(yd_fieldoptions.field_enum_cname) = "公会战失败扣除行动力"];
	EN_CONST_GUILDWAR_CONFIRM_LV									= 11 [(yd_fieldoptions.field_enum_cname) = "公会战资格确认等级要求"];
	EN_CONST_GUILDWAR_CONFIRM_JOINGUILD_TIME						= 12 [(yd_fieldoptions.field_enum_cname) = "公会战资格确认加入公会时间要求"];
	EN_CONST_1V1_MAP_ID												= 13 [(yd_fieldoptions.field_enum_cname) = "1v1约战关卡"];
	EN_CONST_1V1_INVIATE_BATTLE_LIMIT_TIME							= 14 [(yd_fieldoptions.field_enum_cname) = "1v1约战受限cd"];
	EN_CONST_2V2V2_MAP_ID											= 15 [(yd_fieldoptions.field_enum_cname) = "2v2v2乱斗关卡ID"];
	EN_CONST_RIFT_TOTAL_SCORE										= 16 [(yd_fieldoptions.field_enum_cname) = "秘境进度值"];
	EN_CONST_RIFT_BEGIN												= 17 [(yd_fieldoptions.field_enum_cname) = "秘境赛季开始"];
	EN_CONST_RIFT_LANG												= 18 [(yd_fieldoptions.field_enum_cname) = "秘境赛季时长"];
	EN_CONST_RIFT_DEAD_PUNISH_TIME_ONE								= 19 [(yd_fieldoptions.field_enum_cname) = "秘境死亡时间惩罚第1次"];
	EN_CONST_RIFT_DEAD_PUNISH_TIME_TWO								= 20 [(yd_fieldoptions.field_enum_cname) = "秘境死亡时间惩罚第2次"];
	EN_CONST_RIFT_DEAD_PUNISH_TIME_THREE							= 21 [(yd_fieldoptions.field_enum_cname) = "秘境死亡时间惩罚第3次"];
	EN_CONST_RIFT_RESET_MAP_CD										= 22 [(yd_fieldoptions.field_enum_cname) = "秘境重置地图冷却"];
	EN_CONST_RIFT_LV												= 23 [(yd_fieldoptions.field_enum_cname) = "大秘境等级限制"];
	EN_CONST_RIFT_JINGYING_BUFF_ID									= 24 [(yd_fieldoptions.field_enum_cname) = "大秘境精英怪特效ID"];
	EN_CONST_WORLD_CHAT_INTERVAL									= 25 [(yd_fieldoptions.field_enum_cname) = "世界频道发言一次限制秒数"];
	EN_CONST_MELEE_ENERGY_ONE										= 26 [(yd_fieldoptions.field_enum_cname) = "大乱斗能量召唤图腾阈值1"];
	EN_CONST_MELEE_ENERGY_TWO										= 27 [(yd_fieldoptions.field_enum_cname) = "大乱斗能量召唤图腾阈值2"];
	EN_CONST_MELEE_ENERGY_THREE										= 28 [(yd_fieldoptions.field_enum_cname) = "大乱斗能量召唤图腾阈值3"];
	EN_CONST_MELEE_BLUE_SPAWN_GROUP_ID								= 29 [(yd_fieldoptions.field_enum_cname) = "大乱斗蓝方营地图腾"];
	EN_CONST_MELEE_RED_SPAWN_GROUP_ID								= 30 [(yd_fieldoptions.field_enum_cname) = "大乱斗红方营地图腾"];
	EN_CONST_MELEE_GREEN_SPAWN_GROUP_ID								= 31 [(yd_fieldoptions.field_enum_cname) = "大乱斗绿方营地图腾"];
	EN_CONST_GUILD_SOULBOX_CLICK_CONTRIBUTION						= 32 [(yd_fieldoptions.field_enum_cname) = "公会魂匣互助"];
	EN_CONST_RIFT_SHOP_REFRESH_TIME									= 33 [(yd_fieldoptions.field_enum_cname) = "大秘境商店刷新时间"];
	EN_CONST_FRIEND_UPPER											= 34 [(yd_fieldoptions.field_enum_cname) = "好友数量上限"];
	EN_CONST_MMR_K                      							= 35 [(yd_fieldoptions.field_enum_cname) = "mmr计算K值"];
	EN_CONST_MATCH_RANGE_30             							= 36 [(yd_fieldoptions.field_enum_cname) = "匹配前30秒阈值"];
	EN_CONST_MATCH_RANGE_60             							= 37 [(yd_fieldoptions.field_enum_cname) = "匹配30秒至60秒阈值"];
	EN_CONST_MATCH_RANGE_120              							= 38 [(yd_fieldoptions.field_enum_cname) = "匹配60秒至120秒阈值"];
    EN_CONST_MATCH_TIME_TEAM            							= 39 [(yd_fieldoptions.field_enum_cname) = "组别匹配时间值"];
    EN_CONST_MATCH_RANGE_TEAM           							= 40 [(yd_fieldoptions.field_enum_cname) = "组别匹配阈值"];
    EN_CONST_SKYARENA_TEAM_CREATE_COST_GOLD  						= 41 [(yd_fieldoptions.field_enum_cname) = "天空竞技场队伍创建手续费"];
    EN_CONST_TRAINING_STR_RATE  									= 42 [(yd_fieldoptions.field_enum_cname) = "练习模式电脑力量系数"];
    EN_CONST_TRAINING_VIT_RATE  									= 43 [(yd_fieldoptions.field_enum_cname) = "练习模式电脑耐力系数"];
    EN_CONST_TRAINING_LUCK_RATE  									= 44 [(yd_fieldoptions.field_enum_cname) = "练习模式电脑运气系数"];
    EN_CONST_SURRENDER_DURATION 									= 45 [(yd_fieldoptions.field_enum_cname) = "认输最长持续毫秒数"];
    EN_CONST_SURRENDER_COMMIT_DELAY 								= 46 [(yd_fieldoptions.field_enum_cname) = "同意认输等待毫秒数"];
    EN_CONST_GACHA_HERO_PIECE_NUM 									= 47 [(yd_fieldoptions.field_enum_cname) = "抽到已拥有的英雄转化成碎片数量"];
    EN_CONST_SOUL_BOX_SPEED_PLAYER_COUNT		 					= 48 [(yd_fieldoptions.field_enum_cname) = "自己加速其他玩家魂匣的次数"];
    EN_CONST_SOUL_BOX_SPEEDED_COUNT				 					= 49 [(yd_fieldoptions.field_enum_cname) = "自己被其它玩家加速的次数"];
    EN_CONST_SOUL_BOX_SPEED_TIME				 					= 50 [(yd_fieldoptions.field_enum_cname) = "每次加速缩减的时间"];
    EN_CONST_SOUL_BOX_SELF_SPEEDED_COUNT		 					= 51 [(yd_fieldoptions.field_enum_cname) = "每个魂匣最多被加速的次数"];
	EN_CONST_CREDIT_OFFLINE_TIME_OUT_PUNISH_POINT          			= 52 [(yd_fieldoptions.field_enum_cname) = "掉线且限定时间不登录扣分"];
	EN_CONST_CREDIT_OFFLINE_PUNISH_POINT                    		= 53 [(yd_fieldoptions.field_enum_cname) = "掉线限定时间内登录扣分"];
	EN_CONST_CREDIT_NO_OPERAT_PUNISH_POINT                  		= 54 [(yd_fieldoptions.field_enum_cname) = "挂机1~3分钟扣分"];
	EN_CONST_CREDIT_NO_OPERAT_MORE_PUNISH_POINT             		= 55 [(yd_fieldoptions.field_enum_cname) = "挂机3分钟以上扣分"];
	EN_CONST_CREDIT_MATCH_SUCCESS_NOT_CONFIRM_PUNISH_POINT 	 		= 56 [(yd_fieldoptions.field_enum_cname) = "匹配成功不点击确定扣分"];
	EN_CONST_CREDIT_MATCH_SUCCESS_NOT_CONFIRM_BAN_TIME      		= 57 [(yd_fieldoptions.field_enum_cname) = "匹配成功不点击确定禁赛时间"];
	EN_CONST_CREDIT_15_PUNISH_POINT_BAN_TIME                		= 58 [(yd_fieldoptions.field_enum_cname) = "惩罚累计15分禁赛时间"];
	EN_CONST_CREDIT_15_PUNISH_POINT_AFTER_BAN_RECOVER_POINT 		= 59 [(yd_fieldoptions.field_enum_cname) = "惩罚累计15分禁赛结束恢复分值"];
	EN_CONST_CREDIT_COMMON_RECOVER                          		= 60 [(yd_fieldoptions.field_enum_cname) = "正常行为恢复积分"];
	EN_CONST_CREDIT_OFFLINE_TIME_OUT_TIME                   		= 61 [(yd_fieldoptions.field_enum_cname) = "掉线限定时间"];
	EN_CONST_SOUL_BOX_FRIEND_GUILD_MAX_COUNT                   		= 62 [(yd_fieldoptions.field_enum_cname) = "查看的好友和行会成员魂匣的最大人数"];
	EN_CONST_KILL_ASSIST_TIME_LIMIT                                 = 63 [(yd_fieldoptions.field_enum_cname) = "击杀助攻时限"];
	EN_CONST_NEWBIE_HERO_ID											= 64 [(yd_fieldoptions.field_enum_cname) = "新手场景英雄"];
	EN_CONST_NEWBIE_MAP_DESC_ID										= 65 [(yd_fieldoptions.field_enum_cname) = "新手场景地图ID"];
	EN_CONST_PKG_TIME_INTERVAL										= 66 [(yd_fieldoptions.field_enum_cname) = "发包频率统计时间间隔"];
	EN_CONST_PKG_UPPER_LIMIT										= 67 [(yd_fieldoptions.field_enum_cname) = "发包上限"];
	EN_CONST_COMMEND_FRIEND_LIMIT									= 68 [(yd_fieldoptions.field_enum_cname) = "推荐好友等级区间限制"];
	EN_CONST_COMMEND_FRIEND_CITY_LIMIT								= 69 [(yd_fieldoptions.field_enum_cname) = "主城推荐任务等级区间限制"];
	EN_CONST_PLEDGE_DAILY_MAX_CHALLENGE_TIMES                       = 70 [(yd_fieldoptions.field_enum_cname) = "誓约之境每天挑战次数"];
	EN_CONST_LOAD_INITING_GLOBAL_DATA_REPEATED_TIME                 = 71 [(yd_fieldoptions.field_enum_cname) = "服务器加载全局初始化数据的循环时间"];
	EN_CONST_QUESTION_LV							                = 72 [(yd_fieldoptions.field_enum_cname) = "智力闯关参加等级"];
	EN_CONST_QUESTION_HELP_COUNT					                = 73 [(yd_fieldoptions.field_enum_cname) = "智力闯关求助次数"];
	EN_CONST_QUESTION_AWARD_CONDITION				                = 74 [(yd_fieldoptions.field_enum_cname) = "智力闯关额外奖励领取门槛"];
	EN_CONST_QUESTION_ROUND											= 75 [(yd_fieldoptions.field_enum_cname) = "智力闯关总轮数"];
	EN_CONST_LOAD_GLOBAL_DATA_TIMEOUT_COUNT							= 76 [(yd_fieldoptions.field_enum_cname) = "服务器加载全局初始化数据的超时次数"];
    EN_CONST_PARTNER_APTITUDE_UP_ITEM_ID                            = 77 [(yd_fieldoptions.field_enum_cname) = "伙伴资质培养道具编号"];
    EN_CONST_PARTNER_MAX_SKILL_GRID_NUM                             = 78 [(yd_fieldoptions.field_enum_cname) = "伙伴技能格子最大数量"];
    EN_CONST_FRIEND_NET_REFRESH_CD_TIME                             = 79 [(yd_fieldoptions.field_enum_cname) = "刷新关系网cd时间"];
    EN_CONST_FRIEND_NET_RECOMMAND_COUNT_MAX                         = 80 [(yd_fieldoptions.field_enum_cname) = "关系网推荐的最大个数"];
    EN_CONST_BAG_GRID_NUM_OF_BRON                                   = 81 [(yd_fieldoptions.field_enum_cname) = "初始背包格子数量"];
    EN_CONST_STORAGE_PAG_NUM_OF_BRON                                = 82 [(yd_fieldoptions.field_enum_cname) = "初始仓库数量"];
	EN_CONST_ESCORT_COUNT											= 83 [(yd_fieldoptions.field_enum_cname) = "普通护送任务次数"];
	EN_CONST_ESCORT_HEIGHT_COUNT									= 84 [(yd_fieldoptions.field_enum_cname) = "高级护送任务次数"];
    EN_CONST_ZONE_FRIEND_STATUS_COUNT_PER_GET                       = 85 [(yd_fieldoptions.field_enum_cname) = "好友圈默认显示的好友状态条数"];
    EN_CONST_ZONE_MY_STATUS_COUNT_PER_GET                       	= 86 [(yd_fieldoptions.field_enum_cname) = "状态页默认显示的状态条数"];
    EN_CONST_ZONE_STATUS_UP_DEFAULT_COUNT                       	= 87 [(yd_fieldoptions.field_enum_cname) = "好友圈或者状态页默认显示的点赞数"];
    EN_CONST_ZONE_STATUS_NOTES_DEFAULT_COUNT                    	= 88 [(yd_fieldoptions.field_enum_cname) = "好友圈或者状态页默认显示的评论数"];
    EN_CONST_ZONE_PUBLISH_STATUS_LIMIT_LEN		                    = 89 [(yd_fieldoptions.field_enum_cname) = "发布的状态的限制字节数"];
    EN_CONST_ZONE_NOTE_STATUS_LIMIT_LEN		                   		= 90 [(yd_fieldoptions.field_enum_cname) = "评论状态的限制字节数"];
    EN_CONST_ZONE_STATUS_DETAIL_UP_COUNT	                   		= 91 [(yd_fieldoptions.field_enum_cname) = "状态详细页默认显示的点赞数"];
    EN_CONST_ZONE_STATUS_DETAIL_NOTES_COUNT	                   		= 92 [(yd_fieldoptions.field_enum_cname) = "状态详细页默认显示的评论数"];
    EN_CONST_ZONE_MESSAGE_COUNT_PER_GET		                   		= 93 [(yd_fieldoptions.field_enum_cname) = "留言板一次获取的留言数"];
    EN_CONST_ZONE_PUBLISH_MESSAGE_LIMIT_LEN                   		= 94 [(yd_fieldoptions.field_enum_cname) = "留言的限制字节数"];
    EN_CONST_ZONE_STEP_ON_GET_HOT_DEGREE	                   		= 95 [(yd_fieldoptions.field_enum_cname) = "踩一次获取的人气值"];
    EN_CONST_ZONE_STEP_ON_LIMIT_COUNT		                   		= 96 [(yd_fieldoptions.field_enum_cname) = "每天可以踩同一个玩家的次数"];
    EN_CONST_ZONE_SET_GIFT_LIMIT_COUNT		                   		= 97 [(yd_fieldoptions.field_enum_cname) = "放置礼物的最大数"];
    EN_CONST_ZONE_SET_GIFT_PRICE			                   		= 98 [(yd_fieldoptions.field_enum_cname) = "放置礼物的单价"];
    EN_CONST_ZONE_SET_GIFT_DROP_ID			                   		= 99 [(yd_fieldoptions.field_enum_cname) = "放置礼物的掉落包"];
	EN_CONST_RIFT_RETRY_COUNT										= 100[(yd_fieldoptions.field_enum_cname) = "秘境探险每日重试次数"];
	EN_CONST_RIFT_BUFF0												= 101[(yd_fieldoptions.field_enum_cname) = "秘境探险每日强化buff0"];
	EN_CONST_RIFT_BUFF1												= 102[(yd_fieldoptions.field_enum_cname) = "秘境探险每日强化buff1"];
	EN_CONST_RIFT_BUFF2												= 103[(yd_fieldoptions.field_enum_cname) = "秘境探险每日强化buff2"];
	EN_CONST_RIFT_BUFF3												= 104[(yd_fieldoptions.field_enum_cname) = "秘境探险每日强化buff3"];
	EN_CONST_RIFT_BUFF4												= 105[(yd_fieldoptions.field_enum_cname) = "秘境探险每日强化buff4"];
	EN_CONST_RIFT_BUFF5												= 106[(yd_fieldoptions.field_enum_cname) = "秘境探险每日强化buff5"];
	EN_CONST_RIFT_BUFF6												= 107[(yd_fieldoptions.field_enum_cname) = "秘境探险每日强化buff6"];
	EN_CONST_GUILD_NAME_LIMIT										= 108[(yd_fieldoptions.field_enum_cname) = "行会名称限制长度"];
	EN_CONST_GUILD_SIGNATURE_LIMIT									= 109[(yd_fieldoptions.field_enum_cname) = "行会宣言限制长度"];
    EN_CONST_PARTNER_APTITUDE_RATIO_1                               = 110[(yd_fieldoptions.field_enum_cname) = "资质生成系数1"];                        
    EN_CONST_PARTNER_APTITUDE_RATIO_2                               = 111[(yd_fieldoptions.field_enum_cname) = "资质生成系数2"];
    EN_CONST_PARTNER_APTITUDE_RATIO_3                               = 112[(yd_fieldoptions.field_enum_cname) = "资质生成系数3"];
    EN_CONST_PARTNER_APTITUDE_RATIO_4                               = 113[(yd_fieldoptions.field_enum_cname) = "资质生成系数4"];
    EN_CONST_PARTNER_APTITUDE_RATIO_5                               = 114[(yd_fieldoptions.field_enum_cname) = "资质生成系数5"];
    EN_CONST_PARTNER_APTITUDE_RATIO_6                               = 115[(yd_fieldoptions.field_enum_cname) = "资质生成系数6"];
    EN_CONST_PARTNER_APTITUDE_RATIO_7                               = 116[(yd_fieldoptions.field_enum_cname) = "资质生成系数7"];
	EN_CONST_SKILL_AWAKE_LEVEL_1                                    = 117[(yd_fieldoptions.field_enum_cname) = "第1次觉醒等级"];
	EN_CONST_SKILL_AWAKE_LEVEL_2                                    = 118[(yd_fieldoptions.field_enum_cname) = "第2次觉醒等级"];
	EN_CONST_GUILD_INIT_HOT_VALUE									= 119[(yd_fieldoptions.field_enum_cname) = "行会初始化的人气值"];
	EN_CONST_SKILL_PREVIEW_LEVEL_ID									= 120[(yd_fieldoptions.field_enum_cname) = "觉醒预览时进入的关卡ID"];
	EN_CONST_GUILD_PREPARE_TIME										= 121[(yd_fieldoptions.field_enum_cname) = "响应超时时间"];
	EN_CONST_GUILD_HOT_ADD											= 122[(yd_fieldoptions.field_enum_cname) = "人气增加的数"];
	EN_CONST_GUILD_HOT_DESC											= 123[(yd_fieldoptions.field_enum_cname) = "人气减少的数"];
	EN_CONST_GUILD_PRESIDENT_LOGOUT_DAY								= 124[(yd_fieldoptions.field_enum_cname) = "会长被弹劾的超时天数"];
	EN_CONST_GUILD_GET_SYS_RECOMMAND_COUNT							= 125[(yd_fieldoptions.field_enum_cname) = "系统推荐的合并公会单页数"];
	EN_CONST_GUILD_GET_SYS_RECOMMAND_HOT							= 126[(yd_fieldoptions.field_enum_cname) = "系统推荐公会的人气"];
	EN_CONST_GUILD_MERGE_MAX_HOT									= 127[(yd_fieldoptions.field_enum_cname) = "合并的最大人气"];
	EN_CONST_ESCORT_FIGHT_RANGE										= 128[(yd_fieldoptions.field_enum_cname) = "护送遇敌距离"];
	EN_CONST_GEMSTONE_POS_LEVEL1									= 129[(yd_fieldoptions.field_enum_cname) = "宝石孔1需要等级"];
	EN_CONST_GEMSTONE_POS_LEVEL2									= 130[(yd_fieldoptions.field_enum_cname) = "宝石孔2需要等级"];
	EN_CONST_GEMSTONE_POS_LEVEL3									= 131[(yd_fieldoptions.field_enum_cname) = "宝石孔3需要等级"];
	EN_CONST_GEMSTONE_MAX_LEVEL 									= 132[(yd_fieldoptions.field_enum_cname) = "宝石最大等级"];
	EN_CONST_GUILD_PRESIDENT_BONUS 									= 133[(yd_fieldoptions.field_enum_cname) = "会长分红系数"];
	EN_CONST_GUILD_VICE_PRESIDENT_BONUS 							= 134[(yd_fieldoptions.field_enum_cname) = "副会长分红系数"];
	EN_CONST_GUILD_MANAGER_BONUS 									= 135[(yd_fieldoptions.field_enum_cname) = "管理分红系数"];
	EN_CONST_GUILD_HIGH_MEMBER_BONUS 								= 136[(yd_fieldoptions.field_enum_cname) = "精英分红系数"];
	EN_CONST_GUILD_MEMBER_BONUS 									= 137[(yd_fieldoptions.field_enum_cname) = "会员分红系数"];
	EN_CONST_INIT_HP_RESERVE										= 138[(yd_fieldoptions.field_enum_cname) = "生命储备初始化值"];
	EN_CONST_INIT_MP_RESERVE										= 139[(yd_fieldoptions.field_enum_cname) = "魔法储备初始化值"];
	EN_CONST_GUILD_PIECE_INFO_TIMEOUT								= 140[(yd_fieldoptions.field_enum_cname) = "请求援助符超时时间"];
	EN_CONST_GUILD_PIECE_PUBLISH_COUNT								= 141[(yd_fieldoptions.field_enum_cname) = "请求援助符的最大次数"];
    EN_CONST_PARTNER_BATTLE_END_EXP_TRANS_RATIO                     = 142[(yd_fieldoptions.field_enum_cname) = "关卡结算伙伴经验转化率"];
    EN_CONST_OFFLINE_EXP_LIMIT_LEVEL                                = 143[(yd_fieldoptions.field_enum_cname) = "离线经验等级限制"];
    EN_CONST_OFFLINE_EXP_RATIO                                      = 144[(yd_fieldoptions.field_enum_cname) = "离线经验系数"];
    EN_CONST_MAX_HP_RESERVE											= 145[(yd_fieldoptions.field_enum_cname) = "生命储备上限"];
    EN_CONST_MAX_MP_RESERVE											= 146[(yd_fieldoptions.field_enum_cname) = "魔法储备上限"];
    EN_CONST_MAX_HP_RESERVE_DISPLAY									= 147[(yd_fieldoptions.field_enum_cname) = "生命储备上限（客户端显示）"];
    EN_CONST_MAX_MP_RESERVE_DISPLAY									= 148[(yd_fieldoptions.field_enum_cname) = "魔法储备上限（客户端显示）"];
    EN_CONST_MAX_GUILD_ACTIVITY_HELP_COUNT							= 149[(yd_fieldoptions.field_enum_cname) = "货运求助最大次数"];
    EN_CONST_GUILD_ACTIVITY_HELP_MIN_COUNT							= 150[(yd_fieldoptions.field_enum_cname) = "货运求助的最小填装数"];
    EN_CONST_MAX_GUILD_ACTIVITY_HELP_OTHER_COUNT					= 151[(yd_fieldoptions.field_enum_cname) = "货运帮助其他人最大次数"];
    EN_CONST_GUILD_ACTIVITY_TRANSPORT_MIN_COUNT						= 152[(yd_fieldoptions.field_enum_cname) = "货运出航的最小填装数"];
    EN_CONST_ROLE_WELFARE_EXP_MAX_VALUE								= 153[(yd_fieldoptions.field_enum_cname) = "福利经验的最大值"];
    EN_CONST_ROLE_WELFARE_EXP_MIN_LV								= 154[(yd_fieldoptions.field_enum_cname) = "在线增加福利经验的最小等级"];
    EN_CONST_ROLE_WELFARE_EXP_CAL_PARAM								= 155[(yd_fieldoptions.field_enum_cname) = "增加福利经验的计算公式参数"];
    EN_CONST_ROLE_WELFARE_EXP_EXCHANGE_VALUE						= 156[(yd_fieldoptions.field_enum_cname) = "福利经验跟活跃度的兑换值"];
    EN_CONST_SIX_EXPERIMENT_BUFF_1                                  = 157[(yd_fieldoptions.field_enum_cname) = "六系试炼组队强化buff-1"];
    EN_CONST_SIX_EXPERIMENT_BUFF_2                                  = 158[(yd_fieldoptions.field_enum_cname) = "六系试炼组队强化buff-2"];
    EN_CONST_SIX_EXPERIMENT_BUFF_3                                  = 159[(yd_fieldoptions.field_enum_cname) = "六系试炼组队强化buff-3"];
    EN_CONST_QEC_AWARD_PARAM_A                                  	= 160[(yd_fieldoptions.field_enum_cname) = "任务链经验奖励参数A"];
    EN_CONST_QEC_AWARD_PARAM_B                                  	= 161[(yd_fieldoptions.field_enum_cname) = "任务链经验奖励参数B"];
    EN_CONST_QEC_AWARD_PARAM_C                                  	= 162[(yd_fieldoptions.field_enum_cname) = "任务链经验奖励参数C"];
    EN_CONST_QEC_AWARD_PARAM_D                                  	= 163[(yd_fieldoptions.field_enum_cname) = "任务链经验奖励参数D"];
    EN_CONST_QEC_LEVEL_LIMIT                                    	= 164[(yd_fieldoptions.field_enum_cname) = "任务链开启等级"];
    EN_CONST_QEC_NODE_COUNT                                     	= 165[(yd_fieldoptions.field_enum_cname) = "任务链总环数"];
    EN_CONST_SEA_DISCOVERY_GEM_STONE                                = 166[(yd_fieldoptions.field_enum_cname) = "遗迹淘金宝石兑换积分"];
    EN_CONST_SEA_DISCOVERY_BIG_GOLDEN                               = 167[(yd_fieldoptions.field_enum_cname) = "遗迹淘金大金币兑换积分"];
    EN_CONST_SEA_DISCOVERY_SMALL_GOLDEN                             = 168[(yd_fieldoptions.field_enum_cname) = "遗迹淘金小金币兑换积分"];
    EN_CONST_QEC_OPEN_COST_A                                  	    = 169[(yd_fieldoptions.field_enum_cname) = "任务链开启银币消耗参数A"];
    EN_CONST_QEC_OPEN_COST_B                                  	    = 170[(yd_fieldoptions.field_enum_cname) = "任务链开启银币消耗参数B"];
	EN_CONST_MARKET_NORMAL_ITEM_EXPIRE_TIME                         = 171[(yd_fieldoptions.field_enum_cname) = "市场普通物品过期时间"];
	EN_CONST_MARKET_NOTICE_ITEM_EXPIRE_TIME                         = 172[(yd_fieldoptions.field_enum_cname) = "市场公示物品过期时间"];
    EN_CONST_BATTLE_DRUG_CD_SECONDS                                	= 173[(yd_fieldoptions.field_enum_cname) = "战斗内药品公共CD"];
	EN_CONST_MILITANT_MATCH_ROOM_ROUND_TIME                         = 174[(yd_fieldoptions.field_enum_cname) = "比武大会匹配间隔时间"];
	EN_CONST_MILITANT_MATCH_PROTECT_TIME                            = 175[(yd_fieldoptions.field_enum_cname) = "比武大会出战保护时间"];
	EN_CONST_MILITANT_MATCH_BATTLE_READY_TIME                       = 176[(yd_fieldoptions.field_enum_cname) = "出战备战时间"];
	EN_CONST_MILITANT_MATCH_BATTLE_SHOW_TIME                        = 177[(yd_fieldoptions.field_enum_cname) = "备战结束开始倒计时时间"];
	EN_CONST_MILITANT_MATCH_START_MIN_PLAYER                        = 178[(yd_fieldoptions.field_enum_cname) = "玩法开启要求最低人数"];
	EN_CONST_MILITANT_MATCH_END_MAX_PLAYER                          = 179[(yd_fieldoptions.field_enum_cname) = "玩家结束要求最低人数"];
	EN_CONST_MILITANT_MATCH_MAX_LOSE_COUNT                          = 180[(yd_fieldoptions.field_enum_cname) = "玩家强制退场失败场次"];
    EN_CONST_BATTLE_DRUG_HP_START_BUFF_ID 							= 181[(yd_fieldoptions.field_enum_cname) = "战斗内血药触发起始BUFF"];
    EN_CONST_BATTLE_DRUG_MP_START_BUFF_ID 							= 182[(yd_fieldoptions.field_enum_cname) = "战斗内蓝药触发起始BUFF"];
	EN_CONST_PARTNER_MAX_NUM                                        = 183[(yd_fieldoptions.field_enum_cname) = "玩家拥有伙伴数量上限"];
	EN_CONST_GUILD_FIGHT_LOOP_QUEST_ID	                            = 184[(yd_fieldoptions.field_enum_cname) = "战备循环任务库ID"];
	EN_CONST_PARTNER_APTITUDE_UP_PARAM_1                            = 185[(yd_fieldoptions.field_enum_cname) = "伙伴资质提升系数1"];
	EN_CONST_PARTNER_APTITUDE_UP_PARAM_2                            = 186[(yd_fieldoptions.field_enum_cname) = "伙伴资质提升系数2"];
	EN_CONST_TRAPTOWER_LV											= 187[(yd_fieldoptions.field_enum_cname) = "陷阱塔最低等级"];
	EN_CONST_ESCORT_ACTIVE											= 188[(yd_fieldoptions.field_enum_cname) = "要人护送最低活跃要求"];
	EN_CONST_ZONE_PHOTO_MAX_COUNT									= 189[(yd_fieldoptions.field_enum_cname) = "空间状态的图片最大数"];
	EN_CONST_ZONE_PHOTO_MAX_SIZE									= 190[(yd_fieldoptions.field_enum_cname) = "空间状态的图片最大大小"];
	EN_CONST_ZONE_SMALL_PHOTO_MAX_SIZE								= 191[(yd_fieldoptions.field_enum_cname) = "空间状态的缩略图片最大大小"];
	EN_CONST_MASTER_QUEST_MASTER_AWARD_MONEY_PARAM_A				= 192[(yd_fieldoptions.field_enum_cname) = "师徒任务师傅银币奖励参数A"];
	EN_CONST_MASTER_QUEST_MASTER_AWARD_MONEY_PARAM_B				= 193[(yd_fieldoptions.field_enum_cname) = "师徒任务师傅银币奖励参数B"];
	EN_CONST_MASTER_QUEST_MASTER_AWARD_ITEM_ID						= 194[(yd_fieldoptions.field_enum_cname) = "师徒任务师傅随机奖励物品ID"];
	EN_CONST_MASTER_QUEST_MASTER_AWARD_ITEM_RAND					= 195[(yd_fieldoptions.field_enum_cname) = "师徒任务师傅随机奖励概率"];
	EN_CONST_MASTER_QUEST_APPRENTICE_AWARD_EXP_PARAM_A				= 196[(yd_fieldoptions.field_enum_cname) = "师徒任务弟子经验奖励参数A"];
	EN_CONST_MASTER_QUEST_APPRENTICE_AWARD_EXP_PARAM_B				= 197[(yd_fieldoptions.field_enum_cname) = "师徒任务弟子经验奖励参数B"];
	EN_CONST_MASTER_QUEST_APPRENTICE_AWARD_MONEY_PARAM_A			= 198[(yd_fieldoptions.field_enum_cname) = "师徒任务弟子银币奖励参数A"];
	EN_CONST_MASTER_QUEST_APPRENTICE_AWARD_MONEY_PARAM_B			= 199[(yd_fieldoptions.field_enum_cname) = "师徒任务弟子银币奖励参数B"];
	EN_CONST_MASTER_QUEST_MASTER_AWARD_MASTER_SCORE					= 200[(yd_fieldoptions.field_enum_cname) = "师徒任务师傅奖励授业点"];
	EN_CONST_MASTER_GET_MIN_LV_LIMIT								= 201[(yd_fieldoptions.field_enum_cname) = "拜师最低限制等级"];
	EN_CONST_MASTER_GET_MAX_LV_LIMIT								= 202[(yd_fieldoptions.field_enum_cname) = "拜师最高限制等级"];
	EN_CONST_MASTER_LEAVE_APPRENTICE_CD_TIME						= 203[(yd_fieldoptions.field_enum_cname) = "弟子解除师徒关系冷却时间"];
	EN_CONST_MASTER_GET_APPRENTICE_MIN_LV_LIMIT						= 204[(yd_fieldoptions.field_enum_cname) = "收徒最低限制等级"];
	EN_CONST_MASTER_MAX_APPRENTICE_COUNT_SAME_TIME					= 205[(yd_fieldoptions.field_enum_cname) = "师傅最多同时收的弟子数"];
	EN_CONST_MASTER_LEAVE_MASTER_CD_TIME							= 206[(yd_fieldoptions.field_enum_cname) = "师傅解除师徒关系冷却时间"];
	EN_CONST_MASTER_MAX_APPRENTICE_COUNT_EVERYDAY					= 207[(yd_fieldoptions.field_enum_cname) = "每天收徒的限制数"];
	EN_CONST_MASTER_MAX_RAND_MASTER_COUNT							= 208[(yd_fieldoptions.field_enum_cname) = "随机推荐师傅的个数"];
	EN_CONST_MASTER_SET_TASK_USE_EP									= 209[(yd_fieldoptions.field_enum_cname) = "布置教学任务消耗活力"];
	EN_CONST_MASTER_TEACH_TASK_ITEM_ID								= 210[(yd_fieldoptions.field_enum_cname) = "教学任务手册物品id"];
	EN_CONST_MASTER_TEACH_TIME_OUT									= 211[(yd_fieldoptions.field_enum_cname) = "组队拜师确认超时时间"];
	EN_CONST_PARTNER_BATTLE_MIN_MEMBER                              = 212[(yd_fieldoptions.field_enum_cname) = "伙伴对战组队匹配需要队伍人数下限"];
	EN_CONST_PARTNER_BATTLE_MAX_MEMBER                              = 213[(yd_fieldoptions.field_enum_cname) = "伙伴对战组队匹配需要队伍人数上限"];
	EN_CONST_PARTNER_BATTLE_MIN_PLAYER_LEVEL                        = 214[(yd_fieldoptions.field_enum_cname) = "伙伴对战匹配要求玩家等级"];
	EN_CONST_PARTNER_BATTLE_MATCH_SUCCESS_NO_CONFIRM_PUNISH         = 215[(yd_fieldoptions.field_enum_cname) = "伙伴对战匹配成功时不点击确定惩罚时间"];
	EN_CONST_PARTNER_BATTLE_PARTNER_MIN_NUM                         = 216[(yd_fieldoptions.field_enum_cname) = "伙伴对战匹配要求玩家至少拥有伙伴数量"];
	EN_CONST_PARTNER_BATTLE_PARTNER_MIN_LEVEL                       = 217[(yd_fieldoptions.field_enum_cname) = "伙伴对战匹配要求玩家拥有伙伴等级下限"];
	EN_CONST_MASTER_TEACH_JUDGE_MIN_LV								= 218[(yd_fieldoptions.field_enum_cname) = "教学评价最低推送等级"];
	EN_CONST_MASTER_TEACH_JUDGE_MAX_LV								= 219[(yd_fieldoptions.field_enum_cname) = "教学评价最高推送等级"];
	EN_CONST_MASTER_TEACH_JUDGE_LV_DISTANCE							= 220[(yd_fieldoptions.field_enum_cname) = "推送教学评价等级间隔"];
	EN_CONST_MASTER_TEACH_JUDGE_ONE_ADD_HELP						= 221[(yd_fieldoptions.field_enum_cname) = "教学评价1储备授业点值"];//enApprenticeJudgeType
	EN_CONST_MASTER_TEACH_JUDGE_TWO_ADD_HELP						= 222[(yd_fieldoptions.field_enum_cname) = "教学评价2储备授业点值"];//enApprenticeJudgeType
	EN_CONST_MASTER_TEACH_JUDGE_THR_ADD_HELP						= 223[(yd_fieldoptions.field_enum_cname) = "教学评价3储备授业点值"];//enApprenticeJudgeType
	EN_CONST_MASTER_TEACH_JUDGE_ONE_ADD_SCORE						= 224[(yd_fieldoptions.field_enum_cname) = "教学评价1教学成绩值"];//enApprenticeJudgeType
	EN_CONST_MASTER_TEACH_JUDGE_TWO_ADD_SCORE						= 225[(yd_fieldoptions.field_enum_cname) = "教学评价2教学成绩值"];//enApprenticeJudgeType
	EN_CONST_MASTER_TEACH_JUDGE_THR_ADD_SCORE						= 226[(yd_fieldoptions.field_enum_cname) = "教学评价3教学成绩值"];//enApprenticeJudgeType
	EN_CONST_MASTER_TEACH_RESULT_ADD_SCORE							= 227[(yd_fieldoptions.field_enum_cname) = "完成教学成果加的教学成绩值"];
	EN_CONST_MASTER_TEACH_TASK_ADD_SCORE							= 228[(yd_fieldoptions.field_enum_cname) = "完成教学任务加的教学成绩值"];
	EN_CONST_MASTER_JUDGE_MAX_SCORE									= 229[(yd_fieldoptions.field_enum_cname) = "教学成绩关于教学评价的最大值"];
	EN_CONST_MASTER_RESULT_MAX_SCORE								= 230[(yd_fieldoptions.field_enum_cname) = "教学成绩关于教学成果的最大值"];
	EN_CONST_MASTER_TASK_MAX_SCORE									= 231[(yd_fieldoptions.field_enum_cname) = "教学成绩关于教学任务的最大值"];
	EN_CONST_MASTER_MAX_FINISH_LV									= 232[(yd_fieldoptions.field_enum_cname) = "最大结业等级"];
	EN_CONST_MASTER_MAX_AUTO_FINISH_LV								= 233[(yd_fieldoptions.field_enum_cname) = "最大自动结业等级"];
	EN_CONST_MASTER_TASK_APPRENTICE_SINGLE_EXP_PARAM_A				= 234[(yd_fieldoptions.field_enum_cname) = "教学任务单项经验奖励参数A（弟子）"];
	EN_CONST_MASTER_TASK_APPRENTICE_SINGLE_EXP_PARAM_B				= 235[(yd_fieldoptions.field_enum_cname) = "教学任务单项经验奖励参数B（弟子）"];
	EN_CONST_MASTER_TASK_APPRENTICE_PACKET_EXP_PARAM_A				= 236[(yd_fieldoptions.field_enum_cname) = "教学任务礼包经验奖励参数A（弟子）"];
	EN_CONST_MASTER_TASK_APPRENTICE_PACKET_EXP_PARAM_B				= 237[(yd_fieldoptions.field_enum_cname) = "教学任务礼包经验奖励参数B（弟子）"];
	EN_CONST_MASTER_TASK_PACKET_EXP_PARAM_A							= 238[(yd_fieldoptions.field_enum_cname) = "教学任务礼包经验奖励参数A（师傅）"];
	EN_CONST_MASTER_TASK_PACKET_EXP_PARAM_B							= 239[(yd_fieldoptions.field_enum_cname) = "教学任务礼包经验奖励参数B（师傅）"];
	EN_CONST_MASTER_TASK_GOOD_TEACH_DEGREE							= 240[(yd_fieldoptions.field_enum_cname) = "教学任务礼包固定良师值奖励（师傅）"];
	EN_CONST_MASTER_TASK_PACKET_DROP_ID								= 241[(yd_fieldoptions.field_enum_cname) = "教学任务礼包随机掉落包ID（师傅）"];
	EN_CONST_MASTER_TASK_MONEY_PARAM_A								= 242[(yd_fieldoptions.field_enum_cname) = "教学任务礼包银币奖励参数A（双方）"];
	EN_CONST_MASTER_TASK_MONEY_PARAM_B								= 243[(yd_fieldoptions.field_enum_cname) = "教学任务礼包银币奖励参数B（双方）"];
	EN_CONST_BATTLE_CORPS_OPEN_MIN_LV								= 244[(yd_fieldoptions.field_enum_cname) = "战队系统开启最低等级"];
	EN_CONST_LICENSE_OPEN_TASK_ID								    = 245[(yd_fieldoptions.field_enum_cname) = "十二支执照开启任务ID"];
    EN_CONST_MATCH_PT_STAGE_1                                       = 246[(yd_fieldoptions.field_enum_cname) = "对战匹配第一阶段时间"];
    EN_CONST_MATCH_PT_STAGE_2                                       = 247[(yd_fieldoptions.field_enum_cname) = "对战匹配第二阶段时间"];
    EN_CONST_MATCH_PT_STAGE_3                                       = 248[(yd_fieldoptions.field_enum_cname) = "对战匹配第三阶段时间"];
    EN_CONST_MATCH_PV_STAGE_1                                       = 249[(yd_fieldoptions.field_enum_cname) = "对战匹配第一阶段阈值"];
    EN_CONST_MATCH_PV_STAGE_2                                       = 250[(yd_fieldoptions.field_enum_cname) = "对战匹配第二阶段阈值"];
    EN_CONST_MATCH_PV_STAGE_3                                       = 251[(yd_fieldoptions.field_enum_cname) = "对战匹配第三阶段阈值"];
    EN_CONST_MATCH_PV_RIVAL                                         = 252[(yd_fieldoptions.field_enum_cname) = "队伍匹配阶段匹配阈值"];
    EN_CONST_MATCH_TEAM_MMR_VAL                                     = 253[(yd_fieldoptions.field_enum_cname) = "对战匹配队伍MMR计算常数"];
	EN_CONST_PARTNER_CE_BASE_RATIO                                  = 254[(yd_fieldoptions.field_enum_cname) = "伙伴基础评分"];
	EN_CONST_PARTNER_CE_ATTR_RATIO                                  = 255[(yd_fieldoptions.field_enum_cname) = "伙伴评分属性系数"];
	EN_CONST_PARTNER_CE_STAR_RATIO                                  = 256[(yd_fieldoptions.field_enum_cname) = "伙伴评分星级系数"];
	EN_CONST_PARTNER_CE_SKILL_RATIO_1                               = 257[(yd_fieldoptions.field_enum_cname) = "伙伴评分技能系数1"];
	EN_CONST_PARTNER_CE_SKILL_RATIO_2                               = 258[(yd_fieldoptions.field_enum_cname) = "伙伴评分技能系数2"];
	EN_CONST_PARTNER_CE_SKILL_BOOK_RATIO_1                          = 259[(yd_fieldoptions.field_enum_cname) = "伙伴评分低级技能书系数"];
	EN_CONST_PARTNER_CE_SKILL_BOOK_RATIO_2                          = 260[(yd_fieldoptions.field_enum_cname) = "伙伴评分高级技能书系数"];
	EN_CONST_PARTNER_CE_SKILL_LV_RATIO_0                            = 261[(yd_fieldoptions.field_enum_cname) = "伙伴评分技能等级系数0"];
	EN_CONST_PARTNER_CE_SKILL_LV_RATIO_1                            = 262[(yd_fieldoptions.field_enum_cname) = "伙伴评分技能等级系数1"];
	EN_CONST_PARTNER_CE_SKILL_LV_RATIO_2                            = 263[(yd_fieldoptions.field_enum_cname) = "伙伴评分技能等级系数2"];
	EN_CONST_PARTNER_CE_SKILL_LV_RATIO_3                            = 264[(yd_fieldoptions.field_enum_cname) = "伙伴评分技能等级系数3"];
	EN_CONST_PARTNER_CE_SKILL_LV_RATIO_4                            = 265[(yd_fieldoptions.field_enum_cname) = "伙伴评分技能等级系数4"];
	EN_CONST_PARTNER_CE_SKILL_LV_RATIO_5                            = 266[(yd_fieldoptions.field_enum_cname) = "伙伴评分技能等级系数5"];
	EN_CONST_PARTNER_CE_SKILL_LV_RATIO_6                            = 267[(yd_fieldoptions.field_enum_cname) = "伙伴评分技能等级系数6"];
	EN_CONST_EQUIP_GUID_LEVEL_MAX                                   = 268[(yd_fieldoptions.field_enum_cname) = "新手装备便捷穿戴失效等级"];
	EN_CONST_GUILD_GOODSTRANSPORT_PUBLISH_HELP_CD_TIME              = 269[(yd_fieldoptions.field_enum_cname) = "行会货运求助cd时间"];
	EN_CONST_FAMILY_TITLE_BE_LIMIT_LEN              				= 270[(yd_fieldoptions.field_enum_cname) = "家族称号前缀字节数"];
	EN_CONST_FAMILY_TITLE_EX_LIMIT_LEN              				= 271[(yd_fieldoptions.field_enum_cname) = "家族称号后缀字节数"];
	EN_CONST_GUILD_BATTLE_MAX_PROCESS                               = 272[(yd_fieldoptions.field_enum_cname) = "公会战占领最大进度"];
	EN_CONST_GUILD_BATTLE_COUNT_SCORE_DELTA_MS                      = 273[(yd_fieldoptions.field_enum_cname) = "公会战计算得分间隔毫秒"];
	EN_CONST_GUILD_BATTLE_INIT_POWER                                = 274[(yd_fieldoptions.field_enum_cname) = "公会战初始能量"];
	EN_CONST_GUILD_BATTLE_FAILED_REDUCE_POWER_1                     = 275[(yd_fieldoptions.field_enum_cname) = "公会战战斗失败扣除个人能量1"];
	EN_CONST_GUILD_BATTLE_FAILED_REDUCE_POWER_2                     = 276[(yd_fieldoptions.field_enum_cname) = "公会战战斗失败扣除个人能量2"];
	EN_CONST_GUILD_BATTLE_FAILED_REDUCE_POWER_3                     = 277[(yd_fieldoptions.field_enum_cname) = "公会战战斗失败扣除个人能量3"];
	EN_CONST_GUILD_BATTLE_FAILED_REDUCE_POWER_4                     = 278[(yd_fieldoptions.field_enum_cname) = "公会战战斗失败扣除个人能量4"];
	EN_CONST_GUILD_BATTLE_WIN_REDUCE_POWER_1                        = 279[(yd_fieldoptions.field_enum_cname) = "公会战战斗胜利扣除个人能量1"];
	EN_CONST_GUILD_BATTLE_WIN_REDUCE_POWER_2                        = 280[(yd_fieldoptions.field_enum_cname) = "公会战战斗胜利扣除个人能量2"];
	EN_CONST_GUILD_BATTLE_WIN_REDUCE_POWER_3                        = 281[(yd_fieldoptions.field_enum_cname) = "公会战战斗胜利扣除个人能量3"];
	EN_CONST_GUILD_BATTLE_WIN_REDUCE_POWER_4                        = 282[(yd_fieldoptions.field_enum_cname) = "公会战战斗胜利扣除个人能量4"];
	EN_CONST_GUILD_BATTLE_PROCESS_CALC_1                            = 283[(yd_fieldoptions.field_enum_cname) = "公会战NPC计算进度人数1"];
	EN_CONST_GUILD_BATTLE_PROCESS_CALC_2                            = 284[(yd_fieldoptions.field_enum_cname) = "公会战NPC计算进度人数2"];
	EN_CONST_GUILD_BATTLE_PROCESS_CALC_3                            = 285[(yd_fieldoptions.field_enum_cname) = "公会战NPC计算进度人数3"];
	EN_CONST_GUILD_BATTLE_PROCESS_CHANGE_1                          = 286[(yd_fieldoptions.field_enum_cname) = "公会战NPC计算进度获得进度值1"];
	EN_CONST_GUILD_BATTLE_PROCESS_CHANGE_2                          = 287[(yd_fieldoptions.field_enum_cname) = "公会战NPC计算进度获得进度值2"];
	EN_CONST_GUILD_BATTLE_PROCESS_CHANGE_3                          = 288[(yd_fieldoptions.field_enum_cname) = "公会战NPC计算进度获得进度值3"];
	EN_CONST_GUILD_BATTLE_PROCESS_SINGLE_CHANGE                     = 289[(yd_fieldoptions.field_enum_cname) = "公会战NPC计算进度独占获得进度值"];
	EN_CONST_GUILD_BATTLE_HOLD_ADD_SCORE                            = 290[(yd_fieldoptions.field_enum_cname) = "公会战NPC占领获得积分"];
	EN_CONST_GUILD_BATTLE_HOLD_NEED_PROCESS                         = 291[(yd_fieldoptions.field_enum_cname) = "公会战NPC占领需要进度值"];
	EN_CONST_TROUPE_MEMBER_CHASE_WEEK_LIMTE              			= 292[(yd_fieldoptions.field_enum_cname) = "幻影旅团每周追捕最大次数"];
	EN_CONST_TROUPE_CORE_CHASE_WEEK_LIMTE              			    = 293[(yd_fieldoptions.field_enum_cname) = "幻影旅团中坚每周追捕最大次数"];
	EN_CONST_TROUPE_LEADER_CHASE_WEEK_LIMTE              			= 294[(yd_fieldoptions.field_enum_cname) = "幻影旅团团长每周追捕最大次数"];
	EN_CONST_GUILD_BATTLE_WIN_NEED_SCORE                            = 295[(yd_fieldoptions.field_enum_cname) = "公会战胜利需要分数"];
	EN_CONST_FAMILY_INIT_MEMBER_COUNT              					= 296[(yd_fieldoptions.field_enum_cname) = "家族初始化最大人数"];
	EN_CONST_FAMILY_MAX_MEMBER_COUNT              					= 297[(yd_fieldoptions.field_enum_cname) = "家族人数上限"];
	EN_CONST_FAMILY_CREATE_MONEY	              					= 298[(yd_fieldoptions.field_enum_cname) = "家族创建消耗银币"];
	EN_CONST_FAMILY_SIGN_LIMIT_LEN	              					= 299[(yd_fieldoptions.field_enum_cname) = "家族宣言字节数"];
	EN_CONST_FAMILY_MEMO_NAME_LIMIT_LEN	              				= 300[(yd_fieldoptions.field_enum_cname) = "家族成员字号字节数"];
	EN_CONST_FAMILY_MODIFY_TITLE_ITEM_ID              				= 301[(yd_fieldoptions.field_enum_cname) = "修改家族称号的物品id"];
	EN_CONST_FAMILY_MODIFY_TITLE_ITEM_COUNT            				= 302[(yd_fieldoptions.field_enum_cname) = "修改家族称号的物品数量"];
	EN_CONST_GUILD_BATTLE_ATTCK_RANGE                               = 303[(yd_fieldoptions.field_enum_cname) = "公会战玩家攻击范围"];
	EN_CONST_FAMILY_MODIFY_TITLE_DEGREE              				= 304[(yd_fieldoptions.field_enum_cname) = "修改家族称号消耗的家族值"];
	EN_CONST_FAMILY_MODIFY_TITLE_TIMEOUT              				= 305[(yd_fieldoptions.field_enum_cname) = "修改家族称号投票时间"];
	EN_CONST_FIELDBOX_COUNT											= 306[(yd_fieldoptions.field_enum_cname) = "野外宝箱可开启次数"];
	EN_CONST_FAMILY_ADD_MEMCOUNT_DEGREE              				= 307[(yd_fieldoptions.field_enum_cname) = "增加家族人数消耗家族值"];
	EN_CONST_FAMILY_ADD_MEMCOUNT_TIMEOUT              				= 308[(yd_fieldoptions.field_enum_cname) = "增加家族人数投票时间"];
	EN_CONST_FAMILY_INVITE_LIST_TIMEOUT              				= 309[(yd_fieldoptions.field_enum_cname) = "家族邀请好友列表超时时间"];
	EN_CONST_FAMILY_INVITE_MIN_FRIEND_DEGREE           				= 310[(yd_fieldoptions.field_enum_cname) = "邀请加入家族最低的好友度"];
	EN_CONST_FAMILY_INVITE_ROLE_TIMEOUT              				= 311[(yd_fieldoptions.field_enum_cname) = "家族邀请好友超时时间"];
	EN_CONST_FAMILY_INVITE_VOTE_TIMEOUT              				= 312[(yd_fieldoptions.field_enum_cname) = "家族邀请新人投票超时时间"];
	EN_CONST_FAMILY_FIRE_VOTE_TIMEOUT              					= 313[(yd_fieldoptions.field_enum_cname) = "家族请离旧人投票超时时间"];
	EN_CONST_FAMILY_LEAVE_FAMILY_TIMEOUT              				= 314[(yd_fieldoptions.field_enum_cname) = "脱离家族投票超时时间"];
	EN_CONST_FAMILY_MODIFY_MEMO_COST              					= 315[(yd_fieldoptions.field_enum_cname) = "修改字号的消耗"];
	EN_CONST_GOLD_EXCHANGE_DAY_LIMIT              					= 316[(yd_fieldoptions.field_enum_cname) = "每日金钱兑换上限"];
	EN_CONST_FAMILY_CALL_ACTIVITY_TIMEOUT          					= 317[(yd_fieldoptions.field_enum_cname) = "发起仪式的超时时间"];
	EN_CONST_FAMILY_STATION_MAP_ID		          					= 318[(yd_fieldoptions.field_enum_cname) = "家族仪式场景id"];
	EN_CONST_ARENA_GET_PLAYER_LIST_DELTA                            = 319[(yd_fieldoptions.field_enum_cname) = "擂台拉取玩家信息间隔(ms)"];
	EN_CONST_FAMILY_PROCESS_TIMEOUT_CD          					= 320[(yd_fieldoptions.field_enum_cname) = "阶段超时cd时间"];
	EN_CONST_GUILD_BOSS_COPY_PARAM_A								= 321[(yd_fieldoptions.field_enum_cname) = "行会boss残影通关行会贡献奖励参数A"];
	EN_CONST_GUILD_BOSS_COPY_PARAM_B								= 322[(yd_fieldoptions.field_enum_cname) = "行会boss残影通关行会贡献奖励参数B"];
	EN_CONST_GUILD_BOSS_PARAM_A										= 323[(yd_fieldoptions.field_enum_cname) = "行会boss本体通关行会贡献奖励参数A"];
	EN_CONST_GUILD_BOSS_PARAM_B										= 324[(yd_fieldoptions.field_enum_cname) = "行会boss本体通关行会贡献奖励参数B"];
	EN_CONST_FAMILY_EAT_FOOD_TIME		          					= 325[(yd_fieldoptions.field_enum_cname) = "吃菜跟撤菜的间隔时间"];
	EN_CONST_FAMILY_TAKE_FOOD_TIME		          					= 326[(yd_fieldoptions.field_enum_cname) = "撤菜到下一次上菜的间隔时间"];
	EN_CONST_FAMILY_VOTE_RANK_TIME		          					= 327[(yd_fieldoptions.field_enum_cname) = "谈资论辈投票的时间"];
	EN_CONST_FAMILY_CHANGE_FOOD_MIN_TIME		          			= 328[(yd_fieldoptions.field_enum_cname) = "上菜后最短撤菜时间"];
	EN_CONST_FAMILY_MOD_TITLE_TIME		          					= 329[(yd_fieldoptions.field_enum_cname) = "家族称号阶段的时间"];
	EN_CONST_FAMILY_CDD_TIME		          						= 330[(yd_fieldoptions.field_enum_cname) = "契约阶段的时间"];
	EN_CONST_SIGN_PAY_MONEY		          						    = 331[(yd_fieldoptions.field_enum_cname) = "累计登陆奖励补领消耗货币数量"];
	EN_CONST_SIGN_PAY_TYPE		          						    = 332[(yd_fieldoptions.field_enum_cname) = "累计登陆奖励补领消耗货币类型"];
	EN_CONST_SIGN_PAY_LIMITE		          						= 333[(yd_fieldoptions.field_enum_cname) = "累计登陆奖励补领上限"];
	EN_CONST_FAMILY_START_TIME		          						= 334[(yd_fieldoptions.field_enum_cname) = "上菜跟吃菜的间隔时间"];
	EN_CONST_FAMILY_START_TIME_LONG	          						= 335[(yd_fieldoptions.field_enum_cname) = "长动画上菜跟吃菜的间隔时间"];
	EN_CONST_MAP_CHAT_INTERVAL									    = 336[(yd_fieldoptions.field_enum_cname) = "当前频道发言一次限制秒数"];
	EN_CONST_BATTLE_MP_DRUG_CD_SECONDS								= 337[(yd_fieldoptions.field_enum_cname) = "战斗内回蓝药品公共CD"];
	EN_CONST_FAMILY_ACTIVITY_FOOD_ONE_BUFF							= 338[(yd_fieldoptions.field_enum_cname) = "家族晚宴菜肴1BUFF"];
	EN_CONST_FAMILY_ACTIVITY_FOOD_TWO_BUFF							= 339[(yd_fieldoptions.field_enum_cname) = "家族晚宴菜肴2BUFF"];
	EN_CONST_FAMILY_ACTIVITY_FOOD_THREE_BUFF						= 340[(yd_fieldoptions.field_enum_cname) = "家族晚宴菜肴3BUFF"];
	EN_CONST_FAMILY_ACTIVITY_FOOD_FOUR_BUFF							= 341[(yd_fieldoptions.field_enum_cname) = "家族晚宴菜肴4BUFF"];
	EN_CONST_FAMILY_ACTIVITY_FOOD_FIVE_BUFF							= 342[(yd_fieldoptions.field_enum_cname) = "家族晚宴菜肴5BUFF"];
	EN_CONST_FAMILY_ACTIVITY_FOOD_SIX_BUFF							= 343[(yd_fieldoptions.field_enum_cname) = "家族晚宴菜肴6BUFF"];
	EN_CONST_FAMILY_ACTIVITY_FOOD_SEVEN_BUFF						= 344[(yd_fieldoptions.field_enum_cname) = "家族晚宴菜肴7BUFF"];
	EN_CONST_TEAM_MATCH_CHANNEL_CHAT_GAP             				= 345[(yd_fieldoptions.field_enum_cname) = "组队频道发言间隔"];
	EN_CONST_DUNGEON_AUTO_AWARD_TIME_SEC                            = 346[(yd_fieldoptions.field_enum_cname) = "副本自动发奖时间(秒)"];
	EN_CONST_PARTNER_HAND_SKILL_LEVEL_UP_ITEM_ID                    = 347[(yd_fieldoptions.field_enum_cname) = "伙伴SP技能升级道具ID"];
	EN_CONST_PARTNER_HAND_SKILL_LEVEL_UP_ITEM_EXP                   = 348[(yd_fieldoptions.field_enum_cname) = "伙伴SP技能升级道具经验"];
	EN_CONST_PARTNER_HAND_SKILL_LEVEL_UP_MOMEY                      = 349[(yd_fieldoptions.field_enum_cname) = "伙伴SP技能升级消耗银币"];
	EN_CONST_GUILD_VALUABLE_BOX_ID									= 350[(yd_fieldoptions.field_enum_cname) = "行会宝匣ID"];
	EN_CONST_MAGIC_CHALLENGE_ITEM									= 355[(yd_fieldoptions.field_enum_cname) = "无尽迷宫次数道具"];
	EN_CONST_PLAT_BATTLE_EXP_AWARD          						= 356[(yd_fieldoptions.field_enum_cname) = "平台经验加成比例"];
	EN_CONST_MAGIC_CHALLENGE_LV										= 357[(yd_fieldoptions.field_enum_cname) = "无尽迷宫等级限制"];
	EN_CONST_MAGIC_TOTAL_SCORE										= 358[(yd_fieldoptions.field_enum_cname) = "无尽迷宫进度值"];
	EN_CONST_MAGIC_BLESS_VALUE										= 359[(yd_fieldoptions.field_enum_cname) = "无尽迷宫祝福需求值"];
	EN_CONST_FRIEND_DEGREE_MAX_VALUE                                = 360[(yd_fieldoptions.field_enum_cname) = "好友度最大值"];
	EN_CONST_CLEAN_FITANT_CD										= 361[(yd_fieldoptions.field_enum_cname) = "挖宝触发嵌合蚁事件的CD(秒)"];
	EN_CONST_MONSTER_ATTR_ADJUST_FACTOR_M                           = 362[(yd_fieldoptions.field_enum_cname) = "怪物属性修正系数M"];
	EN_CONST_MONSTER_ATTR_ADJUST_FACTOR_N                           = 363[(yd_fieldoptions.field_enum_cname) = "怪物属性修正系数N"];
	EN_CONST_PARTNER_MONSTER_ATTR_ADJUST_FACTOR_M                   = 364[(yd_fieldoptions.field_enum_cname) = "伙伴战怪物属性修正系数M"];
	EN_CONST_PARTNER_MONSTER_ATTR_ADJUST_FACTOR_N                   = 365[(yd_fieldoptions.field_enum_cname) = "伙伴战怪物属性修正系数N"];
	EN_CONST_ESCORT_REQUIRED_LEVEL_1                                = 366[(yd_fieldoptions.field_enum_cname) = "低级要人护送需求等级"];
	EN_CONST_ESCORT_REQUIRED_LEVEL_2                                = 367[(yd_fieldoptions.field_enum_cname) = "高级要人护送需求等级"];
	EN_CONST_DAILY_RECOVER_PLEDGE_POINT                             = 368[(yd_fieldoptions.field_enum_cname) = "每日恢复猎物追踪点数"];
	EN_CONST_DAILY_RECOVER_FP                                       = 369[(yd_fieldoptions.field_enum_cname) = "每天恢复专注点"];
	EN_CSONT_DAILY_SEND_MATIC_ITEM_COUNT                            = 370[(yd_fieldoptions.field_enum_cname) = "每日发送无尽迷宫钥匙数目"];
	EN_CSONT_HUNTER_PROF_CHANGE_CD_TIME                             = 371[(yd_fieldoptions.field_enum_cname) = "更换猎人职业的cd时间"];
	EN_CONST_PARTNER_TREASURE_ORANGE_QUALITY_SKILL_NUM              = 372[(yd_fieldoptions.field_enum_cname) = "秘宝橙色品质技能数"];
	EN_CSONT_AOYI_SKILLSLOT_NEED_LEVEL                              = 373[(yd_fieldoptions.field_enum_cname) = "奥义槽位开启等级"];
	EN_CONST_DAILY_RECOVER_MULTI_LEVEL_POINT                        = 374[(yd_fieldoptions.field_enum_cname) = "每日恢复连战点数"];
    EN_CONST_1V1_MATCH_TIME_1                                       = 375[(yd_fieldoptions.field_enum_cname) = "对战1v1匹配第一阶段时间"];
    EN_CONST_1V1_MATCH_TIME_2                                       = 376[(yd_fieldoptions.field_enum_cname) = "对战1v1匹配第二阶段时间"];
    EN_CONST_1V1_MATCH_TIME_3                                       = 377[(yd_fieldoptions.field_enum_cname) = "对战1v1匹配第三阶段时间"];
    EN_CONST_1V1_MATCH_RANGE_1                                      = 378[(yd_fieldoptions.field_enum_cname) = "对战1v1匹配第一阶段阈值"];
    EN_CONST_1V1_MATCH_RANGE_2                                      = 379[(yd_fieldoptions.field_enum_cname) = "对战1v1匹配第二阶段阈值"];
    EN_CONST_1V1_MATCH_RANGE_3                                      = 380[(yd_fieldoptions.field_enum_cname) = "对战1v1匹配第三阶段阈值"];
    EN_CONST_1V1_MATCH_MMR_VAL                                      = 381[(yd_fieldoptions.field_enum_cname) = "对战1v1匹配MMR计算常数"];
    EN_CONST_1V1_MATCH_CE_MIN                                       = 382[(yd_fieldoptions.field_enum_cname) = "对战1v1AI战力低值系数"];
    EN_CONST_1V1_MATCH_CE_MAX                                       = 383[(yd_fieldoptions.field_enum_cname) = "对战1v1AI战力高值系数"];
	EN_CONST_SKILL_RESET_GOLD_RATIO                                 = 384[(yd_fieldoptions.field_enum_cname) = "重置天赋金钱系数"]; 
	EN_CONST_SKILL_RESEARCH_INIT_LEVEL                              = 385[(yd_fieldoptions.field_enum_cname) = "行会技能研究初始等级"]; 
	EN_CONST_GUILD_PIECE_HELP_ADD_CONTRI                            = 386[(yd_fieldoptions.field_enum_cname) = "行会捐符增加的行会贡献"]; 
	EN_CONST_MILITANT_MATCH_PROTECT_TIME_WIN                        = 387[(yd_fieldoptions.field_enum_cname) = "比武大会胜利出战保护时间"];
	EN_CONST_TEAM_SNS_INVITE_NUM                                    = 388[(yd_fieldoptions.field_enum_cname) = "组队推送人数"];
	EN_CONST_RECV_TEAM_SNS_INVITE_COUNT                             = 389[(yd_fieldoptions.field_enum_cname) = "组队推送每天接收次数"];
	EN_CONST_ONLINE_REWARD_TIME_1                                   = 390[(yd_fieldoptions.field_enum_cname) = "在线奖励时间间隔1"];
	EN_CONST_ONLINE_REWARD_TIME_2                                   = 391[(yd_fieldoptions.field_enum_cname) = "在线奖励时间间隔2"];
	EN_CONST_ONLINE_REWARD_TIME_3                                   = 392[(yd_fieldoptions.field_enum_cname) = "在线奖励时间间隔3"];
	EN_CONST_ONLINE_REWARD_TIME_4                                   = 393[(yd_fieldoptions.field_enum_cname) = "在线奖励时间间隔4"];
	EN_CONST_ONLINE_REWARD_TIME_5                                   = 394[(yd_fieldoptions.field_enum_cname) = "在线奖励时间间隔5"];
	EN_CONST_ONLINE_REWARD_TIME_6                                   = 395[(yd_fieldoptions.field_enum_cname) = "在线奖励时间间隔6"];
	EN_CONST_ACTIVITY_EIGHT_ONLINE_DAY                              = 396[(yd_fieldoptions.field_enum_cname) = "嘉年华活动的在线时长"];
	EN_CONST_SWITCH_FIGHT_PARTNER_SEC_BEFORE_REVIVAL                = 397[(yd_fieldoptions.field_enum_cname) = "伙伴复活多少秒前可切换伙伴"];
	EN_CONST_WORLD_CHAT_NEED_LEVEL                                  = 398[(yd_fieldoptions.field_enum_cname) = "世界聊天需要等级"];
	EN_CONST_WORLD_CHAT_INTERVAL_LV40                               = 399[(yd_fieldoptions.field_enum_cname) = "40级世界聊天间隔"];
	EN_CONST_WORLD_CHAT_INTERVAL_LV50                               = 400[(yd_fieldoptions.field_enum_cname) = "50级世界聊天间隔"];
	EN_CONST_WORLD_CHAT_INTERVAL_LV60                               = 401[(yd_fieldoptions.field_enum_cname) = "60级世界聊天间隔"];
	EN_CONST_WORLD_CHAT_INTERVAL_LV70                               = 402[(yd_fieldoptions.field_enum_cname) = "70级世界聊天间隔"];
	EN_CONST_GUILD_QUESTION_PREPARE_TIME                            = 403[(yd_fieldoptions.field_enum_cname) = "行会答题准备阶段的时间"];
	EN_CONST_GUILD_QUESTION_ANSWER_TIME                             = 404[(yd_fieldoptions.field_enum_cname) = "行会答题答题阶段的时间"];
	EN_CONST_GUILD_QUESTION_WAIT_TIME                            	= 405[(yd_fieldoptions.field_enum_cname) = "行会答题等待阶段的时间"];
	EN_CONST_GUILD_QUESTION_MAX_COUNT                            	= 406[(yd_fieldoptions.field_enum_cname) = "行会答题出题数"];
	EN_CONST_GUILD_QUESTION_FIRST_RWD_SCORE                        	= 407[(yd_fieldoptions.field_enum_cname) = "行会答题第一快奖励积分"];
	EN_CONST_GUILD_QUESTION_SECOND_RWD_SCORE                        = 408[(yd_fieldoptions.field_enum_cname) = "行会答题第二快奖励积分"];
	EN_CONST_GUILD_QUESTION_THIRD_RWD_SCORE                        	= 409[(yd_fieldoptions.field_enum_cname) = "行会答题第三快奖励积分"];
	EN_CONST_GUILD_QUESTION_OTHER_START_RWD_SCORE                   = 410[(yd_fieldoptions.field_enum_cname) = "行会答题其他奖励积分"];
	EN_CONST_GUILD_QUESTION_COST_RWD_SCORE                   		= 411[(yd_fieldoptions.field_enum_cname) = "行会答题递减积分"];
	EN_CONST_GUILD_QUESTION_MIN_RWD_SCORE                   		= 412[(yd_fieldoptions.field_enum_cname) = "行会答题最低奖励积分"];
	EN_CONST_GUILD_QUESTION_CD_TIME	                   				= 413[(yd_fieldoptions.field_enum_cname) = "行会答题聊天的cd"];
    EN_CONST_ROLL_ITEM_TIME                                         = 414[(yd_fieldoptions.field_enum_cname) = "ROLL点阶段时间"];
	EN_CONST_SIGN_IN_MONTHLY_QQ_VIP_AWARD                   		= 415[(yd_fieldoptions.field_enum_cname) = "QQ会员签到额外奖励"];
	EN_CONST_SIGN_IN_MONTHLY_QQ_GAMECENTER_AWARD              		= 416[(yd_fieldoptions.field_enum_cname) = "QQ游戏中心签到额外奖励"];
    EN_CONST_SIGN_IN_MONTHLY_WX_GAMECENTER_AWARD                    = 417[(yd_fieldoptions.field_enum_cname) = "微信游戏中心签到额外奖励"];    
	EN_CONST_PLAYER_SKILL_CE_PARAM_0                                = 418[(yd_fieldoptions.field_enum_cname) = "玩家技能评分系数0"];
	EN_CONST_PLAYER_SKILL_CE_PARAM_1                                = 419[(yd_fieldoptions.field_enum_cname) = "玩家技能评分系数1"];
	EN_CONST_PLAYER_SP_SKILL_CE_PARAM_0                             = 420[(yd_fieldoptions.field_enum_cname) = "玩家奥义技能评分系数0"];
	EN_CONST_PLAYER_SP_SKILL_CE_PARAM_1                             = 421[(yd_fieldoptions.field_enum_cname) = "玩家奥义技能评分系数1"];
	EN_CONST_PLAYER_LIFE_SKILL_CE_PARAM_0                           = 422[(yd_fieldoptions.field_enum_cname) = "玩家修炼技能评分系数0"];
	EN_CONST_PLAYER_LIFE_SKILL_CE_PARAM_1                           = 423[(yd_fieldoptions.field_enum_cname) = "玩家修炼技能评分系数1"];
	EN_CONST_PARTNER_SP_SKILL_CE_PARAM_0                            = 424[(yd_fieldoptions.field_enum_cname) = "伙伴SP技能评分系数0"];
	EN_CONST_PARTNER_SP_SKILL_CE_PARAM_1                            = 425[(yd_fieldoptions.field_enum_cname) = "伙伴SP技能评分系数1"];
	EN_CONST_FAMILY_GET_BUFF_ID					                    = 426[(yd_fieldoptions.field_enum_cname) = "家族buff的ID"];
	EN_CONST_DAILY_RECOVER_PLEDGE_POINT_PLAYER_LEVEL                = 427[(yd_fieldoptions.field_enum_cname) = "每日恢复猎物追踪点数需要玩家等级"];
	EN_CONST_GUILD_HOT_GET_LOW_BONUS								= 428[(yd_fieldoptions.field_enum_cname) = "领取行会分红最低人气值"];
	EN_CONST_PARTNER_ASYNC_REWARD_ITEM_ID1                          = 429[(yd_fieldoptions.field_enum_cname) = "伙伴异步pvp活跃奖励物品ID1"];
	EN_CONST_GUILD_QUEST_ID                                         = 430[(yd_fieldoptions.field_enum_cname) = "进入行会自动接取任务ID"];
	EN_CONST_MASTER_GET_LIST_COUNT                                  = 431[(yd_fieldoptions.field_enum_cname) = "寻师或者寻徒列表显示个数"];
	EN_CONST_MASTER_APPLY_MAX_COUNT                                 = 432[(yd_fieldoptions.field_enum_cname) = "申请拜师或者收徒的最大次数"];
	EN_CONST_MASTER_REFRESH_CD_TIME                                 = 433[(yd_fieldoptions.field_enum_cname) = "寻师或者寻徒换一批的cd时间"];
	EN_CONST_SIMPLE_BOSS_BLOOD_ONE                             		= 434[(yd_fieldoptions.field_enum_cname) = "普通怪物血条常量1"];
	EN_CONST_SIMPLE_BOSS_BLOOD_TWO                                  = 435[(yd_fieldoptions.field_enum_cname) = "普通怪物血条常量2"];
	EN_CONST_WEIGHT_BOSS_BLOOD_ONE                                  = 436[(yd_fieldoptions.field_enum_cname) = "Boss怪物血条常量1"];
	EN_CONST_WEIGHT_BOSS_BLOOD_TWO                                  = 437[(yd_fieldoptions.field_enum_cname) = "Boss怪物血条常量2"];
	EN_CONST_PARTNER_ASYNC_REWARD_ITEM_ID2                          = 438[(yd_fieldoptions.field_enum_cname) = "伙伴异步pvp活跃奖励物品ID2"];
	EN_CONST_GUILD_TRANSPORT_EXP_MIN_LV	                            = 439[(yd_fieldoptions.field_enum_cname) = "行会传功的最低等级"];
	EN_CONST_GUILD_TRANSPORT_EXP_SRC_COUNT                          = 440[(yd_fieldoptions.field_enum_cname) = "每日行会传功的次数"];
	EN_CONST_GUILD_TRANSPORT_EXP_DST_COUNT                          = 441[(yd_fieldoptions.field_enum_cname) = "每日行会被传功的次数"];
	EN_CONST_GUILD_TRANSPORT_EXP_TIME	                            = 442[(yd_fieldoptions.field_enum_cname) = "行会传功的总时间"];
	EN_CONST_GUILD_TRANSPORT_EXP_STOP_POINT_A                       = 443[(yd_fieldoptions.field_enum_cname) = "行会传功的阻滞点1"];
	EN_CONST_GUILD_TRANSPORT_EXP_STOP_POINT_B                       = 444[(yd_fieldoptions.field_enum_cname) = "行会传功的阻滞点2"];
	EN_CONST_GUILD_TRANSPORT_EXP_SEND_EXP_TIME                      = 445[(yd_fieldoptions.field_enum_cname) = "行会传功同步经验和行会贡献的时间"];
	EN_CONST_GUILD_TRANSPORT_EXP_PARAM_A                       		= 446[(yd_fieldoptions.field_enum_cname) = "行会传功的经验参数1"];
	EN_CONST_GUILD_TRANSPORT_EXP_PARAM_B                       		= 447[(yd_fieldoptions.field_enum_cname) = "行会传功的经验参数2"];
	EN_CONST_GUILD_TRANS_TAX_PARAM_A                       			= 448[(yd_fieldoptions.field_enum_cname) = "行会传功的贡献参数1"];
	EN_CONST_GUILD_TRANS_TAX_PARAM_B                       			= 449[(yd_fieldoptions.field_enum_cname) = "行会传功的贡献参数2"];
	EN_CONST_GIFT_DAILY_SEND_LIMIT                                  = 450[(yd_fieldoptions.field_enum_cname) = "每日赠送礼物次数限制"];
	EN_CONST_GIFT_DAILY_BEG_LIMIT                                   = 451[(yd_fieldoptions.field_enum_cname) = "每日请求代付礼物次数限制"];
	EN_CONST_GUILD_BOSS_ACTIVITY_ID                                 = 452[(yd_fieldoptions.field_enum_cname) = "行会boss的活动id"];
	EN_CONST_GUILD_REBATE_MIN_DAY	                                = 453[(yd_fieldoptions.field_enum_cname) = "行会返利最低天数"];
	EN_CONST_GUILD_REBATE_ALL_MIN_DAY                               = 454[(yd_fieldoptions.field_enum_cname) = "行会全额返利最低天数"];
	EN_CONST_GUILD_REBATE_MIN_SCORE                                 = 455[(yd_fieldoptions.field_enum_cname) = "行会返利最低活跃度限制"];
	EN_CONST_GUILD_HIGH_MEM_REFRESH                                 = 456[(yd_fieldoptions.field_enum_cname) = "每日0点设置精英的比例"];
	EN_CONST_GUILD_REBATE_MIN_RWD_PERCENT                           = 457[(yd_fieldoptions.field_enum_cname) = "行会返利最低天数的奖励比"];
	EN_CONST_GUILD_REBATE_TITLE_CHANGE_PERCENT                      = 458[(yd_fieldoptions.field_enum_cname) = "行会返利职位变更的奖励比"];
	EN_CONST_GUILD_FIRST_BONUS_MIN_LEVEL	                        = 459[(yd_fieldoptions.field_enum_cname) = "行会第一次分红的等级"];
	EN_CONST_GUILD_FIRST_BONUS_VALUE			                    = 460[(yd_fieldoptions.field_enum_cname) = "行会第一次分红的值"];
	EN_CONST_GUILD_TRANS_EXP_PREPARE_TIME		                    = 461[(yd_fieldoptions.field_enum_cname) = "行会传功准备阶段超时时间"];
	EN_CONST_EQUIP_BUFF_SCORE_RATIO		                            = 462[(yd_fieldoptions.field_enum_cname) = "附魔评分系数"];
	EN_CONST_GUILD_TRANS_EXP_INVITE_TIME		                    = 463[(yd_fieldoptions.field_enum_cname) = "行会传功邀请超时时间"];
    EN_CONST_SKILL_SLOT1_OPEN_LV                                    = 464[(yd_fieldoptions.field_enum_cname) = "技能槽位1开放等级"]; 
    EN_CONST_SKILL_SLOT2_OPEN_LV                                    = 465[(yd_fieldoptions.field_enum_cname) = "技能槽位2开放等级"]; 
    EN_CONST_SKILL_SLOT3_OPEN_LV                                    = 466[(yd_fieldoptions.field_enum_cname) = "技能槽位3开放等级"]; 
    EN_CONST_SKILL_SLOT4_OPEN_LV                                    = 467[(yd_fieldoptions.field_enum_cname) = "技能槽位4开放等级"]; 
    EN_CONST_SKILL_SLOT5_OPEN_LV                                    = 468[(yd_fieldoptions.field_enum_cname) = "技能槽位5开放等级"]; 	
    EN_CONST_SAFE_SCORE_CHECK_TIME                                  = 469[(yd_fieldoptions.field_enum_cname) = "安全信用检测的间隔时间"]; 	
    EN_CONST_SAFE_SCORE_LIMIT_VALUE                                 = 470[(yd_fieldoptions.field_enum_cname) = "安全信用限制积分值"]; 	
    EN_CONST_SAFE_SCORE_LIMIT_CHAT_LV                               = 471[(yd_fieldoptions.field_enum_cname) = "安全信用限制聊天等级"]; 	
    EN_CONST_SAFE_SCORE_LIMIT_CTC_LV                                = 472[(yd_fieldoptions.field_enum_cname) = "安全信用限制私聊等级"]; 	
    EN_CONST_SAFE_SCORE_LIMIT_ADD_FRIEND_LV                         = 473[(yd_fieldoptions.field_enum_cname) = "安全信用限制加好友等级"]; 	
    EN_CONST_SAFE_SCORE_LIMIT_GROUP_CHAT_LV                         = 474[(yd_fieldoptions.field_enum_cname) = "安全信用限制群组聊天等级"]; 
    EN_CONST_DMG_CONST_FACTOR_A                                     = 475[(yd_fieldoptions.field_enum_cname) = "伤害系数A"]; 
    EN_CONST_DMG_CONST_FACTOR_B                                     = 476[(yd_fieldoptions.field_enum_cname) = "伤害系数B"]; 
    EN_CONST_ELEMENT_CONST_FACTOR                                   = 477[(yd_fieldoptions.field_enum_cname) = "元素伤害系数"];  
	EN_CONST_SKILL_RESET_COST                                       = 478[(yd_fieldoptions.field_enum_cname) = "技能重置消耗"]; 
	EN_CONST_TRANSFER_TRAINING_LEVELID                              = 479[(yd_fieldoptions.field_enum_cname) = "转职体验关卡ID"]; 
	EN_CONST_DIAMOND_TO_GOLD_RATIO                                  = 480[(yd_fieldoptions.field_enum_cname) = "钻石兑换金币比例"]; 
	EN_CONST_GOLD_TO_MONEY_RATIO                                    = 481[(yd_fieldoptions.field_enum_cname) = "金币兑换银币比例"]; 
	EN_CONST_GEMSTONE_COMPOSE_RATE2                                 = 482[(yd_fieldoptions.field_enum_cname) = "2个宝石合成概率"]; 
	EN_CONST_GEMSTONE_COMPOSE_RATE3                                 = 483[(yd_fieldoptions.field_enum_cname) = "3个宝石合成概率"]; 
	EN_CONST_GEMSTONE_COMPOSE_RATE4                                 = 484[(yd_fieldoptions.field_enum_cname) = "4个宝石合成概率"]; 
	EN_CONST_GEMSTONE_COMPOSE_RATE5                                 = 485[(yd_fieldoptions.field_enum_cname) = "5个宝石合成概率"];
	EN_CONST_GEMSTONE_COMPOSE_CONSUME_RATIO                         = 486[(yd_fieldoptions.field_enum_cname) = "宝石合成消耗系数"];
	EN_CONST_PARTNER_MAX_POWER                                      = 487[(yd_fieldoptions.field_enum_cname) = "伙伴体力上限"];
	
	EN_CONST_EQUIP_MAGIC_CARD_COMPOSE_MONEY_1						= 488[(yd_fieldoptions.field_enum_cname) = "附魔卡颜色1合成费用"];
	EN_CONST_EQUIP_MAGIC_CARD_COMPOSE_MONEY_2						= 489[(yd_fieldoptions.field_enum_cname) = "附魔卡颜色2合成费用"];
	EN_CONST_EQUIP_MAGIC_CARD_COMPOSE_MONEY_3						= 490[(yd_fieldoptions.field_enum_cname) = "附魔卡颜色3合成费用"];
	EN_CONST_EQUIP_MAGIC_CARD_COMPOSE_MONEY_4						= 491[(yd_fieldoptions.field_enum_cname) = "附魔卡颜色4合成费用"];
	EN_CONST_EQUIP_MAGIC_CARD_COMPOSE_1TO1_RATE						= 492[(yd_fieldoptions.field_enum_cname) = "附魔卡颜色1合成1概率"];
	EN_CONST_EQUIP_MAGIC_CARD_COMPOSE_1TO2_RATE						= 493[(yd_fieldoptions.field_enum_cname) = "附魔卡颜色1合成2概率"];
	EN_CONST_EQUIP_MAGIC_CARD_COMPOSE_2TO2_RATE						= 494[(yd_fieldoptions.field_enum_cname) = "附魔卡颜色2合成2概率"];
	EN_CONST_EQUIP_MAGIC_CARD_COMPOSE_2TO3_RATE						= 495[(yd_fieldoptions.field_enum_cname) = "附魔卡颜色2合成3概率"];
	EN_CONST_EQUIP_MAGIC_CARD_COMPOSE_3TO3_RATE						= 496[(yd_fieldoptions.field_enum_cname) = "附魔卡颜色3合成3概率"];
	EN_CONST_EQUIP_MAGIC_CARD_COMPOSE_3TO4_RATE						= 497[(yd_fieldoptions.field_enum_cname) = "附魔卡颜色3合成4概率"];
	EN_CONST_EQUIP_MAGIC_CARD_COMPOSE_4TO4_RATE						= 498[(yd_fieldoptions.field_enum_cname) = "附魔卡颜色4合成4概率"];

	EN_CONST_PARTNER_TRAINING_GOLD                                  = 499[(yd_fieldoptions.field_enum_cname) = "伙伴金币训练消耗"];
	EN_CONST_PARTNER_TRAINING_JIENI                                 = 500[(yd_fieldoptions.field_enum_cname) = "伙伴粉钻训练消耗"];
	EN_CONST_PARTNER_TRAINING_CRI_RATIO                             = 501[(yd_fieldoptions.field_enum_cname) = "伙伴粉钻训练暴击率"];
	EN_CONST_PARTNER_TRAINING_EXP                                   = 502[(yd_fieldoptions.field_enum_cname) = "伙伴训练增加EXP"];
	EN_CONST_PARTNER_TRAINING_GOLD_DAILY_CNT                        = 503[(yd_fieldoptions.field_enum_cname) = "伙伴金币每日训练次数"];
	EN_CONST_PARTNER_TRAINING_JIENI_DAILY_CNT                       = 504[(yd_fieldoptions.field_enum_cname) = "伙伴粉钻每日训练次数"];
	EN_CONST_PARTNER_TRAINING_CRI                                   = 505[(yd_fieldoptions.field_enum_cname) = "伙伴粉钻训练暴击倍数"];
	EN_CONST_PARTNER_FEED_POWER                                     = 506[(yd_fieldoptions.field_enum_cname) = "伙伴喂养恢复体力值"];
	EN_CONST_PARTNER_BATTLE_POWER_FACTOR                            = 507[(yd_fieldoptions.field_enum_cname) = "伙伴战斗体力消耗系数"];
	EN_CONST_PARTNER_POWER_RECOVER_GAP                              = 508[(yd_fieldoptions.field_enum_cname) = "伙伴体力值恢复时间间隔"];
	EN_CONST_PARTNER_ACTIVE_SKILL_COST                              = 509[(yd_fieldoptions.field_enum_cname) = "伙伴激活技能粉钻消耗"];
	EN_CONST_FASHION_INIT_SLOT                                      = 510[(yd_fieldoptions.field_enum_cname) = "时装初始格子数量"]; 	
	EN_CONST_FASHION_COMPOSE_METARIAL                               = 511[(yd_fieldoptions.field_enum_cname) = "时装合成材料物品id"];
	EN_CONST_FASHION_COMPOSE_DROP_ID                                = 512[(yd_fieldoptions.field_enum_cname) = "时装合成掉落id"];
	EN_CONST_FASHION_CHG_ATTR_METARIAL                              = 513[(yd_fieldoptions.field_enum_cname) = "时装改变属性材料id"];

	EN_CONST_ARMOR_SPECIALIST_ATTR_ID_A                             = 514[(yd_fieldoptions.field_enum_cname) = "护甲惩罚A属性ID"];
	EN_CONST_ARMOR_SPECIALIST_ATTR_VAL_A                            = 515[(yd_fieldoptions.field_enum_cname) = "护甲惩罚A属性值"];
	EN_CONST_ARMOR_SPECIALIST_ATTR_ID_B                             = 516[(yd_fieldoptions.field_enum_cname) = "护甲惩罚B属性ID"];
	EN_CONST_ARMOR_SPECIALIST_ATTR_VAL_B                            = 517[(yd_fieldoptions.field_enum_cname) = "护甲惩罚B属性值"];
	
	EN_CONST_TOWER_SWEEP_SPEED_DIAMOND_COST                         = 518[(yd_fieldoptions.field_enum_cname) = "试炼塔扫荡加速消化钻石数量"];
	EN_CONST_TOWER_SWEEP_TIME_PER_TOWER                             = 519[(yd_fieldoptions.field_enum_cname) = "试炼塔扫荡每大层消化时间"];
	EN_CONST_PARTNER_FATIGUE_RECOVER_VAL                            = 520[(yd_fieldoptions.field_enum_cname) = "伙伴疲劳解除系数"];
	EN_CONST_ACTIVITY_LUCK_DRAW_START_TIME                          = 521[(yd_fieldoptions.field_enum_cname) = "转圈抽奖开始时间戳"];
	EN_CONST_ACTIVITY_LUCK_DRAW_END_TIME                            = 522[(yd_fieldoptions.field_enum_cname) = "转圈抽奖结束时间戳"];
	EN_CONST_ACTIVITY_LUCK_DRAW_ONE_COST                            = 523[(yd_fieldoptions.field_enum_cname) = "转圈单抽花费数"];
	EN_CONST_ACTIVITY_LUCK_DRAW_FIVE_COST                           = 524[(yd_fieldoptions.field_enum_cname) = "转圈五连抽花费数"];
	EN_CONST_ACTIVITY_LUCK_DRAW_LUCKY_VALUES                        = 525[(yd_fieldoptions.field_enum_cname) = "转圈一次所得幸运值"];
	EN_CONST_ACTIVITY_LUCK_DRAW_LUCKY_VALUES_MAX                    = 526[(yd_fieldoptions.field_enum_cname) = "转圈幸运值最大值"];
	EN_CONST_MAX_1V1_DAILY_COIN                                     = 527[(yd_fieldoptions.field_enum_cname) = "1v1每日获得武勋值上限"];
	EN_CONST_PVP_1V1_WIN_AWARD_COIN                                 = 528[(yd_fieldoptions.field_enum_cname) = "1v1决斗胜利获得武勋值"];
	EN_CONST_PVP_1V1_LOSE_AWARD_COIN                                = 529[(yd_fieldoptions.field_enum_cname) = "1v1决斗失败获得武勋值"];
	EN_CONST_GUILD_COST_POWER_FOR_CONTRIBUTION                   	= 530[(yd_fieldoptions.field_enum_cname) = "消耗疲劳值增加的行会贡献"];
	EN_CONST_GUILD_STUDY_ATTR_MAX_COUNT			                   	= 531[(yd_fieldoptions.field_enum_cname) = "修炼公会属性最大个数"];
	EN_CONST_MAX_VIGOR_NUM                                          = 532[(yd_fieldoptions.field_enum_cname) = "精力上限"];
	EN_CONST_EXP_RETRIVE_FACTOR_A                                   = 533[(yd_fieldoptions.field_enum_cname) = "经验找回系数A"];
	EN_CONST_EXP_RETRIVE_FACTOR_B                                   = 534[(yd_fieldoptions.field_enum_cname) = "经验找回系数B"];
	EN_CONST_EXP_RETRIVE_FACTOR_C                                   = 535[(yd_fieldoptions.field_enum_cname) = "经验找回系数C"];
	EN_CONST_EXP_RETRIVE_RATIO_BY_GOLD                              = 536[(yd_fieldoptions.field_enum_cname) = "金币找回比例系数"];
	EN_CONST_EXP_RETRIVE_RATIO_BY_PINK_DIAMON                       = 537[(yd_fieldoptions.field_enum_cname) = "粉钻找回比例系数"];
}


enum enEventEffectType
{
	EN_EVENT_EFFECT_TYPE_POWER				= 1;	// 体力消耗
	EN_EVENT_EFFECT_TYPE_ANCIEN				= 2;	// 深渊/远古票消耗降低
	EN_EVENT_EFFECT_TYPE_BATTLE_EXP			= 3;	// 特定战斗类型经验提高
	EN_EVENT_EFFECT_TYPE_BATTLE_MONEY		= 4;	// 特定战斗类型银币提高
	EN_EVENT_EFFECT_TYPE_DROP				= 5;	// 掉落率提高
	EN_EVENT_EFFECT_TYPE_STRENGTH			= 6;	// 强化成功率提高
	EN_EVENT_EFFECT_TYPE_COMPOSE			= 7;	// 宝石合成手续费降低
	EN_EVENT_EFFECT_TYPE_MAGIC				= 8;	// 祝福合成手续费降低
	EN_EVENT_EFFECT_TYPE_ADD_BUFF			= 9;	// 进入战斗类型附加buff
	EN_EVENT_EFFECT_TYPE_OPEN_POWER			= 10;	// 体力燃烧持续开启
	EN_EVENT_EFFECT_TYPE_ADD_ATTR			= 11;	// 属性提升
	EN_EVENT_EFFECT_TYPE_ACT_COUNT			= 12;	// 特定activity可完成次数增加
}

enum enSkillAdditionType
{
    EN_SKILL_ADDITION_TYPE_HURT     = 0;
    EN_SKILL_ADDITION_TYPE_CRIT     = 1;
    EN_SKILL_ADDITION_TYPE_CRIT_DMG = 2;
    EN_SKILL_ADDITION_TYPE_HIT_RATE = 3;
}

//增加新类型记得修改SkillExtraInfo里数组大小
enum enSkillFixType
{
    EN_SKILL_FIX_TYPE_HURT     = 0;
    EN_SKILL_FIX_TYPE_CRIT     = 1;
    EN_SKILL_FIX_TYPE_CRIT_DMG = 2;
    EN_SKILL_FIX_TYPE_HIT_RATE = 3;
}

enum enBuffStateType
{
    EN_BUFF_STATE_TYPE_NONE      = 0;
    EN_BUFF_STATE_TYPE_FREEZE    = 1; //冰冻
    EN_BUFF_STATE_TYPE_STUPOR    = 2; //昏迷
    EN_BUFF_STATE_TYPE_FIRING    = 3; //灼烧
    EN_BUFF_STATE_TYPE_SILENT    = 4; //沉默
    EN_BUFF_STATE_TYPE_ROOTS     = 5; //定身
    EN_BUFF_STATE_TYPE_CURSE     = 6; //诅咒
    EN_BUFF_STATE_TYPE_POISONING = 7; //中毒
    EN_BUFF_STATE_TYPE_SHEAR     = 8; //裂伤
    EN_BUFF_STATE_TYPE_SLOW      = 9; //减速
    EN_BUFF_STATE_TYPE_CHAOS     = 10;//混乱
    EN_BUFF_STATE_TYPE_SLEEP     = 11;//睡眠
}
