import "yd_fieldoptions.proto";
import "proto_common.proto";
import "proto_cs_cmd.proto";

package proto_ff;

message Proto_CSAttrList
{
	required uint32 id = 1;
	repeated CSAttr attr_list = 2[(yd_fieldoptions.field_arysize)=32];//属性列表
};

enum eAccountType
{
	E_Account_Type_Guest = 0;
	E_Account_Type_QQ = 1;    //QQ
	E_Account_Type_Wechat = 3; //微信
	E_Account_Type_Local = 4;	// 本地使用(公司平时用)
}

message AccountInfo
{
	required eAccountType account_type = 1[default=E_Account_Type_Guest]; //账号类型
	required string account_id = 2[(yd_fieldoptions.field_bufsize)=128];//账号open_id或游客的iemi码
	required Proto_PlatType plat_type = 3[default=E_PLAT_ANDROID]; // 平台类型
}

// 玩家的设备信息
message Proto_LoginClientInfo
{
	required Proto_PlatType plat_type           = 1;
	required string client_version              = 2 [(yd_fieldoptions.field_bufsize)=32];
	required Proto_NetworkType network_type     = 3;
	required string uuid            = 4 [(yd_fieldoptions.field_bufsize)=32]; // mac地址
    required int32  reg_channel     = 5; //注册渠道

    optional int32  screen_width    = 11; //显示屏宽度
    optional int32  screen_hight    = 12; //显示屏高度
    optional float  screen_density  = 13; //像素密度
    optional string cpu_info        = 14[(yd_fieldoptions.field_bufsize)=64];
    optional int32  memory_size     = 15; // MB
	optional string os_version      = 16[(yd_fieldoptions.field_bufsize)=64]; //终端操作系统版本
	optional string hardware        = 17[(yd_fieldoptions.field_bufsize)=64]; //移动终端机型
    optional string tel_oper        = 18[(yd_fieldoptions.field_bufsize)=64]; //运营商
    optional string device_id       = 19[(yd_fieldoptions.field_bufsize)=64]; //设备ID
    optional string gl_render       = 20[(yd_fieldoptions.field_bufsize)=64]; //opengl render信息
    optional string gl_version      = 21[(yd_fieldoptions.field_bufsize)=64]; //opengl版本信息
};


message MsdkInfo
{
	optional string open_id = 1 [(yd_fieldoptions.field_bufsize)=64];
	optional string open_key = 2 [(yd_fieldoptions.field_bufsize)=150];
	optional string session_type = 3 [(yd_fieldoptions.field_bufsize)=20];
	optional string session_id = 4 [(yd_fieldoptions.field_bufsize)=20];
	optional string pf = 5 [(yd_fieldoptions.field_bufsize)=158];
	optional string pfkey = 6 [(yd_fieldoptions.field_bufsize)=150];
	optional bool is_from_qq_gamecenter = 7;
	optional bool is_from_weixin_gamecenter = 8;
}
 
message Proto_CSLoginReq
{
	required uint64 player_uin                  = 1;
	required string account_id                  = 2 [(yd_fieldoptions.field_bufsize)=32]; // 玩家的账号id，游客(iemi+mac),fbid
	required Proto_AccountType account_type     = 3;
	required Proto_LoginClientInfo client_info  = 4;
	optional string account_pwd                 = 5 [(yd_fieldoptions.field_bufsize)=32];
	optional Proto_SexType  user_sex            = 7 [default = E_MALE];
	optional string user_head_url               = 8 [(yd_fieldoptions.field_bufsize)=32]; // 每个头像的url，打牌玩家的要看到对方的头像 	
	optional MsdkInfo msdk_info                 = 9; //MSDK信息
	optional int32 zone_id                      = 10; //小区ID
}

message Proto_CSMsdkRefreshReq
{
	optional MsdkInfo msdk_info                 = 1; //MSDK信息
}

message Proto_CSCreateRoleReq
{
	required int32 actor_id = 1; //角色id
	required string name = 2 [(yd_fieldoptions.field_bufsize)=32];    //名字
	optional int32 ex_transfer_id = 3;     //体验转职ID                            
}

message Proto_CSCreateRoleRsp
{
	repeated RoleOne role_list                  = 9 [(yd_fieldoptions.field_arysize)=6]; //角色列表 ，出错后就不在填充
	optional int32 result						= 10;	// 出错后的返回码
}

message Proto_CSMidasPayReq
{
	optional int32 buy_num = 1;      //购买钻石数量
}

message Proto_CSDiamondSynNtf
{
	optional int32 diamond_num = 1;     //变更后的钻石数量
	optional int32 chg_num = 2;         //变更的数量
}

message Proto_CSMidasBuyGoodsReq
{
	optional int32 goods_id = 1;     //商品id
	optional int32 num = 2;          //商品数量
	optional int32 growup_funds = 3; // >0 表示成长基金
}

message Proto_CSMidasBuyGoodsRsp
{
	optional int32 goods_id = 1;    //商品id
	optional int32 num = 2;         //
	optional uint64 billno = 3;      //订单id
	optional int32 growup_funds = 4; // >0 表示成长基金
	optional string token = 5;      //支付token,5分钟有效
	optional string url_params = 6; //url参数
}

message Proto_CSMidasBuyGoodsNtf
{
	optional int32 goods_id = 1;            //商品id
	optional LuckBagInfo luck_bag_info = 4; //幸运礼包信息
	optional int32 growup_funds = 5;        // >0 表示成长基金
	optional uint64 billno = 6;              //订单id
}

message Proto_CSLuckBagInfoReq
{
	optional int32 reserve = 1;   
}

message Proto_CSLuckBagInfoNtf
{
	optional LuckBagInfo luck_bag_info = 1; //幸运礼包信息
}

message Proto_CSMonthCardAwardReq
{
	
}

message Proto_CSMonthCardAwardRsp
{
	optional MonthCardInfo card_info = 1;
}

message Proto_CSSupperCardAwardReq
{

}

message Proto_CSSupperCardAwardRsp
{
	optional SupperCard card_info = 1;
}


message Proto_CSCheckPointReq
{
    required int32 check_id     = 1;
    optional int32 check_param  = 2;
}

message Proto_CSGrowUpFundsGetAwardReq
{
	optional int32 award_id = 1;
}

message Proto_CSGrowUpFundsGetAwardRsp
{
	optional int32 award_id = 1;
	optional LuckBagInfo luck_bag_info = 2; //幸运礼包信息
}

message Proto_CSFirstPayAwardGetReq
{
	optional int32 reserve = 1;
}

message Proto_CSFirstPayAwardStateNtf
{
	optional int32 first_award_state = 1;  //首充奖励状态
}

message Proto_CSPayAwardInfoReq
{
	optional int32 reserve = 1;
}

message Proto_CSPayAwardGetReq
{
	optional int32 award_id = 1;     //奖励表id
}

message Proto_CSPayAwardGetRsp
{
	optional PayAwardData data = 1;  //周充值奖励数据
	optional int32  award_id = 2;     //原因
}

enum enPayAwardUpdateReason
{
	EN_WPUR_PAY_UP = 1;            //充值
	EN_WPUR_GET_AWARD = 2;         //领取奖励
}

message Proto_CSPayAwardDataNtf
{
	optional PayAwardData data = 1;  //周充值奖励数据
	optional int32  reason = 2;     //原因
}

message Proto_CSWeekConsumeInfoReq
{
	optional int32 reserve = 1;
}

message Proto_CSWeekConsumeAwardReq
{
	optional int32 award_id = 2;     //奖励表id
}

message Proto_CSWeekConsumeAwardRsp
{
	optional WeekConsumeData data = 1;  //周消费奖励数据
	optional int32 award_id = 2;     //奖励表id
}

enum enWeekConsumeUpdateReason
{
	EN_WCUR_CONSUME = 1;            //消费
	EN_WCUR_GET_AWARD = 2;          //领取消费奖励
	EN_WCUR_WEEK_UPDATE = 3;        //周更新
	EN_WCUR_LOTTERY = 4;            //抽奖
}

message Proto_CSWeekConsumeDataNtf
{
	optional WeekConsumeData data = 1;  //周消费奖励数据
	optional int32  reason = 2;     //原因
}

message Proto_CSWeekConsumeLotteryReq
{
	optional int32 reserve = 1;
}

message Proto_CSWeekConsumeLotteryRsp
{
	optional int32 item_id = 1;         
	optional int32 item_num = 2;
	optional WeekConsumeData data = 3;  //周消费奖励数据
}

message Proto_CSDeleteRoleReq
{
	required uint64 role_id = 1;       //需要删除角色id
}

message Proto_CSDeleteRoleRsp
{
	repeated RoleOne role_list                  = 1 [(yd_fieldoptions.field_arysize)=6]; //角色列表 
}

message Proto_CSAccountErrorRsp
{
	optional bool account_or_pwd_error          = 1;
}

message Proto_CSLoginRes
{
	required uint64 player_uin                  = 1;
	required uint64 server_time                 = 2;
	required uint64 role_id				        = 3;
	optional int32 server_version               = 4;
    optional int32 excel_version                = 5;
    optional int32 mapdata_version              = 6;
	repeated RoleOne role_list                  = 9 [(yd_fieldoptions.field_arysize)=6]; //角色列表
	optional uint64 last_role_id		        = 10;	// 最近离线的角色id
	repeated uint64 online_role_id				= 11;	// 在线角色id
	optional IDIPSealedData idip_sealed			= 12;	// idip 的封号
	optional IDIPForbiddenChatData ban_chat 	= 13;	// idip 的禁言
	optional IDIPForbiddenTradeData ban_trade 	= 14; 	// idip的禁止交易
	optional IDIPForbiddenFriendData ban_friend	= 15;	// idip的禁止添加好友
	optional uint64 server_open_time            = 16;   // 开服时间
}

message Proto_CSLineUpCancelReq
{
}

message Proto_CSLineUpCancelRsp
{
}

message Proto_CSLineUpNtf
{
	optional int32 lineup_user_count = 1;
	optional int32 timetmp = 2;
}

// 弹出快速重连
message Proto_SCLoginFastNtf
{
	optional uint64 role_id						= 1;	// 最近登陆的角色id
	optional string name 						= 2 [(yd_fieldoptions.field_bufsize)=32]; // 最近登陆的角色名字
	optional bool is_online						= 3;	// 是否在线
}

// 请求快速重连
message Proto_CSLoginFastRoleReq
{
	optional uint64 role_id						= 1;	// 最近登陆的角色id
	optional bool is_fast						= 2[default=false];	// true为快速重连，false为取消
}
message Proto_SCLoginFastRoleRsp
{
	optional uint64 role_id						= 1;	// 最近登陆的角色id
	optional bool is_fast						= 2;	// true为快速重连，false为取消
	optional int32 result						= 3;
}

message BroadMsgEle
{
	required uint32	id			=	1;		//填充的内容ID
	required uint32 ele_type	=	2;		//实际内容的类型
	required uint64 nt			=	3;		//填充的实际内容
	required enCampType camp	=	4;		//该元素当前阵营
	required uint64 ext_prm		=	5;		//附加参数 比如己方守卫被攻击时 发server生成的据点ID给前端		
}

message BattleBroadcastEscapePara
{
	optional int32 obj_id = 1; //对象实例ID
	optional ActorObjType obj_type = 2[default = EN_ACT_TYPE_NONE]; //对象类型
	optional int32 desc_id = 3; //描述ID
	optional string name = 4; //名字
	optional enCampType camp = 5[default = EN_CAMP_TYPE_NONE]; //阵营
}

message Proto_CSBroadMsg
{
	required uint32	content_id					=	1;			//battle broadcast表里的ID
	repeated BattleBroadcastEscapePara para_list =  2;			//广播
}

message Proto_CSItemUseSet
{
	repeated Item item_list = 1[(yd_fieldoptions.field_arysize)=3];	//设置使用的道具列表
}

// 物品变更通知
message Proto_CSRoleItemNtf
{
    repeated Item               item_list           = 1; //经验货币类型物品的更新

    repeated ItemGridCSData     grids_for_equip     = 2; //装备
    repeated ItemGridCSData     grids_for_title     = 3; //称号
    repeated ItemGridCSData     grids_for_matrial   = 4; //材料
    repeated ItemGridCSData     grids_for_skin      = 5; //时装
    repeated ItemGridCSData     grids_for_prop      = 6; //消耗品

    repeated ItemGridCSData     dressed_list        = 10; // 已穿戴列表
    repeated ItemGridCSData     ext_change_list     = 11; //仅属性发生变动的物品列表
    repeated ItemGridCSData     added_list          = 12; //

    repeated ItemGridCSData     temp_storage_list   = 20; //仅通知变更的格子
    repeated ItemGridCSData     storage_list        = 29; // 仓库变动通知

	optional bool               not_show            = 9; // 不显示在通知栏
}


message Proto_CSShopItemReq
{
	repeated int32 item_id = 1;   //请求counter
}


message ShopDataOne
{
	optional int32  item_id = 1;   //id
	optional int32  left_num = 2;  //可购买数量
	optional int32  price = 3;   //价格
}

message AchieveInfo
{
    required int32 id = 1;
    optional int32 val = 2; //成就计数 未完成且为0不发送
    optional uint32 finished_time = 3; // 完成时间 不为0表示完成
}

message Proto_CSShopItemRsp
{
	repeated ShopDataOne shop_item = 1; //记数更新消息，返回可用次数
}

message Proto_CSRoleSkinNtf
{
	required int32 hero_id = 1;
	required int32 skin_id = 2;
	required bool  add	  = 3; //true增加, false删除 
}

message Proto_CSGetRoleReq
{
	required uint64 role_id				   	= 1;
}

message QuestCSData
{
	repeated int32 completed_list = 1;
	repeated QuestNode accepted_list = 2;
	repeated LoopQuest questloop_list = 3;
    repeated AchieveInfo achieve_list = 4;
    optional uint64 achieve_point   = 5;
	//repeated IntrustQuest intrust_list = 6;
	optional QuestExpChain exp_chain = 7;
	optional RoleMasterQuestData mq_data = 8;
    repeated int32  achieve_reward_list = 10;
}

message HLicenseCSData
{
    //猎人考试->获取猎人执照
    repeated int32 first_exam_data = 1; // 考试数据 // 已完成的节点
    repeated int32 acquired_exam_reward = 2; // 已获取奖励的节点 

    optional int32 lincese_id            = 10; // 当前执照id
    optional int32 lincese_score         = 11; // 
    repeated int32 acquired_lincese_reward = 12; // 已获取的执照宝箱

    // 第一阶段·特训
    repeated int32 special_training_data = 21;

    // 第二阶段·特训
    repeated int32 special_training_random_list     = 24; //随机特训id
    repeated int32 special_training_random_data     = 25; //随机特训data
    repeated int32 acquired_special_training_reward  = 26; //
    optional int32 finished_special_training_day    = 27; // 本周已完成的特训天数
    //optional uint32 st_reset_week_time  = 27; 
    //optional uint32 st_reset_day_time   = 28;
}

message DrugCDInfo
{
	optional int32 type = 1;
	optional int32 cd = 2;
	optional int64 last_use_time = 3;
}

message RoleDrugCDData
{
	repeated DrugCDInfo cd_info = 1 [(yd_fieldoptions.field_arysize) = 10];
}

message RoleTitle2CSData
{
    optional int32 current_title2_id = 1; // 当前已生效的称号
    optional int32 next_title2_id    = 2; // 下一级称号id
    repeated int32 condition_val     = 10; // 条件数量
    // 0 角色等级要求 
    // 1 技能平均等级要求    
    // 2 修炼平均等级要求    
    // 3 念玉总评分要求  
    // 4 念纹总评分要求  
    // 5 附念平均等级要求    
    // 6 装备平均评分要求    
    // 7 最高伙伴评分要求    
    // 8 人物总评分要求  
    // 9 完成捉拿悬赏次数要求   
    // 10 完成要人护送次数要求    
    // 11 完成念力修行次数要求    
    // 12 完成行会货运次数要求    
    // 13 完成宝图任务次数要求    
    // 14 完成猎物追踪次数要求    
    // 15 完成清理嵌合蚁次数要求  
    // 16 完成智力闯关次数要求
}

message RolePayDataCS
{
	optional int32 diamond = 1;    //钻石数量
	optional int32 first_pay_state = 9;     //首次奖励，对应EFirstPayState
	optional PayAwardData pay_award_data = 10;
	optional WeekConsumeData week_consume_data = 11;
	optional LuckBagInfo luck_bag_info = 13;
}


message RoleFuncMask
{
	optional bool is_market_mask = 1;                //是否屏蔽摆摊
	optional bool is_platform_ability_mask = 2;      //是否屏蔽平台能力
}


//拉取角色信息
//标记为记录是否未注册
message Proto_CSGetRoleRsp
{
	required RoleBase                   role_base				    = 1;
	required HeroData                   hero_data				    = 2; 
	required RoleItemData               item_data                   = 3;
	required RoleSkinData               skin_data                   = 4;
	optional RoleRuneData               rune_data                   = 5;
	required RoleBattleStatistic        statistic                   = 7;  //统计
	optional RoleMiscData               misc_data                   = 8;
	optional RoleDrugCDData          	drug_cd_data                = 9;
	optional RoleSnsData                sns_data                    = 10;
	repeated int32                      avatar_list                 = 11; //拥有的avatar列表最大255个
	optional RoleSkillData              skill_data                  = 12;
	optional QuestCSData                quest_data                  = 13;
	optional RoleChapterScoreData       chapter_score_data          = 14; //chapter_score_data
	optional RoleMPveData               mpve_data                   = 16;
	optional RoleNianPracticeData       nian_practice_data          = 17;
	optional RolePartnerData            partner_data                = 19; //伙伴数据
	optional RoleMapData                map_data                    = 20; //
	optional RoleLifeSkillData          life_skill_data             = 21; //生活技能数据
	optional Proto_RoleSimpleInfo       simple_info		            = 22;
	optional RoleEscortData             escort_data			        = 23; //护送数据\
	optional uint64                     team_id 				    = 24; //队伍ID
	optional bool                       is_team_leader			    = 25; //是不是队长
	optional RoleSixExperimentData      six_experiment_data         = 26; //六系试炼数据
	optional RoleWelfareExpData         welfare_data	   	        = 27; //福利经验
    optional RoleMilitantMatchData      militant_match_data         = 28; //武斗大会数据
	optional RoleTitleData				title_data				    = 29; //称号
	optional RoleFashionData            fashion_data                = 30; //时装数据
	optional RoleGuildCompetitionData   guild_competition_data      = 31; //工会战数据
	optional RoleAuctionCompetitionData auction_competition_data    = 32; //拍卖争夺会数据
	optional RoleLicenseData            license_data                = 33; //十二支执照数据
	optional RolePhantomTroupeData      phantom_troupe_data         = 34; //幻影旅团活动数据 
	optional int32                      phantom_troupe_buff_id      = 35; //幻影旅团守护buffid
	optional RoleStateData              state_data                  = 36; //状态数据
	optional RoleBuffDataCS             buff_data                   = 37; //buff数据
	optional RoleSignData               sign_data                   = 38; //签到信息
	optional RoleDungeonData            dungeon_data                = 39; //副本数据
	optional string                     voice_room                  = 40; //已经加入的语音房间
	optional bool                       is_gm                       = 41 [default=false]; //是否是GM
    optional RoleTitle2CSData           title2_data                 = 43; //猎人考核
	optional RolePayDataCS              pay_data                    = 44; //支付相关信息
	optional RoleMultiLevelData         multi_level_data            = 45; //连战关卡数据
	optional RoleCityEnterData          city_enter_data             = 46; //主城开启数据
    repeated int32                      acquired_player_level_bouns = 47; //已领取的等级礼包
    optional HLicenseCSData             hlicense_cs_data            = 48; //猎人执照数据
	optional RoleSignInMonthlyData		sign_in_monthly_data	    = 49; //每月签到信息
	optional RoleGiftData               gift_data                   = 50; //礼物信息
	optional RoleCEData                 ce_data                     = 51; //变强(战力)数据
    optional RoleAutoRecoverData        auto_recover_data           = 52; //自动恢复数据
	optional RoleFuncMask               func_mask                   = 53; //功能屏蔽
    optional RoleRisingPurchaseData     rising_purchase_data        = 54; //跳跃购买数据
    optional RoleLevelBlessData         level_bless_data            = 55; //关卡祝福数据
	optional RoleTormentTowerData       torment_tower_data          = 56; //试炼塔数据
	optional LegendRoadData             legend_road_data            = 57; //传奇之路数据
	optional Pvp1v1Data                 pvp_1v1_data                = 58; //1v1数据
	optional RoleRetriveData            retrival_data               = 59; //经验、奖励找回数据
}


message Proto_CSCityEnterNtf
{
	optional RoleCityEnterData city_enter_data = 1; //主城进入数据
}


message Proto_CSSignInReq
{
	optional int32 sign_day = 1;    //领取第几天签到奖励
	optional bool is_pay = 2;       //是否是付费补签
}

message Proto_CSSignInMonthlyReq
{
    optional bool is_accumu_sign=1;  // 是否是领取累计签到奖励
    optional int32 accumu_sign_id=2; // 累计签到奖励ID
	optional bool is_pay = 3;        // 是否是补签领取奖励
}

message Proto_CSSignDataNtf
{
	optional RoleSignData sign_data = 1; //签到信息
}

message Proto_CSSignInMonthlyDataNtf
{
	optional RoleSignInMonthlyData sign_data = 1; //每月签到信息
}

message Proto_CSSignInMonthlyRsp
{
	optional int32	result	=	1;//0成功，1今日已签，2今日已补签，3累计未到或已经领取
	optional int32	sign_id	=	2;//签到ID
	optional bool 	is_accu	=	3;//是否是累计签到的请求 
}


message Proto_CSPhantomTroupeDataNtf
{
	required RolePhantomTroupeData      phantom_troupe_data = 1; //幻影旅团活动数据 
	optional int32 phantom_troupe_buff_id = 2; //幻影旅团活动数据 
}

message Proto_CSRoleRiftDataNtf
{
	required RoleRiftData rift_data = 1; //秘境通关数据
}

message Proto_CSRoleMPveDataNtf
{
	required RoleMPveData mpve_data = 1; //MPve通关数据
}

message Proto_CSRoleFriendChange
{
	required uint64 apply_role_id = 1;
	required uint64 accept_role_id = 2;
	required uint64 friend_time		= 3;
	required bool	 add				= 4; //true增， false删
	optional Proto_RoleFullInfo role_full_info = 5;
}

enum enRoleSnsDataType
{
	EN_ROLE_SNS_DATA_TYPE_GUILD_BASE 	= 1;	// 行会基础数据
	EN_ROLE_SNS_DATA_TYPE_MASTER 		= 2;	// 师徒数据
	EN_ROLE_SNS_DATA_TYPE_FAMILY 		= 3;	// 家族数据
	EN_ROLE_SNS_DATA_TYPE_GUILD_BUFF 	= 4;	// 行会修炼的属性数据
	EN_ROLE_SNS_DATA_TYPE_GUILD_BOSS 	= 5;	// 行会boss数据
	EN_ROLE_SNS_DATA_TYPE_GUILD_CONTRIBUTE = 6;	// 行会捐献数据
	EN_ROLE_SNS_DATA_TYPE_GUILD_SHOP 	= 7;	// 行会商店数据
}

// 前端要求用GuildRoleSnsData结构加类型传
message Proto_CSRoleNtf
{
	optional enRoleSnsDataType type				= 1;
	optional GuildRoleSnsData guild_data		= 2;
	optional RoleMasterInfo master_data			= 3;	// 师徒数据
	optional RoleFamilyData	family_data			= 4;	// 家族数据
}

//设置名字和指挥官
message Proto_CSRegisterReq
{
	optional uint32 avator_id 				= 1 ;	//指挥官头像
	optional string account_id              = 2 [(yd_fieldoptions.field_bufsize)=32];  
	repeated int32 hero_list 				= 3 [(yd_fieldoptions.field_arysize)=8]; 
	optional string name 					= 4 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
}

message Proto_CSRegisterRsp
{
	required uint32 avator_id 				= 1 ;	//指挥官头像
	required string account_id              = 2 [(yd_fieldoptions.field_bufsize)=32];  
	required string name					= 3[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
	repeated HeroOne hero_list 				= 4;
	repeated int32	 formation				= 5;
	optional int32 role_ce 					= 6; //战斗力
}

message Proto_CSSelectHeroReq
{
	repeated int32 hero_list 				= 1 [(yd_fieldoptions.field_arysize)=8]; 
}

message Proto_CSSelectHeroRsp
{
	repeated HeroOne hero_list 				= 1 [(yd_fieldoptions.field_arysize)=8]; 
	repeated int32	 formation				= 2;
}


message Proto_CSChangeAvatarReq
{
	required uint32 avator_id 				= 1;	//指挥官头像
}

message Proto_CSChangeAvatarRsp
{
	required uint32 avator_id 				= 1;	//指挥官头像
}

message Proto_CSAvatarAddNtf
{
	required uint32 avator_id 				= 1;	//指挥官头像
}

// 客户端被踢下线
message Proto_CSKickOff
{
	required int32 reason  = 1;
	optional string reason_str = 2;
}

message CSErrorEscapePara
{
	optional string string_para = 1; //不管是角色名/地图名/公会名，请填此参数
	optional uint64 role_id = 2; //角色ID
	optional int32 int_para = 3; //数量
}

message Proto_CSErrorRsp
{
	required uint32 req_msg_id  = 1;	//请求的命令号
	required int32 error = 2; 	//错误码
	repeated CSErrorEscapePara para_list = 3; //参数,与配表位置一一对应，注意没有的时候显示问题
}

message Proto_CSHeartBeatReq
{
	required int32 reserve					= 1; //保留字段
}

message Proto_CSHeartBeatRsp // 心跳回包
{
	required Proto_RoleTimeValue time_prop = 1; //角色时间自增属性
}

message Proto_CSRoleAttrList
{
	repeated CSRoleAttr attr_list = 1[(yd_fieldoptions.field_arysize)=48];//属性列表
}


message Proto_CSAttrChgNtf
{
	repeated CSAttr attr_list = 1 [(yd_fieldoptions.field_arysize)=168];//属性列表
}


message Proto_CSGmReq
{
	required string content = 1;//
}

message Proto_CSGmRsp
{
	required int32	ret = 1;
	required string content = 2;//
}


enum enHeroChgReason
{
	EN_HERO_CHG_REASON_NONE = 0;
	EN_HERO_CHG_REASON_USE_ITEM = 1;    //使用物品
}


message Proto_CSHeroNtf
{
	required HeroOne hero = 1;
	optional int32 chg_reason = 2;    //改变原因
}

message Proto_CSHeroFormationReq 
{
	repeated uint32	 formation = 1 [(yd_fieldoptions.field_arysize)=8]; //阵容 
}

message Proto_CSHeroFormationRsp
{
	repeated uint32	 formation = 1 [(yd_fieldoptions.field_arysize)=8]; //阵容 
}

enum enRoomStatus
{

	EN_ROOM_STATUS_NONE = 0;			//未创建
	EN_ROOM_STATUS_WAIT = 1; 			//创建等开始状态
	EN_ROOM_STATUS_MATCHING = 2; 		                //正在匹配，这个不会用到了
	EN_ROOM_STATUS_BATTLE_CREATING = 3;                             //正在创建战斗,异步流程中
	EN_ROOM_STATUS_BATTLING = 4; 		                //正在战斗
	EN_ROOM_STATUS_END = 5; 			//结束
}

enum enRoomPlayerState
{
	EN_ROOM_PLAYER_STATE_NONE 		=	0;//聊天状态
	EN_ROOM_PLAYER_STATE_ADJUST 	=	1;//调整状态
	EN_ROOM_PLAYER_STATE_READY 		=	2;//准备状态
}

message RolePanelInfo
{
	required uint64 role_id 				= 1; //角色唯一ID
	optional string name 					= 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
	optional int32  mag 					= 3; //念力
	optional enProfessionType profession	= 4 [default=EN_PROFESSION_NONE]; // 职业
	optional int32 level					= 5; //等级
	optional int32 player_id                = 6; //playerdesc的描述id
	optional FashionSlot fashion  			= 7;
	optional int32 mmr						= 8; //mmr
	optional int32 title_id					= 9; //称号
}

message RoomPlaceState
{
                required int32                  place_id        	= 1;            //位置，0到5
                required enCampType             camp_type       	= 2;            //所属阵营
                required bool                   place_is_open   	= 3;            //位置打开                   
                optional RolePanelInfo          player_panel_info 	= 4;            //玩家信息
				optional enRoomPlayerState		player_state		= 5;			//玩家状态
}

message RoomBaseInfo
{

//改版后需要
	required int32                  room_id         = 1;            //room_id
	required uint64                 owner_role_id   = 2;            //房主所有者
	required enRoomStatus           status          = 3[default=EN_ROOM_STATUS_NONE];            //房间状态
	required int32                  size            = 4;            //房间当前人数，只有在查询的时候有用
	optional int32                  max_size        = 5;            //房间最大人数，只有在查询的时候有用
    optional bool                   has_password    = 6;            //有密码
    optional string                 room_password   = 7[(yd_fieldoptions.field_bufsize)=16, (yd_fieldoptions.field_string_len)=16];//不会发，待移除，房间密码
    repeated RoomPlaceState         place_list      = 8[(yd_fieldoptions.field_arysize)=6];//位置的详细信息        
	optional enBattleType           battle_type     = 9[default=E_Battle_Type_None];	//模式
	optional string                 owner_role_name = 10[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //所有者名字
	optional uint32					battle_start_time = 11;			//战斗开始时间
	optional string                 room_name       = 12[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];//房间名

//info below is not used in room/hall, but used in battle info. 
	optional enLevelMode 			level_mode 		= 14;	//模式
	optional int32                  map_desc_id     = 15;            //地图ID
	optional int32                  battle_id       = 16;           //战斗ID
	optional uint32                 observer_svr_ip = 17;
	optional uint32                 observer_svr_port = 18;
	optional enComputerAILevel      ai_level        = 19[default=EN_AI_LEVEL_NULL]; //电脑AI等级
	optional int32                  camp_size       = 20;
	repeated int32                  camp_max_player_size = 21[(yd_fieldoptions.field_arysize)=8];  //每个阵营最多多少个角色
	optional enLevelCreateMethod    create_method   = 22[default=E_Level_Create_By_Default];//创建方式
	optional int32                  level_group_id  = 23;           //随机副本组ID
	optional bool                   switch_active_hero = 24;        //是否允许换人
	optional uint64                 create_time     = 25;           //创建时间
	optional int32                  rift_floor      = 26;           //秘境楼层
	optional uint32                 battle_svr_ip   = 27;
	optional uint32                 battle_svr_port = 28;

}

//简答的room信息
message RoomQueryInfo
{
	optional int32                  room_id         = 1;            //room_id
	optional uint64                 owner_role_id   = 2;            //房主所有者
	optional enRoomStatus           status          = 3;            //房间状态
	optional int32                  size            = 4;            //房间当前人数，只有在查询的时候有用
	optional int32                  max_size        = 5;            //房间最大人数，只有在查询的时候有用
    optional bool                   has_password    = 6;            //有密码
	optional enBattleType           battle_type     = 7;			//模式
	optional string                 owner_role_name = 8[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //所有者名字
	optional string                 room_name       = 9[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];//房间名
}

/* 房间杂项数据， 临时存储，方便后续处理 */
message RoomMiscData
{

	optional uint64 guild_id_blue  	                = 1;
	optional uint64 guild_id_red		= 2;
	optional int32 blue_max_num		= 3;

	optional int32 red_max_num      	= 4;
	optional int32 clash_index 		= 5;
	optional int32 war_battle_id 		= 6;

	repeated GuildWarEntryRole blue_role_list       = 7[(yd_fieldoptions.field_arysize)=5];
	repeated GuildWarEntryRole red_role_list        = 8[(yd_fieldoptions.field_arysize)=5];
	optional string blue_guild_name 	= 9 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //公会名
	optional string red_guild_name 		= 10 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //公会名
}

message Proto_CSMPveCharpterInfoReq
{
}

message Proto_CSMPveCharpterInfoRsp
{
	 optional int32 charpter_id = 1;
	 repeated MPveMapData mpve_map_data = 2[(yd_fieldoptions.field_arysize)=10];
	 //repeated LevelInfo level_info = 3[(yd_fieldoptions.field_arysize)=10];
}

message Proto_CSMPveBounsReq
{
	optional int32 score = 1;
}
message Proto_CSMPveBounsRsp
{
	optional Proto_CSRoleItemNtf ntf = 1;
}

//创建房间
message Proto_CSRoomCreateReq
{

    optional string                 room_name       = 1[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];//房间名
    optional enBattleType           battle_type     = 2;            //房间类型
    optional string                 room_password   = 3[(yd_fieldoptions.field_bufsize)=16, (yd_fieldoptions.field_string_len)=16];//房间密码
	optional int32                  map_desc_id     = 4;            //地图ID，保留，1016期无视这个字段
	optional enComputerAILevel      ai_level        = 5[default=EN_AI_LEVEL_NULL]; //电脑AI等级，保留，1016期无视这个字段
}

message Proto_CSRoomCreateRsp
{

	required RoomBaseInfo           room_info       = 1;            //房间详细信息
}

message Proto_CSRoomQueryListReq
{
	optional int32 reverse = 1;
	optional enBattleType battle_type = 2 [default=E_Battle_Type_None];//战斗类型
	optional string owner_name = 3[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];//房主名
	optional string room_name  = 4[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];//房间名
	optional bool only_not_full = 5; //只有未满的房间
	optional bool only_not_private = 6; //只搜索非隐私房间
	optional int32 offset = 7; //搜索跳过的房间
	optional int32 limit = 8; //只返回最多的个数
	optional int32 index = 9; //query_page_index from 1
}

message Proto_CSRoomQueryListRsp
{
	repeated RoomQueryInfo room_list 	= 1; //房间列表
	optional int32 index 				= 2; //current_page; 1<=index<=max_page
	optional int32 max_page				= 3; //max_page;
	optional enBattleType battle_type 	= 4; //query的战斗类型
}

//进入房间
message Proto_CSRoomEnterReq
{

	required int32                 	room_id         = 1;            //room_id
    optional string                 room_password   = 2[(yd_fieldoptions.field_bufsize)=16, (yd_fieldoptions.field_string_len)=16];
	//20181016保留
    optional enCampType             camp            = 3;	//阵营
	optional Proto_CSItemUseSet     item_list       = 4[(yd_fieldoptions.field_arysize)=3];	//道具列表,包含装备 
}

message Proto_CSRoomReadyReq
{
	optional enRoomPlayerState player_state = 1;
}

message Proto_CSRoomReadyNtf
{

    optional RoomPlaceState   place_info = 1;//对应位置的信息变化
                //20181016保留
	optional uint64 role_id = 2;
	optional bool isReady = 3;
}

message Proto_CSRoomMovePlaceReq
{
	required int32	dest_place_id	= 1;//目标位置，对应1到6，
	optional int32	src_place_id	= 2;//起始位置，只有当房主移动其他人时才需要
}

message Proto_CSRoomMovePlaceNtf
{
	optional RoomPlaceState dest_place_info	= 1;
	optional RoomPlaceState	src_place_info = 2;
}

message Proto_CSRoomClosePlaceReq
{
	required int32	place_id	= 1;
	required bool	close_place = 2;//true关闭，false打开
}

message Proto_CSRoomClosePlaceNtf
{
	optional RoomPlaceState place_info	= 1;
}

message Proto_CSRoomInfoNtf
{
	required RoomBaseInfo           room_info       = 1;            //房间详细信息
}

message Proto_CSRoomInfoPlaceNtf
{
	repeated RoomPlaceState 		place_list		= 1;			//位置列表；
}

message Proto_CSRoomKiciOffPlayerReq{
	optional int32 					place_id		= 1;			//位置Id
}

message Proto_CSRoomTransferRoomOwnerReq{
	optional int32					place_id		= 1;			//位置Id
}

message Proto_CSRoomInviteReq
{
	optional uint64			role_id		= 1;
	//optional enBattleType	battle_type	= 2;
}

message Proto_CSRoomInviteNtf
{
	optional int32			room_id			= 1;
	optional string			room_owner_name = 2;
	optional enBattleType	battle_type		= 3;
}

message Proto_CSRoomInviteResultReq
{
	required int32			room_id			= 1;
	required bool 			accept			= 2;
}

message Proto_CSHallPlayerListReq
{
	optional int32			index			= 1;//第几页
}

message Proto_CSHallPlayerListRsp
{
	repeated RolePanelInfo			role_list		= 1[(yd_fieldoptions.field_arysize)=20];
	optional int32					index			= 2;//index page
	optional int32					max_page		= 3;//max page
}

message Proto_CSHallSetInviteReq
{
	required bool	invite_state = 1;//true接受邀请，false拒绝邀请
}

message Proto_CSHallSetInviteRsp
{
	required bool	invite_state = 1;//true接受邀请，false拒绝邀请
}

//申请查看某房间的内部信息
message Proto_CSRoomLookReq
{
	required uint64 room_id = 1; //room_id
}
//申请查看某房间的内部信息
message Proto_CSRoomLookRsp
{
	required RoomBaseInfo room_info = 1;
	repeated RoomPlayerBattleInfo player_list = 2; 
	repeated uint64 observer_list = 3;
}
//申请退出查看某房间的内部信息
message Proto_CSRoomLookOutReq
{
	required uint64 room_id = 1; //room_id
}
//申请退出查看某房间的内部信息
message Proto_CSRoomLookOutRsp
{
	required uint64 room_id = 1; //room_id
}

enum enRoomEnterResult
{
	EN_ROOM_ENTER_SUCCESS 	=	0;
	EN_ROOM_NEED_PASSWORD 	=	1;
	EN_ROOM_ERROR_PASSWORD	=	2;
	EN_ROOM_NOT_EXIST	=	3;
}

//进入房间，房间的信息发给新进者
message Proto_CSRoomEnterRsp
{
	optional int32					room_id			= 1;//room_id
	optional enRoomEnterResult		result			= 2[default=EN_ROOM_ENTER_SUCCESS];
	optional RoomBaseInfo 			room_info 		= 3;
	repeated RoomPlayerBattleInfo 	player_list 	= 4; 
	repeated uint64 				observer_list 	= 5;
	optional RoomMiscData			misc_data		= 6;  //杂项数据，公会战一些信息，慎发
}

//新进者信息发给房间里的人
message Proto_CSRoomEnterNtf
{	
	required	RoomPlayerBattleInfo	player = 1;
	optional	uint64 room_id = 2; //room_id
}

//离开房间请求
message Proto_CSRoomLeaveReq
{
	required uint64 room_id = 1; //room_id
}

//离开房间
message Proto_CSRoomLeaveNtf
{
	optional bool is_be_remove=1;//true被踢出，false自己离开
}

//房间销毁通知
message Proto_CSRoomDestroyNtf		//目前为空包，包内容待根据需要后续添加
{
	required uint64 room_id = 1; //room_id
}

message Proto_CSRoomChangeCampReq
{
	optional uint64 room_id = 1; //room_id
	optional uint64 role_id = 2; //角色ID
	optional enCampType camp = 3;	//阵营
	optional Proto_CSItemUseSet item_list = 4[(yd_fieldoptions.field_arysize)=3];	//道具列表,包含装备 
}
message Proto_CSRoomChangeCampNtf
{
	required uint64 room_id = 1; //room_id
	required uint64 role_id = 2; //角色ID
	required enCampType camp = 3;	//自己的阵营
}

message Proto_CSRoomStartBattleReq
{
	required int32 room_id = 1; //room_id
	optional Proto_CSItemUseSet item_list = 2[(yd_fieldoptions.field_arysize)=3];	//道具列表,包含装备 
}

message Proto_CSRoomQueryReq
{
	optional uint64 room_id = 1; //查询房间信息,如果不填则返回自己的房间信息
	optional int32 origin = 2; //该消息的来源
}

message Proto_CSRoomQuerySingleReq
{
	optional uint64 room_id = 1; //查询房间信息,如果不填则返回自己的房间信息
	optional int32 origin = 2; //该消息的来源
}

message Proto_CSRoomInfoChangeReq
{
	optional int32                  room_id         = 1;            //room_id
    optional string                 room_password   = 2[(yd_fieldoptions.field_bufsize)=16, (yd_fieldoptions.field_string_len)=16];//房间密码  
	optional string                 room_name       = 3[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];//房间名
	optional uint64					room_owner_id	= 4;			//房主id

	optional int32 map_desc_id = 5; //地图ID
	optional enComputerAILevel ai_level = 6[default=EN_AI_LEVEL_NULL]; //电脑AI等级
	optional bool enable_observer = 7; //是否允许观战
	repeated int32 camp_player_max_size = 8;	
	optional int32 level_group_id = 9; //随机副本组ID
}

message Proto_CSRoomInfoChangeNtf
{
	optional string 				room_name       = 1[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];//房间名
	optional uint64					room_owner_id	= 2;																		   //房主id
	optional string					room_owner_name = 3[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];//房主姓名

	//20181016: will abandon
	optional uint64 room_id = 5; //room_id
	optional int32 map_desc_id = 6; //地图ID
	optional enComputerAILevel ai_level = 7[default=EN_AI_LEVEL_NULL]; //电脑AI等级
	optional bool enable_observer = 8; //是否允许观战
	repeated int32 camp_player_max_size = 9;	
	optional int32 level_group_id = 10; //随机副本组ID
}

message Proto_CSRoomPlayerEmojiReq
{
	optional int32 emoji_id		= 1;	//社交表情id；
}

message Proto_CSRoomPlayerEmojiNtf
{
	optional int32 emoji_id		= 1;	//社交表情id；
	optional int32 place_id		= 2;	//房间位置；
}

message Proto_CSMechStatusReq
{
	required int32 id = 1;
	required string action_mode = 2[(yd_fieldoptions.field_bufsize)=32]; //机甲驾驶后的状态
}

message Proto_CSBattleDriveMechReq
{
	required uint64 role_id = 1;
	required int32 mech_id = 2;
}

message RoomMatchData
{
    required enPlayerMatchState match_state = 1[default=MATCH_STATE_NONE];
    optional enMatchGameType    game_type   = 2[default=EN_MATCH_GAME_TYPE_NONE];
    optional uint64             start_matching_time = 3;
    repeated MatchConfirmInfo   match_confirm_info = 4;
    optional uint32             confirm_start_time = 5;
}


//查询房间信息
message Proto_CSRoomQueryRsp
{
	optional RoomQueryInfo room_info = 1; //判断has_room_info
	repeated RoomPlayerBattleInfo player_list = 2;
	optional uint64 ticket = 3; //只有在战斗状态才会发ticket
	optional int32 origin = 4; //该消息的来源
	repeated uint64 observer_list = 5;
	optional RoomMiscData	misc_data	= 6;  //杂项数据，公会战一些信息，慎发
    optional RoomMatchData  match_data  = 7; // match data
}

message Proto_CSQuickMatchCancelReq
{

}
message Proto_CSQuickMatchCancelRsp
{

}

message Proto_CSRoomQuerySingleRsp
{
	optional RoomQueryInfo room_info = 1; //has_room_inf
}

enum enPvp1v1ChgReason
{
	EN_1V1_CHG_REASON_NONE = 0;    
	EN_1V1_CHG_REASON_SCORE = 1;   //比赛分数改变
	EN_1V1_CHG_REASON_RESET = 2;   //赛季重置
	EN_1V1_CHG_REASON_WEEK = 3;    //周重置
}


message Proto_CS1v1MatchDataNtf
{
    optional Pvp1v1Data data = 1;
	optional int32 reason = 2;    //原因
}

message Proto_CSPvPTaskAwardReq
{
	optional int32 id = 1;
}

message Proto_CSPvPTaskAwardRsp
{
	optional int32 id = 2;
	optional Pvp1v1Data data = 1;
}

message CSTeamCreate
{
	required int32 team_platform_id = 1; //活动ID, 如果为0，显示为'无目标, 1-80级'
	optional bool auto_match = 2; //自动匹配,组队平台点了"自动匹配发送此设置"
}

message CSTeamCreateRsp
{
	required int32 team_platform_id = 1; //活动ID, 如果为0，显示为'无目标, 1-80级'
	required uint64 team_id = 2; //队伍ID
	optional bool auto_match = 3; //自动匹配,组队平台点了"自动匹配发送此设置"
}

message CSTeamQueryList
{
	required int32 team_platform_id = 1; //活动ID, 如果为0，显示为'无目标, 1-80级'
	optional int32 offset = 2[default=0]; //偏移 
	optional int32 limit = 3[default=50]; //数量，offset和limit组合用来分页或滚动
}

message CSTeamInviteFriend
{
	required uint64 friend_id = 1; //目标RoleID
	required uint64 team_id = 2;//队伍ID
	required string friend_name = 3;//目标名字
}

message CSTeamInviteFriendRsp
{
	required uint64 friend_id = 1;//好友ID
	required uint64 team_id = 2; //队伍ID
}

message CSTeamInviteFriendResultNtf
{
	required uint64 friend_id = 1;//好友ID
	required uint64 team_id = 2; //队伍ID
	required string friend_name = 3;//目标名字
	required int32 result = 4; //0:同意 1:不同意
}

message CSTeamInviteLeaderNtf
{
	required uint64 inviter_id = 1; //邀请者名字
	required string inviter_name = 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //邀请者名字
	required uint64 friend_id = 3; //目标RoleID
	required string friend_name = 4[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //邀请者名字
	required uint64 team_id = 5;//队伍ID
}

message CSTeamInviteLeaderReply
{
	required uint64 friend_id = 1; //目标RoleID
	required uint64 team_id = 2;//队伍ID
	required uint64 inviter_id = 3; //邀请者RoleID
	required string inviter_name = 4[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //邀请者名字
	required int32 result = 5; //0:同意 1:不同意
}

message CSTeamLeaderRefuseInviteNtf
{
	required uint64 team_id = 1;//队伍ID
	required uint64 leader_role_id = 2; //队长ID
	required string leader_name = 3[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //队长名字
	required uint64 friend_id = 4; //目标RoleID
	required string friend_name = 5; //目标名字
}

message CSTeamInviteNotify
{
	required uint64 inviter_id = 1; //邀请者名字
	required string inviter_name = 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //邀请者名字
	required uint64 team_id = 3; //队伍ID
	required int32 team_platform_id = 4; //活动ID, 如果为0，显示为'无目标, 1-80级'
	required uint64 leader_role_id = 5; //队长ID
	required string leader_name = 6[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //队长名字
}

message CSTeamReplyInvite
{
	required uint64 inviter_id = 1; //邀请人ID
	required uint64 team_id = 2; //队伍ID
	required uint64 leader_role_id = 3; //队长ID
	required int32 result = 4; //0:同意 1:不同意
}

message CSTeamReplyInviteRsp
{
	required uint64 inviter_id = 1;//邀请者ID
	required string inviter_name = 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //邀请者名字
	required uint64 team_id = 3; //队伍ID
	required uint64 leader_role_id = 4; //队长ID
	required string leader_name = 5[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //队长名字
}

message CSTeamApply
{
	required uint64 team_id = 1; //队伍ID
	required uint64 role_id = 2; //队长角色ID或队员RoleID
}

message CSTeamApplyReply
{
	required uint64 team_id = 1; //队伍ID
	required uint64 applicant_id = 2;//申请人ID
	required string applicant_name = 3; //申请人名字
	required int32 result = 4; //0:同意 1:不同意
}

message CSTeamApplyReplyRsp
{
	required uint64 team_id = 1; //队伍ID
	required uint64 applicant_id = 2;//申请人ID
	required string applicant_name = 3; //申请人名字
	required int32 result = 4; //0:同意 1:不同意
}

message CSTeamQuit
{
	required uint64 team_id = 1; //队伍ID
	required int32 team_platform_id = 2; //活动ID
}

message CSTeamSnsInviteNtf
{
	required uint64 invite_uid = 1;    //邀请uid
	optional uint64 team_id = 2;       //队伍ID
	optional uint64 invitee_id = 3;    //邀请人roleid
	optional string invitee_name = 4;  //邀请人名字
	optional bool is_friend = 5;       //是否是好友
	optional bool is_same_guild = 6;   //是否同工会
	optional int32 invitee_lv = 7;     //邀请者等级
	optional int32 invitee_prof = 8;   //邀请者职业
	optional int32 team_platform_id = 9; //活动ID
	optional int32 transfer_id = 10;   //邀请者转职ID
}

message CSTeamSnsInviteReplyReq
{
	required uint64 invitee_role_id = 1;  //邀请者RoleID
	optional bool is_accept = 2;          //是否接受邀请
	optional uint64 team_id = 3;
}

message LevelSkillPreviewPara
{
	optional int32 branch_id = 1;    //预览分系
}

message LevelTormentTowerData
{
	optional int32 tower_id = 1;
}

message ExtraLevelEntrancePara
{
    optional LevelRushData          rush_data          = 1;
    optional LevelInstanceData      instance_data      = 2; 
    optional LevelSkillPreviewPara  skill_preview_data = 3; //技能预览参数
	optional LevelTormentTowerData  torment_tower_data = 4; //试炼塔数据
}

message CSTeamStartBattleReq
{
	optional uint64                 team_id            = 1; //队伍ID
	optional int32                  team_platform_id   = 2; //活动ID
	optional int32                  map_desc_id        = 3; //关卡地图ID
	optional int32                  level_link_desc_id = 4; //level link
    optional int32                  npc_global_id      = 5; //npc id
	optional int32                  npc_id             = 6; //npc desc id

	optional ExtraLevelEntrancePara extra_para         = 10; //关卡进入额外参数
}

message EnterLevelResultPrelevelFinish
{
	repeated string name = 1; //名字
}

message EnterLevelResultLevelNotEnough
{
	required int32 required_level = 1; //需要的等级
	repeated string name = 2; //名字 
}

message EnterLevelResultLevelAlreadyFinish
{
	repeated string name = 1; //名字 
}

message TreamStartBattleRoleInfo
{
    optional uint64 role_id     = 1;
	optional int32  ce          = 2;
	optional int32  hunter_coin = 3;
	repeated Item   items       = 4;
}

message CSTeamStartBattleNtf
{
	required uint64                   team_id            = 1; //队伍ID
	required int32                    team_platform_id   = 2; //活动ID
	required int32                    map_desc_id        = 3; //关卡地图ID
	optional int32                    level_link_desc_id = 4; 
	repeated uint64                   needed_role_list   = 5; //弹面板的角色列表
	repeated TreamStartBattleRoleInfo role_info_list     = 6;
    optional ExtraLevelEntrancePara   extra_para         = 7;                    
}

message StartBattleFailedPara
{
	required Proto_CS_ErrorCode error_code = 1[default=ERR_CODE_OK];
	optional uint64 role_id = 2;
	optional string role_name = 3;
	optional int32 num = 4;
}

message StartBattleFailedParaList
{
	repeated StartBattleFailedPara failed_list = 1;
}

message CSTeamStartBattleFailedNtf
{
	required uint64 team_id = 1; //队伍ID
	required int32 team_platform_id = 2; //活动ID
	required int32 map_desc_id = 3; //关卡地图ID
	required StartBattleFailedParaList failed_list = 4; //错误列表
	optional int32 instance_desc_id = 5; //副本ID
}

message CSTeamStartBattleConfirmReq
{
	required uint64 team_id = 1;
	required int32 team_platform_id = 2; //活动ID
	required int32 map_desc_id = 3; //关卡地图ID
	required int32 result = 4; //0:同意 1:不同意
	optional int32 instance_desc_id = 5; //副本ID
}

message CSTeamStartBattleConfirmNtf
{
	required uint64 team_id            = 1;
	required int32  team_platform_id   = 2; //活动ID
	required int32  map_desc_id        = 3; //关卡地图ID
    required int32  level_link_desc_id = 4;
	required uint64 role_id            = 5;
	required string role_name          = 6; //申请人名字
	required int32  result             = 7; //0:同意 1:不同意
	optional int32  hunter_coin        = 8; //寻宝点
	optional int32  ce                 = 9; //战斗力
	repeated Item   items              = 10;
}

message CSTeamQuitNtf
{
	required uint64 team_id = 1; //队伍ID
	required uint64 role_id = 2; //角色ID
	required string role_name = 3; //角色名字
}

message CSTeamApplyRsp
{
	required string leader_role_name = 1;//队长名字
	required uint64 team_id = 2; //team id
}

message TeamInfo
{
	required uint64 team_id = 1;//队伍ID	
	required int32 team_platform_id = 2; //活动ID, 如果为0，显示为'无目标, 1-80级'
	required int32 lower_level = 3; //等级下限
	required int32 upper_level = 4; //等级上限
	repeated TeamMember member_list = 5;//成员列表
}

message CSTeamQueryListRsp
{
	repeated TeamInfo team_list = 1; //队伍列表
	required int32 team_platform_id = 2; //活动ID, 如果为0，显示为'无目标, 1-80级'
	required int32 auto_match_team_num = 3;
	required int32 auto_match_player_num = 4;
}

message CSTeamInfoNotify
{
	required uint64 team_id = 1; 
	required int32 team_platform_id = 2; //活动ID, 如果为0，显示为'无目标, 1-80级'
	required int32 lower_level = 3; //等级下限
	required int32 upper_level = 4; //等级上限
	required int32 max_num = 5;//最大人数
	required bool auto_match = 6; //是否自动匹配
	required CSTeamNotifyEvent team_event = 7; 
	repeated TeamMember member_list = 8;//成员列表
}

message CSTeamApplyNotify
{
	required uint64 applicant_id           = 1; //申请者ID
	required string applicant_name         = 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];//申请者名字
	required uint64 team_id                = 3; //队伍ID
	required int32  team_platform_id       = 4; //活动ID, 如果为0，显示为'无目标, 1-80级'
	required int32  applicant_city_hero_id = 5;//模型
	required int32  applicant_level        = 6; //申请者等级
	required string applicant_guild_name   = 7; //申请者公会名称
	repeated int32  fashions               = 8 [(yd_fieldoptions.field_arysize) = 7]; //申请者时装
}

message CSTeamChangeSettingsReq
{
	required uint64 team_id = 1;
	required int32 team_platform_id = 2; //活动ID, 如果为0，显示为'无目标, 1-80级' 
	required int32 lower_level = 3; //等级下限
	required int32 upper_level = 4; //等级上限
	required bool auto_match = 5; //自动匹配
}

message CSTeamChangeSettingsNtf
{
	required uint64 team_id = 1;
	required int32 team_platform_id = 2; //活动ID, 如果为0，显示为'无目标, 1-80级' 
	required int32 lower_level = 3; //等级下限
	required int32 upper_level = 4; //等级上限
	required bool auto_match = 5; //自动匹配
}

message CSTeamSetPlayerStateReq
{
	required uint64 team_id = 1;
	required enTeamPlayerState state = 2[default=E_Team_Player_State_Follow]; //队伍状态，可设为暂离/正常/跟随
}

message CSTeamSetPlayerStateNtf
{
	required uint64 team_id = 1;
	required uint64 role_id = 2;//角色ID
	required enTeamPlayerState state = 3[default=E_Team_Player_State_Follow]; //队伍状态，可设为暂离/正常/跟随
}

message CSTeamKickReq
{
	required uint64 team_id = 1;
	required uint64 target_role_id = 2; //要踢的角色ID
}

message CSTeamKickNtf
{
	required uint64 team_id = 1; //队伍ID
	required uint64 role_id = 2; //角色ID
	required string role_name = 3; //角色名字
}

message CSTeamAppointLeaderReq
{
	required uint64 team_id = 1; //队伍ID
	required uint64 target_role_id = 2;//新队长角色ID
}

message CSTeamApplyLeaderReq
{
	required uint64 team_id = 1; //队伍ID
}

message CSTeamApplyLeaderNtf
{
	required uint64 team_id = 1; //队伍ID
	required uint64 applicant_id = 2; //申请者角色ID
	required string applicant_name = 3; //申请者角色名
}

message CSTeamReplyApplyLeaderReq
{
	required uint64 team_id = 1; //队伍ID
	required uint64 applicant_id = 2; //申请者角色ID
	required int32 result = 3; //0:同意 1:不同意
}

message CSTeamApplyLeaderResultNtf
{
	required uint64 team_id = 1; //队伍ID
	required uint64 applicant_id = 2; //申请者角色ID
	required string applicant_name = 3; //申请者角色名
	required int32 result = 4; //0:成功 1:失败 
	repeated string refused_role_name = 5; //拒绝的角色列表
}

message CSTeamLeaderChangedNtf
{
	required uint64 team_id = 1; //队伍ID
	required uint64 leader_role_id = 2;//新队长角色ID
	required string leader_role_name = 3; //新队长角色名
}

message CSTeamRecallReq
{
	required uint64 team_id = 1; //队伍ID
	required uint64 target_role_id = 2; //目标角色ID
}

message CSTeamRecallNtf
{
	required uint64 team_id = 1; //队伍ID
	required uint64 leader_role_id = 2;//队长角色ID
	required string leader_role_name = 3; //队长角色名
}
	
message CSTeamRecallRsp
{
	required uint64 team_id = 1; //队伍ID
	required uint64 target_role_id = 2; //目标角色ID
}

message CSTeamReplyRecallReq
{
	required uint64 team_id = 1; //队伍ID
	required uint64 leader_role_id = 2;//队长角色ID
	required int32 result = 3; //0:同意 1:不同意
}

message CSTeamReplyRecallNtf
{
	required uint64 team_id = 1; //队伍ID
	required uint64 replyer_id = 2; //角色ID
	required string replyer_name = 3; //角色名
	required Proto_CS_ErrorCode error_code = 4[default=ERR_CODE_OK];
	//ERR_CODE_TEAM_REPLY_RECALL_REFUSED					= 11275;		//召回回复, 目标拒绝
	//ERR_CODE_TEAM_REPLY_RECALL_TARGET_IN_BATTLE			= 11277;		//召回回复，目标在战斗中
	//ERR_CODE_TEAM_REPLY_RECALL_IN_BATTLE					= 11276;		//召回回复，队长在战斗中
}

message CSTeamAutoMatchReq
{
	required int32 team_platform_id = 1;
}

message CSTeamAutoMatchRsp
{
	required int32 team_platform_id = 1;
}

message CSTeamAutoMatchResultNtf
{
	required int32 team_platform_id = 1; //活动ID, 如果为0，显示为'无目标, 1-80级'
	required uint64 team_id = 2; //队伍ID
}

message CSTeamDismissNtf
{
	required uint64 team_id = 2; //队伍ID
}

//PVP碰撞数据
message Proto_PvpHitData
{
	required uint64 HitId = 1;//碰撞id
	required bool FlightSkill = 2; //是否飞行技能
	optional bool IsPhantomSkill = 4; // 是否是分身技能
	required int32 SkillID = 3; //技能ID
	required int32 SkillLevel = 5;// 技能等级
	optional int32 descID = 6;// 攻击方的描述id,由FlightSkill决定是角色或者飞行道具id
}
 
//PVP攻击方状态
message Proto_PvpAttackerState
{
	required int32 Direction = 1; //朝向
	required Proto_Vector3 Position = 2; //角色坐标
	required int32 AttackerType = 3; //攻击方类型
	required int32 BreakLevel = 4; //打断等级
    optional int32 LinkeId = 5; //平台id
}

//PVP被击方状态
message Proto_PvpAccepterState
{
	required int32 Direction = 1; //朝向
	required Proto_Vector3 Position = 2; //角色坐标
	required int32 SuperArmorLevel = 3; //霸体等级
	required bool IsNumbing = 4; //是否硬直中
	required bool IsLying = 5; //是否躺下
	required bool InLowFloat = 6; //是否低浮空状态
	required bool InAir = 7; //是否在空中
	required bool InRebound = 8; //反弹状态
	required int32 ReboundCount = 9; //反弹计数
    optional int32 LinkeId = 10; //平台id
}

//PVP动作同步
message Proto_PvpSynAction
{
	required uint64 RoleId = 1; //角色id
	required Proto_Vector3 Position = 2; //角色坐标
	required int32 Action = 3; //动作
	required int32 KeyState = 4; //键位状态
	required int32 skillID = 5; //绑定的技能ID
	required int32 Direction = 6;// 朝向
	optional int32 seq = 7 ;//序列号
    optional int32 TargetId = 8;//目标id
    optional int32 LinkId = 9;//平台id
	optional Proto_Vector3 moveVector = 10;//移动相关
	optional bool jumpCheckSkill = 11;// 跳转是否检测技能cd
	optional int32 StartFrame = 12;
	optional ActionSynType synType = 13[default = JUMP];// 同步类型
	optional bool isProjectile = 14;// 是飞行道具的话
	optional int32 projectileInstanceId = 15;// 飞行道具实例id
	optional int32 seed = 16;// 前段同步用种子
	optional bool IsPhantom = 17;// 为true时是分身的Action同步
	optional int32 move_seq = 18; //移动序列号
	optional int32 skillLevel = 19; //绑定的技能等级
	optional bool IsStop = 20;   //是否停止移动
	optional int32 FadeTime = 21[default=-1];   //融合时间
	optional int32 emoji_id = 22[default=-1];      //社交表情id
}

enum ActionSynType
{
	JUMP = 1;// 跳转
	KEY_STATE = 2;// 同步按键状态
	TARGET = 3;// 同步对象
}

// 被击组
message Proto_PvpAccepterData
{
    required int32 AccepterId                    = 1;  //被击角色id
	required Proto_PvpAccepterState AccepterState = 2;  //被击方状态
	required Proto_Vector3          HitPoint      = 3;  //碰撞点
	required bool                   IsHit         = 4;  //是否命中
	required bool                   IsCrit        = 5;  //是否暴击
	optional int64                  Damage        = 6;  //伤害
	optional int64                  Heal          = 7;  //治疗量
	required bool                   IsNumb        = 8;  //是否硬直
	required int32                  ATKType       = 9;  //攻击类型
	required Proto_Vector3          HitDirection  = 10; // 被击方向
	optional int32                  BuffId        = 11; //Hit附带加的Buff
	optional int32                  seed          = 12; //随机计算用的种子
}

// PVP转发同步碰撞
message Proto_PvpSynHit
{
    required int32                 AttackerId       = 1; //攻击角色id
	required Proto_PvpHitData       HitData          = 2; //碰撞数据
	required Proto_PvpAttackerState AttackerState    = 3; //攻击方状态
	required int32                  instanceId       = 4; //计数id
	optional int32                  seq              = 5; //Action的序列号
	optional int32                  actionIndex      = 6; //Action的索引
	optional int32                  linkActionIndex  = 7; //关联的Action的索引（飞行道具专用）
	required int32                  HitBoxGroupIndex = 8; //此次hit关联的碰撞盒组索引
	repeated Proto_PvpAccepterData AccepterGroup     = 10;//被击对象组
}

//  <!-- PVP转发同步buff -->
message Proto_PvpSynBuff
{
	required uint64 SourceRoleId = 1; //发起Buff的角色id
	required uint64 TargetRoleId = 2; //Buff作用目标的角色id
	required int32 Operate = 3; //操作，0移除，1添加
	required int32 BuffIdList = 4[(yd_fieldoptions.field_arysize)=50]; //Buff构成列表
}

message Proto_PvpSynSwitchMember
{
	required uint64 RoleId = 1; //角色id
	required Proto_Vector3 Position = 2; //角色坐标
	required int32 KeyState = 3; //键位状态
	required int32 Direction = 4;// 朝向
    optional int32 LinkeId = 5;//平台id
	optional int32 hero_team_id = 6;	//英雄组id，同组英雄战斗可切换
}

message Proto_PvpSynPartnerUseSupportSkill
{
	required uint64 RoleId = 1; // 持有者角色id
    required int32 ObjectId = 2;// 小伙伴对象id
	required bool hideOnOver = 3;// 结束时隐藏
}

//  <!-- PVP转发发射投射物 -->
message Proto_PvpSynProjectile
{
    required int32 RoleId = 1; //角色id
	optional int32 index = 2; //飞行道具在角色模板中的索引
	optional Proto_Vector3 position = 3; //发生位置
	optional int32 direction = 4;//左右朝向
	optional Proto_Vector3 vector = 5;//方向矢量
	optional int32 actionIndex = 8;//本体的Action索引 
	optional int32 linkActionIndex = 9;//关联的Action索引（哪个技能放出来的，飞行道具专用）
	optional int32 seed = 10;// 随机种子
	optional int32 seq = 11;
	optional bool isBuffTrigger = 12; // buff触发的
	optional int32 seqFromServer = 14; // buff触发的飞行道具从服务器分配的Sequence
	required int32 projectileId = 13; // 飞行道具id

	optional ProjectileSynType synType = 15[default = ADD];// 同步类型
	required int32 instanceId = 16;// 飞行道具实例id
	optional int32 sourceProjectileId = 17; // 释放源飞行道具id（如果是飞行道具产生的飞行道具）
    optional int32 targetId = 101; // 飞行道具对象id
	optional int32 projectileTargetInstanceId = 102;// 飞行道具对象实例id(当飞行道具对象是飞行道具时)
	optional bool targetIsCharacter = 103; // 对象是否是角色

}

enum ProjectileSynType
{
	ADD = 1;// 添加
	REVISE = 2;// 修正
}
  
//  <!-- PVP转发同步Combo -->
message Proto_PvpSynCombo
{
	required uint64 RoleId = 1; //攻击角色id
	required Proto_Vector3 Position = 2; //角色坐标
	required int32 KeyState = 3; //键位状态
	repeated int32 EventList = 4[(yd_fieldoptions.field_arysize)=8];// 事件列表
	required int32 Action = 5; //动作
    optional int32 LinkeId = 6; //平台id
    optional int32 StartFrame = 7; // 开始帧
}

//  <!-- PVP转发二级命令号 -->
//pvp同步包类型
enum Proto_SynType
{
	CMD_SYN_ACTION = 1;
	CMD_SYN_HIT = 2;
	CMD_SYN_COMBO = 3;
	CMD_SYN_SWITCH_MEMBER = 4;
	CMD_SYN_PROJECTILE = 5;
}

//  <!-- PVP转发二级协议包体 -->
message Proto_SynPkg
{
	required int32 Cmd = 1; //命令号
	optional Proto_PvpSynAction SynAction = 2;//CMD_SYN_ACTION
	optional Proto_PvpSynHit SynHit = 3; //CMD_SYN_HIT
	optional Proto_PvpSynCombo SynCombo = 4; //CMD_SYN_COMBO
	optional Proto_PvpSynSwitchMember SynSwitchMenber = 5; //CMD_SYN_SWITCH_MEMBER
	optional Proto_PvpSynProjectile SynProjectile = 7;//CMD_SYN_PROJECTILE
	optional uint64 timeStamp = 6; //时间戳
}

message Proto_CSPvpFight_Head
{
	required int32 CmdType = 1;
	required uint64 Roomid = 2;
	required uint64 HeroId = 3;
}

//<!-- PVP外层协议命令号 -->
enum Proto_CSPvpFight_CMD{
	CS_REQUEST_SERVER = 1;//PVP开始
	SC_PVP_START = 2;
	CS_PVP_TRANSPORTER_DATA = 3;//PVP转发数据
	SC_PVP_TRANSPORTER_DATA = 4;
	CS_PVP_OVER = 5; //PVP结束
	SC_PVP_OVER = 6;
	SC_PVP_ONLINE = 7; //PVP在线
	SC_PVP_RSP = 8; //服务器回包
	SC_PVP_OFFLINE = 9; //自己已经掉线，不让发包
	CS_PVP_ROOMSTATUS = 10; //请求房间状态
	SC_PVP_ROOMSTATUS = 11; //返回房间状态
	CS_PVP_HEARTBEAT = 12; //心跳包
	SC_PVP_HEARTBEAT = 13;
	SC_PVP_ONLINEDATASYNC = 14; //断线重连数据同步
}

message Proto_SCPVPStart
{
	required uint32 Reverse = 1;
}

//<!-- PVP转发数据,客户端到服务端 -->
message Proto_CSPvpTransportData
{
	required uint64 SKey = 1; //skey
	required uint32 SynPkgLen = 2; //SynPkg长度
	required bytes Proto_SynPkg = 3; //PVP同步数据
	//required SynOnlinePvpData SynData = 4; //给服务器记录同步数据
};

//<!-- PVP转发数据,服务端到客户端 -->
message Proto_SCPvpTransportData
{
	required uint32 SynPkgLen = 2; //SynPkg长度
	required bytes Proto_SynPkg = 3; //PVP同步数据
}

//PVP结果
message Proto_PVPResult
{
	required uint64 HeroId = 1; //角色id
	required uint32 IsWinner = 2; //输0，赢1，平局2
}

//<!--CS PVP结束 -->
message Proto_CSPVPOver
{
	required uint64 SKey = 1;
	required uint32 OverType = 2; //是否放弃
	repeated Proto_PVPResult ResultList = 4[(yd_fieldoptions.field_arysize)=4]; //pvp结果列表
}

//<!--SC PVP结束 -->
message Proto_SCPVPOver
{
	repeated Proto_PVPResult ResultList = 4[(yd_fieldoptions.field_arysize)=4]; //pvp结果列表
}

//PVP掉线
message Proto_PVPOnLine
{
	required uint64 HeroId = 1; // 角色id
	required uint32 OnLine = 2; //0,在线 1,掉线
}

//  <!--SC 掉线 -->
message Proto_SCPVPOnLine
{
	repeated Proto_PVPOnLine OnLineList = 1[(yd_fieldoptions.field_arysize)=4];
}

// <!-- 断线数据同步 -->
message Proto_SynOnlinePvpData
{
	required uint32 HP = 1;
	required int32 PointX = 2;
}
  
//  断线数据同步
message Proto_PVPOnLineDataSync
{
	required uint64 HeroId = 1;
	required Proto_SynOnlinePvpData Data = 2;
}
  
//   <!--SC 断线重连同步包 -->
message Proto_SCPVPOnLineDataSync
{
	repeated Proto_PVPOnLineDataSync DataList = 1[(yd_fieldoptions.field_arysize)=4];
}

//CS PVP 状态
message Proto_CSPVPStatus
{
	required uint64 SKey = 1;
	required int32 ret = 2;
}

//SC PVP 状态
message Proto_SCPVPStatus
{
	required int32 status = 1;
	required int32 reverse = 2;
}

//<!-- 请求PVP服务器 -->
message Proto_CSRequestServer
{
	required uint64 SKey = 1;
}

message Proto_CSPvpFight
{
	required Proto_CSPvpFight_Head head = 1;
	optional Proto_CSRequestServer requestSvr = 2;
	optional Proto_CSPvpTransportData transportData = 3;
	optional Proto_CSPVPOver over = 4;
	optional Proto_CSPVPStatus status = 5;
}

message Proto_SCPvpFight
{
	required Proto_CSPvpFight_Head head = 1;
	optional Proto_SCPVPStart start = 2;
	optional Proto_SCPvpTransportData transportData = 3;
	optional Proto_SCPVPOver over = 4;
	optional Proto_SCPVPOnLine online = 5;
	optional Proto_SCPVPOnLineDataSync dataSync = 6;
	optional Proto_SCPVPStatus status = 7;
}

message Proto_CSFightResult
{
	required int32 battle_id = 1; //战斗ID
	required enCampType winner_camp = 2; //胜利方阵营
}

message Proto_CSBattleEndSecReportReq
{
    required uint64 battle_id = 1; // 战斗唯一id
    required int32  map_desc_id = 2; // 关卡id
    required int32  battle_type = 3; //关卡类型
    required uint32 client_ts   = 4; //客户端时间戳

    optional int32  move_up_pix     = 10; //角色累计向上移动累计距离（单位：像素）
    optional int32  move_down_pix   = 11; //角色累计向下移动累计距离（单位：像素）
    optional int32  move_left_pix   = 12; //角色累计向左移动累计距离（单位：像素）
    optional int32  move_right_pix  = 13; //角色累计向右移动累计距离（单位：像素）

    optional int32  atk_button_pix      = 20; //普通攻击按钮的按键次数（只统计有效的按键次数）
    optional int32  skill_button_pix    = 21; //技能按钮的按键次数（只统计有效的按键次数）
    optional int32  help_button_pix     = 22; //援助按钮的按键次数（只统计有效的按键次数）

    optional int32  boss_move_pix       = 30; //所有boss累计移动距离（从boss出现到游戏结束）
    optional int32  enemy_move_pix      = 31; //所有小怪累计移动距离（从小怪出现到游戏结束）
}

enum CSMoveResetReason
{
	E_MoveReset_Reason_None = 0; //没有错误，正常重置位置，例如是传送
	E_MoveReset_Reason_Nav = 1; //导航网格寻路错误
	E_MoveReset_Reason_Airwall = 2; //空气墙阻挡错误
	E_MoveReset_Reason_Cannot_Move = 3; //处于不能移动状态, 目前意味着处于EPSI_PROHIBIT_ACTIONS
	E_MoveReset_Reason_Platform = 4; //移动平台校验
	E_MoveReset_Reason_Teleport = 5; //传送
}

//发生错误时的重置位置消息
message Proto_CSActorMoveReset
{
	required int32 id = 1;
	required Proto_Vector3 pos = 2;
	required int32 platform_id = 3;
	required CSMoveResetReason reason = 4[default=E_MoveReset_Reason_None];
	optional int32 move_seq = 5;//移动序列号, 0-65535循环(uint16)
}

enum enClientSysStateOp
{
	E_Client_Sys_Op_Hang_Up = 1; //挂起
	E_Client_Sys_Op_Running = 2; //运行态
}

enum enClientSysStateReason
{
	E_Client_Sys_State_Reason_Home = 1; //按了Home键
}

message Proto_CSClientSysState
{
	required enClientSysStateOp op = 1[default=E_Client_Sys_Op_Hang_Up]; //操作
	required enClientSysStateReason reason = 2[default=E_Client_Sys_State_Reason_Home]; //原因
	optional int32 timestamp = 3; //时间戳
}

//单局状态改变
message Proto_CSRoundStateChange
{
	required int32 battle_id = 1;				//战斗ID
	required int32 round_no = 2;				//当前第几局
	required enRoundStatus round_status  = 3;		//round阶段状态
	required uint64 time_stamp = 4;				//此时的server时间戳
	required uint64 left_time = 5;				//该段状态的剩余毫秒时间
	repeated uint32 camp_score = 6;			//各阵营得分
}

//单局胜负判定结果
message Proto_CSRoundRlt
{
	required int32 battle_id = 1;				//战斗ID
	required int32 round_no = 2;				//当前第几局
	required Proto_RoundRltType rlt_type = 3;	//结果种类
	required enCampType winner_camp = 4;		//胜利方阵营
}

//当前形势统计
message Proto_CSSituationAccountNtf
{
	repeated uint32 camp_value = 6;			//各阵营形势
}

//战斗开启
message Proto_CSBattleStartNtf
{
	optional RoomBaseInfo         room_info               = 1; //房间信息,即将废弃
	required uint64               ticket                  = 2; //验证码;
	repeated RoomPlayerBattleInfo player_list             = 3;//玩家列表
	optional RoleBattleInfo       battle_info             = 4; //战斗信息
	optional int32                rift_floor              = 5;
    optional RoomExtraBattleInfo  extra_info              = 6;
    optional int32                battle_type_start_times = 10; //此战斗类型的开启次数
}

message Proto_CSBattleSvrLoginReq
{
	required Proto_LoginClientInfo client_info = 1;
	required uint64 role_id = 2;
}

message Proto_CSBattleSvrLoginRsp
{
	required uint64 role_id				   = 1;
	required uint64 server_time            = 2;
}

message Proto_CSBattleEnterReq
{
	required uint64 battle_id = 1; //对局ID
	required uint64 ticket = 2; //验证码
}

enum BattleStatus
{
	BATTLE_STATUS_INIT = 0; //初始化
	BATTLE_STATUS_CREATE = 1; // 等待开始
    BATTLE_STATUS_PREPARE = 2; //准备阶段
	BATTLE_STATUS_START = 3; // 已经开始
	BATTLE_STATUS_PAUSE = 4; // 暂停状态
	BATTLE_STATUS_ROLL_ITEM = 5; // 组队掉落分赃
	BATTLE_STATUS_END = 6; //结束
}

//战斗信息
message Proto_CSBattleInfo
{
	required uint64                	battle_id             = 1; //对局ID
	required BattleStatus          	battle_status         = 2; //状态
	required int32                 	elaspse_time          = 3; //已经开始的时间，单位0.001s
	required int32            		duration              = 4; //此状态的最长时间，0值表示无限, 单位0.001s
	optional int32            		level_event_score     = 5; //关卡事件评分
	optional uint64           		status_start_time     = 7; //状态开始时间
	optional bool             		auto_fight_status     = 8; //是否自动战斗中 1:是, 0:不是
	optional bool             		waiting_load          = 9; //是否等待加载
	optional int32            		pause_time            = 10;//状态暂停时间
	optional bool             		pause                 = 11;//是否暂停
    optional int32                  training_guide_step   = 13; // 
    optional int32                  training_guide_times  = 14; // 
    optional int32                  training_guide_group  = 15; //训练场任务
    optional int32                  count                 = 16; //战场计数
    optional int32                  count_total           = 17; //计数总数
    optional bool                   show_ui               = 18; //是否显示UI
    optional int32                  tower_level           = 19;
}

enum MapStatus
{
	MAP_STATUS_INIT = 0; //初始化
	MAP_STATUS_START = 1; // 开始，此状态下客户端才能启动行为树。
}

message Proto_CSMapStateInfoNtf
{
	required uint64                	battle_id             = 1; //对局ID
	required int32					map_desc_id			  = 2; //地图ID
	required MapStatus				map_status			  = 3[default=MAP_STATUS_INIT]; //是否开始
}

enum enRoundStatus
{
	EN_ROUND_STATUS_INIT = 0;//
	EN_ROUND_STATUS_PENDING = 1; //ready倒计时 pre阶段 暂定3秒
	EN_ROUND_STATUS_INPROCESS = 2; //进行中 战斗阶段 90秒
	EN_ROUND_STATUS_END = 3; //5秒show
	EN_ROUND_STATUS_PREPARE = 4; //准备阶段，选人
}

message Proto_CSBattleEnterRsp
{
	required int32 map_desc_id = 1; //地图ID
	required Proto_CSBattleInfo battle_info = 2; //战斗
	optional bool  is_observer = 3; //本人是否为观战
}

enum enBattleStatisticTermType
{
	EN_BRTT_NONE                      = -1;
	EN_BRTT_KILL                      = 0;  //杀人数
	EN_BRTT_DEATH                     = 1;  //死亡次数
	EN_BRTT_DMG                       = 2;  //伤害
	EN_BRTT_ASIST                     = 3;  //助攻
	EN_BRTT_CONTRIBUTION              = 4;  //地图机制,贡献
	EN_BRTT_BATTLESCORE               = 5;	//个人战场比分 通过本类型的0~4综合计算得出
	EN_BRTT_KILL_CONTINUE             = 6;	//连续击杀数 ，一旦死亡 立刻清零
	EN_BRTT_REVIVAL_TIMESTAMP         = 7;	//复活完成的绝对时间戳
	EN_BRTT_DMG_PLAYER                = 8;  //对玩家造成伤害
	EN_BRTT_DMG_NOT_PLAYER            = 9;  //对非玩家造成伤害
	EN_BRTT_DEATH_TIMESTAMP           = 10; //上次死亡时间
	EN_BRTT_RESCUED                   = 11; //被救助次数
	EN_BRTT_REVIVAL_TIMES             = 12; //复活次数
	EN_BRTT_HURT                      = 13; //被伤害的数值
	EN_BRTT_MAX_COMBOS                = 14; //最大连击数
	EN_BRTT_HERO0_DMG                 = 15; //0号英雄造成伤害
	EN_BRTT_HERO1_DMG                 = 16; //1号英雄造成伤害
	EN_BRTT_PARTNER_REVIVAL_TIMESTAMP = 17; //伙伴复活时间戳
    EN_BRTT_TREAT                     = 18; //被治疗量
    EN_BRTT_EXPORT_TREAT              = 19; //总治疗量
    EN_BRTT_PARTNER_DMG               = 20; //伙伴伤害
    EN_BRTT_PARTNER_EXPORT_TREAT      = 21; //伙伴治疗
    EN_BRTT_SP_CONSUME                = 22; //消耗sp
    EN_BRTT_MP_CONSUME                = 23; //消耗mp
	EN_BRTT_HOLD                      = 24; //占领资源车次数
	EN_BRTT_HOLD_ASSIT                = 25; //占领资源车助攻
	EN_BRTT_TRANS                     = 26; //运球次数
	EN_BRTT_TRANS_ASSIT               = 27; //运球助攻
    EN_BRTT_BEEN_HIT_TIMES            = 28; //受击次数
    EN_BRTT_PARTNER_HURT              = 29; //伙伴被伤害的数值
    EN_BRTT_TREAT_TIMES               = 30; //被治疗次数
    EN_BRTT_INIT_HP                   = 31; //第一次受击前的血量
}

message BattleStatisticExtra
{
    optional int32 id     = 1;
	optional int32 value  = 2;
}

message BattleStatisticTerm
{
	required enBattleStatisticTermType term_type = 1; //类型
	required int32 term_value = 2; //值
	repeated BattleStatisticExtra extra_value = 3; //
}

//基本信息,要注意判断是否包含
message BattleStatisticsInfo
{
	required enCampType winner_camp = 1; //胜利方阵营，如果包含胜利方，则是最终结果
	repeated uint32 camp_score = 2;			//各阵营得分
}

message Proto_CSBattleEnergyNtf
{
	repeated uint32 camp_energy = 1; //各阵营能量值（大乱斗专用)
	repeated uint32 camp_energy_reset_num = 2; //各阵营能量值（大乱斗专用)
}

//战场信息统计同步
message BattleStatisticElement
{
	required uint64 role_id = 1; //角色ID
	required enCampType camp = 2; //所属阵营
	repeated BattleStatisticTerm term_list = 3; //统计项列表
	optional int32 battle_player_id = 4;//battle player id
}

//战场信息统计同步
message BattleStatisticElementDetail
{
	required uint64 role_id = 1; //角色ID
	required enCampType camp = 2; //所属阵营
	required uint32 avator_id 				= 3 ;	//指挥官头像
	required string name 					= 4 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
	repeated BattleStatisticTerm term_list = 5; //统计项列表
	optional int32 battle_player_id = 6;//battle player id
}

message Proto_CSBattleFinalReportNtf
{
	required int32                        battle_id             = 1; //战斗ID
	required enCampType                   winner_camp           = 2; //胜利方阵营
	required BattleStatisticsInfo         info                  = 3; //战场相关逻辑的信息
	repeated BattleStatisticElementDetail element_list          = 4; //报告列表
	required uint64                       battle_time           = 5; //本场的时间
	required uint64                       mvp_role_id           = 6; //本场的MPV玩家的ID
	optional bool                         is_multi_level        = 8; //是否连战关卡
	optional bool                         is_finail_multi_level = 9; //是否连战最后一关
}

//只有在超过2个英雄的时候才会发此条消息
message Proto_CSSubstitutionCDInfoNtf
{
	repeated int32 formation_list = 1; //玩家拥有的阵容列表
	repeated int32 cd_end_time_list = 2; //cd时间戳,到1970-1-1的秒数，最多有三组
}

message Proto_CSBattleSvrActorAttrChangeOne
{
	required int32 obj_id = 1; //对象ID
	repeated CSAttr attr_list = 2; //属性列表
}

//战斗服属性改变通知 
message Proto_CSBattleSvrAttrChangeNtf
{
	repeated Proto_CSBattleSvrActorAttrChangeOne  change_list = 1; //属性改变列表
}

message CSState
{
	required bytes bit_map = 1[(yd_fieldoptions.field_arysize)=32]; //状态 
}

//技能触发Buff
message CSBuffSkillTrigger
{
	required int32 skill_id = 1;//触发的技能ID
	required int32 seq = 2; //技能的序列号。与Action里的相同，用来标识技能实例
}

//技能触发器
message CSBuffTrigger
{
	optional CSBuffSkillTrigger skill_trigger = 1; //触发的技能ID
}

message OneBuffTriggerPara
{
	required int32 buff_id = 1;
	required int32 effect_index = 2;
	repeated int32 para_list = 3;
}

//通知Buff触发变更
message Proto_CSBuffTriggerParaNtf
{
	required int32 obj_id = 1;
	repeated OneBuffTriggerPara trigger_para_list = 2;
}

enum BuffOP
{
	BUFF_OP_ADD = 1; // 添加buff
	BUFF_OP_DEL = 2; //移除buff
	BUFF_OP_OVERLAY = 3; //覆盖buff
	BUFF_OP_INTERRUPT = 4; //中断buff
	BUFF_OP_EXEC = 5; //buff执行
}

//加buff操作
message Proto_CSObjectBuffOPReq
{
	required int32 target_id = 1;//buff的目标ID
	required int32 caster_id = 2; //buff的施放者ID
	required int32 buff_desc_id = 3; //buff的资源ID
	required int32 left_frame_time = 4; //剩余时间，单位:帧
	required BuffOP buff_op = 5; //操作类型,目前(2015-12-25只有增加)
	optional CSBuffTrigger trigger = 6; //触发信息
	required int32 seq = 7;//序列号,客户端标识
}

//对象Buff操作通知
message Proto_CSObjectBuffOPNtf
{
	required int32 target_id = 1; //buff拥有者id
	required int32 caster_id = 2; //释放者id
	required int32 buff_desc_id = 3; //buff资源id
	required int32 buff_id = 4; //buff objid
	required int32 left_time = 5; //剩余时间，单位:毫秒(ms), -1表示永久
	required BuffOP buff_op = 6; //操作类型
	optional int32 seq = 7; //只有客户端触发的buff, 会返回此值，对应Proto_CSObjectBuffOPReq里的seq
	required int32 stack = 8; //叠加的层数
	required int32 left_times = 9; //剩余生效次数, -1表示无数次
	repeated OneBuffTriggerPara trigger_para_list = 10; //trigger参数
}

enum CsEffectTriggerType
{
	CS_EFFECT_TRIGGER_SPELL = 0; //技能触发效果
	CS_EFFECT_TRIGGER_BUFF = 1; //BUFF触发效果
}

enum CSHurtType
{
	CS_HURT_HP = 0; //掉血
	CS_HURT_TYPE_MAX = 1; 
}

enum CsEffectType
{
	CS_EFFECT_TYPE_HURT = 1; //伤害
	CS_EFFECT_TYPE_BEATBACK = 2; //击退
	CS_EFFECT_TYPE_HEAL = 3; //治疗
	CS_EFFECT_TYPE_TRIGGER_PROJECTILE = 4; //释放飞行道具
	CS_EFFECT_TYPE_SUMMON = 5; //召唤
	CS_EFFECT_TYPE_RECOVER_MP = 6; //恢复魔法
	CS_EFFECT_TYPE_DISPLAY = 7; //需要显示效果或者音效
}

message CSEffectHurt
{
	required CSHurtType hurt_type = 1; //
	required int32 value = 2; //数值
	optional bool die = 3[default=false]; //是否死亡
	optional int32 absorb_value = 4[default=0];//被盾吸收的数值
	optional bool miss = 5[default=false]; //是否Miss
	optional bool crit = 6[default=false]; //是否暴击
	optional int32 combos = 7; //当前连击数
}

message CSPoint
{
	required int32 x = 1; // X轴
	required int32 y = 2; // Y轴
}
  
message CSEffectBeatBack
{
	required CSPoint pos = 1; //击退至
	required int32 height = 2; //高度
	required int32 time = 3; //击退时间
}

message CSEffectHeal
{
	required int32 value = 1; //治疗的数值
	optional bool vampire = 2[default=false]; //是否是吸血的
}

message CSEffectRecoverMp
{
	required int32 value = 1; //数值
}

message CSEffectTriggerProjectile
{
	required int32 projectile_id = 1; //飞行道具ID, 资源ID
	required int32 emmiter_id = 2; //发射器ID
	optional int32 server_projectile_seq = 3; //服务器产生的seq
}

message CSEffectSummon
{
	required int32 desc_id = 1; //怪物ID
	required int32 num = 2; //数量
	required int32 delay_msec = 3; //延迟时间
}

message CSEffectDisplay
{
}

//optional取决于Proto_CSEffectNtf.trigger_type字段
message CSOneEffect
{
	required int32 obj_id = 1;//受击对象ID
	optional CSEffectHurt hurt = 2; //CS_EFFECT_TYPE_HURT
	optional CSEffectBeatBack beat_back = 3;//CS_EFFECT_TYPE_BEATBACK
	optional CSEffectHeal heal = 4;//CS_EFFECT_TYPE_HEAL
	optional CSEffectTriggerProjectile trigger_projectile = 5;//CS_EFFECT_TYPE_TRIGGER_PROJECTILE
	optional CSEffectSummon summon = 6; //CS_EFFECT_TYPE_SUMMON
	optional CSEffectRecoverMp recover_mp = 7; //CS_EFFECT_TYPE_RECOVER_MP
	optional CSEffectDisplay display = 8; //CS_EFFECT_TYPE_DISPLAY
}

message Proto_CSEffectNtf
{
	required int32 caster_id = 1; //攻击者对象ID
	required CsEffectTriggerType trigger_type = 2; //
	required int32 trigger_id = 3;//spell or buff的描述ID(配表)
	optional int32 buff_effect_index = 9; //buff 效果的index,从0开始
	optional int32 buff_owner_id = 10; //所有者ID
	optional int32 unique_id = 4; //客户端使用
	optional int32 seq = 5; //技能序列编号
	optional int32 hit_seq = 6; //命中序列
	optional int32 hit_phase = 7;//技能命中阶段
	repeated CSOneEffect effects = 8; //效果,最大数量参考CS_MAX_EFFECT
}

//总伤害
message Proto_CSCombosTotalHurtNtf
{
	required int32 value = 1;//总伤害
}

//通知护盾刷新
message Proto_CSAbsorbDmgNtf
{
	required int32 obj_id = 1;
	required int64 absorb_total = 2; //护盾总值
	required int64 absorb_left = 3; //护盾剩余值
}

message Proto_CSLoadingStatusData
{
	required uint64 role_id				   	= 1;
	required int32	loading_process			= 2;
    optional int32  map_desc_id             = 3;
}

message Proto_CSLoadingStatusReq
{
	required Proto_CSLoadingStatusData	status_rpt	= 1;
}

message Proto_CSLoadingStatusNtf
{
	required  Proto_CSLoadingStatusData infoList	= 1;
}

message Proto_CSFinishLoadingReq
{
	required int32 battle_id = 1; //战场ID
	required uint64 role_id	= 2; //角色ID
}

message Proto_CSFinishLoadingNtf
{
	required int32 battle_id = 1; //战场ID
	required uint64 role_id	= 2; //角色ID
}

message BattleSituationOne
{
	required uint64 role_id		=	1;		//玩家ID
	required bool	is_dead		=	2;		//是否死亡
	required int32	surplus_hp	=	3;		//剩余血量
	required enCampType	camp	=	4;		//玩家所属阵营
}

message Proto_CSBattleSituationReq			//战斗中单个玩家的当前情况
{
	required	BattleSituationOne	data	=	1;
}

message Proto_CSBatlleSituationNtf		//战斗中所有玩家的当前情况
{
	required	BattleSituationOne	data	=	1;
}

message Proto_CSBattleRltReq		//战斗结束结果申请
{
	required uint64 role_id		=	1;		//玩家ID
}

message Proto_CSBattleActorDropReq
{
	required int32  drop_id = 1;		//摔落者的ID
}

message Proto_CSBattleRotateReq
{
	required int32 id = 1;
	required Proto_Vector3 pos = 2;
	required float time = 3;
}

message Proto_CSActorPosReq
{
	required int32 id = 1;
	required Proto_Vector3 pos = 2;
	required int32 dir = 3;
    optional int32 LinkeId = 4; //平台id
	optional bool dead = 5;//死亡后同步
	optional int32 move_seq = 6;//移动序列号, 0-65535循环(uint16)
}

message Proto_CSActorSetPosReq
{
	required int32 id = 1;
	required Proto_Vector3 pos = 2;
	required int32 platform_id = 3;
	optional int32 move_seq = 4;//移动序列号, 0-65535循环(uint16)
}

message Proto_CSActorSetPosRsq
{
	required int32 id = 1;
	required Proto_Vector3 pos = 2;
	required int32 platform_id = 3;
	optional int32 move_seq = 4;//移动序列号
}

message PlatformEvent
{
	required int32 type = 1;
	required uint64 start_time = 2;
	required int32 param1 = 3;
	required int32 param2 = 4;
	required int32 param3 = 5;
	required int32 param4 = 6;
}

message Proto_CSPlatformPosRsq
{
	required int32 platform_id = 1;
	required Proto_Vector3 pos = 2;
	optional Proto_Vector3 next_pos = 3;
	 repeated PlatformEvent event_list = 4; //触发的事件    
}

message Proto_CSActorPlatformReq
{
	required int32 id = 1;	//自身ID
	required int32 platform_id = 2;  //所在平台ID
	optional Proto_Vector3 pos = 3;	//相对平台的坐标偏移,platform_id=0则就是实际坐标了
	optional Proto_Vector3 dir = 4;	
}

enum enMoveTargetType
{
    EN_MOVE_TARGET_TYPE_DEFAULT = 1;
	EN_MOVE_TARGET_TYPE_WALK    = 2;
	EN_MOVE_TARGET_TYPE_RUN     = 3;
	EN_MOVE_TARGET_TYPE_STOP    = 4;
}

message Proto_CSActorMoveTargetPos
{
	required int32            id               = 1;
	required float            distance         = 2;  //离最终目标点的距离，为0表示move到最终目标点
	repeated Proto_Vector3    target_pos       = 3;
	optional int32 	          platform_id      = 4;
	optional bool             immediately      = 5;  //是否立即到达, AI专用，直接拉过去
	optional int32 	          round_back_rate  = 6;  //绕后概率
	optional float 	          z__mid_rand_dst  = 7;
    optional enMoveTargetType type             = 8 [default = EN_MOVE_TARGET_TYPE_DEFAULT]; //移动类型
	repeated int32            param            = 9;  //参数
	optional float            distance_extra   = 10; //扩展距离
    optional int32            target_obj_id    = 11;
    optional float            distance_z       = 12;
    optional float            distance_z_extra = 13;
    optional int32            move_id          = 14;
}

message Proto_CSActorMoveRandom
{
	required int32         id          = 1;
	required Proto_Vector3 center      = 2;
	required float         range       = 3;
	optional int32 	       platform_id = 4;
	optional bool          immediately = 5; //是否立即到达, AI专用，直接拉过去
    optional int32         move_id     = 6;
}

message Proto_CSActorMoveResultReq
{
	required int32 id = 1;
	required int32 result = 2;
	optional Proto_Vector3 target_pos = 3;		//
}

message Proto_CSBattleRotateRsq
{
	required int32 id = 1;
	required Proto_Vector3 pos = 2;
	required float time = 3;
}

message Proto_CSBattleRltNtf		//战斗结束结果广播
{
	repeated Proto_CSBatlleSituationNtf red_role_list	=	1;	//红队情况
	repeated Proto_CSBatlleSituationNtf blue_role_list	=	2;	//蓝队情况
	repeated Proto_CSBatlleSituationNtf green_role_list	=	3;	//绿队情况
}

//Buff信息
message ActorBuffInfo
{
	required int32 buff_desc_id = 1; //buff资源ID
	required int32 buff_id = 2; //buff
	required int32 caster_id = 3; //释放者ID
	required int32 left_time = 4; //剩余时间,毫秒(0.001秒)
	optional int32 stack = 5; //lay num,buff层数
}

message ActorBuffList
{
	repeated ActorBuffInfo buff_list = 1; //buff列表
	repeated OneBuffTriggerPara trigger_para_list = 2; //触发参数
}

message ActorAttrList
{
	repeated CSAttr attr_list = 1;//属性列表
}

//进入视野原因
enum EnterViewReason
{
	ENTER_VIEW_ALL     = 0; //全量包,在重新进入战斗时发送
	ENTER_VIEW_CREATE  = 1; //创建
	ENTER_VIEW_REVIVAL = 2; //复活
	ENTER_VIEW_VISION  = 3; //视野拉取
	ENTER_VIEW_SELF    = 4; //enter时发送,只包含自己英雄数据
	ENTER_VIEW_RESET   = 5; //重置
	ENTER_VIEW_SHOW    = 6; //显示
	ENTER_VIEW_NOTIFY  = 7; //通知一些开关数据之类的(不放松actor本身内容)
}

enum ProgressEvent 
{
	PROGRESS_START = 1; //
	PROGRESS_CANCLE = 2; //
	PROGRESS_FINISH = 3; //
}
message ProgressInfo 
{
	required int32 id = 1;
	required int32 obj_id = 2; // 目标对象id
	optional int32 left_time = 3; 
	optional int32 owner = 4; // 进度条拥有者id
	optional int32 trigger = 5; // 触发器的实例id 
}

message Proto_CSProgress
{
	required ProgressInfo progress = 1;
	required ProgressEvent progress_event   = 2;
}

message Proto_CSTransMapNtf
{
	required uint64       battle_id          = 1;
	optional int32        map_desc_id        = 2;
	optional int32 		  level_link_desc_id = 3; 
	optional uint32       state              = 4;
}

message SkillFixInfo
{
    optional enSkillFixType eType = 1 [default=EN_SKILL_FIX_TYPE_HURT];
    optional int64          value = 2;
}

message SkillExtraInfo
{
//	optional int32  replacement_skill = 1 [default=0]; //替换到的新技能
	optional int32  cd_rdu            = 2 [default=0]; //cd减少的数值,ms
	optional float  dmg_factor        = 3 [default=0]; //伤害系数，用于伤害加强
	repeated string feature_switch    = 4 [(yd_fieldoptions.field_arysize)=6, (yd_fieldoptions.field_bufsize)=128, (yd_fieldoptions.field_string_len)=128]; //技能特性开关
	optional float  sp_cost_amplify   = 5 [default=0]; //技能SP消耗修正值，最多 -0.4。
    repeated SkillFixInfo fix_list    = 6 [(yd_fieldoptions.field_arysize)=6];
}

message SkillChargeInfo
{
	optional int32 charge_value = 1; //技能充能值
	optional int32 charge_left_time = 2; //技能下次充能剩余时间,-1表示不会充能
	optional int32 charge_max_value = 3;//技能充能最大值
}

message SkillFeature
{
	required enSkillFeature feature = 1;//属性
	required float value = 2; //值
}

message BattleSkillInfo
{
	required int32 skill_id = 1;
	required int32 cd_left_time = 2; //ms
	optional SkillExtraInfo extra_info = 3; //技能额外信息,CD减少伤害加强等等
	optional SkillChargeInfo charge_info = 4; //充能信息
	required int32 skill_level = 5; //技能等级
	repeated SkillFeature feature_list = 6; //技能特性
	optional int32 pre_cd_left_time = 7; //ms, 0表示不在倒计时中
	optional int32 transfer_id = 8;  //技能转职id，转职体验用到
}

//当技能额外特性改变时的通知
message Proto_CSSkillExtraInfoNtf
{
	required int32 obj_id = 1; //ObjID
	required int32 skill_id = 2;//技能描述ID
	required SkillExtraInfo extra_info = 3;//技能额外信息,CD减少伤害加强等等
}

message Proto_CSSkillChargeInfoNtf
{
	required int32 obj_id = 1; //ObjID
	required int32 skill_id = 2;//技能描述ID
	required SkillChargeInfo charge_info = 3; //充能信息
}

message Proto_CSSkillInfoNtf
{
	required int32 obj_id = 1; //对象ID,唯一
	repeated BattleSkillInfo skill_info_list = 2; //有则刷新，添加
}

message Proto_CSSkillReplacementNtf
{
	required int32 obj_id = 1; //对象ID,唯一
	required int32 from_skill_id = 2; //旧技能ID
	required BattleSkillInfo skill_info = 3;//替换到的技能信息
}

message Proto_CSSkillFeatureChangeNtf
{
	required int32 obj_id = 1; //ObjID
	required int32 skill_id = 2;//技能描述ID
	repeated SkillFeature feature_list = 3; //技能特性变化，只同步了变化的部分，不会全量更新
}

message BattlePlayerHero
{
	required string          name                 = 1;  //名字
	required uint64          role_id              = 2;  //角色ID
	required int32           obj_id               = 3;  //对象ID,唯一
	optional bool            active               = 4;  //是不是出战的
	required int32           desc_id              = 5;  //资源ID,英雄的ID
	required enCampType      camp                 = 6;  //阵营ID
	optional ActorAttrList   attr_list            = 7;  //属性
	optional ActorBuffList   buff_list            = 8;  //buff列表
	//技能信息	
	optional int32           debut_skill          = 9;  //入场技能id
	optional int32           skin_desc_id         = 11; //皮肤
	optional ProgressInfo    progress             = 12; //进度条
	repeated BattleSkillInfo skill_info_list      = 13; //
	optional int32           hero_team_id         = 14; //英雄有效, 表示英雄的组编号，取得是英雄们的battleplayer的globalid	
	optional int32           level                = 15; //等级
	optional bool            is_team_leader       = 16; //是否是队长
	optional bool            auto_fight_status    = 17; //是否自动战斗
	optional int32 			 title_id		      = 18; //称号id（0为不显示）
	repeated int32           fashion_id           = 19; //皮肤
	optional string 		 title_name 	      = 20[(yd_fieldoptions.field_bufsize)=64,(yd_fieldoptions.field_string_len)=64]; //称号名
	optional uint64 		 guild_id		      = 21; //公会id
	optional bool            in_battle            = 22; //是否在战斗中
	optional int32           team_member_num      = 23; //队伍人数
	optional int32           is_team_follow       = 24; //是否组队跟随
    optional int32           equip_strength_level = 25; //附念最低等级
	optional bool            state_leave          = 26; //离开状态
    optional int32           title2_id            = 27; // 猎人考核 称号ID (0为无称号)
	optional RoleTransExpData	 trans_exp_data	  = 29; //传功数据
	optional int32           transfer_id          = 30; //转职ID
	optional int32           follow_partner_id    = 31; //跟随伙伴
    optional int32           title_item_id        = 32; //称号物品
	optional bool            follow_partner_fatigue = 33;  //跟随伙伴是否疲劳
}

message Proto_CSRevivalCDNtf
{
	required int32 actor_id	= 1; //复活英雄ID
	required int32 cd       = 2; //复活时间 (还有N秒复活)
}

message BattleActorAction
{
	required string action_stand2 = 1 [(yd_fieldoptions.field_bufsize) = 32];
	required string action_run2   = 2 [(yd_fieldoptions.field_bufsize) = 32];
	required string action_dead2  = 3 [(yd_fieldoptions.field_bufsize) = 32];
}

message BattleActor
{
	required int32             obj_id           = 1;  //对象ID
	required uint64            owner_role_id    = 2;  //所属玩家的playID， =0表示无从属（默认)
	required int32             desc_id          = 3;  //对象ID
	required enCampType        camp             = 4;  //阵营ID
	required float             rotationY        = 5;  //旋转角度
	optional ActorAttrList     attr_list        = 6;  //属性
	optional ActorBuffList     buff_list        = 7;  //buff列表
	optional int32             name_in_editor   = 8;  //怪物实例在编辑器里的标识
	optional int32             begin_hit        = 9;  //开场无敌
	optional BattleActorAction replace_actions  = 10; //需要替换的动作
	repeated BattleSkillInfo   skill_info_list  = 11; //技能列表
    optional int32             copy_desc_id     = 12; //复制的对象配置表id
    
}

enum enBattlePartnerStatus
{
	EN_BATTLE_PARTNER_STATUE_FIGHT   = 1;
	EN_BATTLE_PARTNER_STATUE_SUPPORT = 2;
}

message BattlePartner
{
	required int32                 obj_id                = 1;  //对象ID,唯一
	required bool                  active                = 2;  //是不是出战的
	required int32                 desc_id               = 3;  //资源ID,伙伴的ID
	optional int32                 partner_desc_id       = 4;  //伙伴desc表id
	optional uint64                owner_role_id         = 5;  //拥有者角色ID
	required enCampType            camp                  = 6;  //阵营ID
	required enBattlePartnerStatus partner_status        = 7;  //伙伴战斗状态
	optional ActorAttrList         attr_list             = 8;  //属性
	optional ActorBuffList         buff_list             = 9;  //buff列表
	repeated BattleSkillInfo       skill_info_list       = 10; //技能列表
	optional string                name                  = 11; //名字
	optional int32                 hero_team_id          = 12; //队伍id前端用(其实就是battle player的global id)
	optional int32                 skin_id               = 13; //时装id(0表示默认)
	optional bool                  auto_fight_status     = 14; //是否自动战斗
}

enum enBattleStrongholdStatus
{
	EBSS_NONE       = 0; //无状态
	EBSS_OCCUPIED   = 1; //被占领
	EBSS_SUPPRESSED = 2; //被压制
	EBSS_COMPETING  = 3; //争夺
}

message BattleStrongholdExt
{
	required int32                    stronghold_id      = 1;  //据点编号
	required enCampType               camp               = 2;  //阵营ID
	required enBattleStrongholdStatus status             = 3;  //被压制
	required int32                    blue_forces_value  = 4;  //红方势力值
	required int32                    red_forces_value   = 5;  //蓝方势力值
	required int32                    max_forces_value   = 6;  //最大势力值
	required int32                    exists_forces      = 7;  // EEF_ONLY_BLUE = 1; // 只有蓝方 EEF_ONLY_RED = 2; // 只有红方 EEF_ALL = 3; //无压制
	optional bool                     occupable          = 8;  //是否可占领
	optional Proto_Vector3            position           = 9;  //只有在EnterView的时候才赋值，表示据点的势力值增长的中心点
	optional int32                    next_spawn_sec     = 10; //该据点下一波守卫刷新时间（秒）(刷新信息登陆时必对时一次，之后待定)
	optional int32                    spawn_interval_sec = 11; //该据点守卫刷新间隔
}

message BattleMechExt
{
	required int32          mech_id     = 1; //机甲id
	required enCampType     camp        = 2; //阵营ID
	required enMechStatus   status      = 3; //状态
	required int32          energy      = 4; //能量值	
	required int32          max_energy  = 5;
	required string		    action_mode = 6;
}

message BattleChargedExt
{
	required int32 charged_id = 1; 
	required enChargedStatus status = 2; //水晶状态
}

message Proto_CSBattleStrongholdNtf
{
	required int32 obj_id = 1; //对象ID
	required BattleStrongholdExt ext_info = 2;//信息数据
}

message ChargedData
{
	required enChargedStatus status = 1; //水晶状态
	required int32 hit_actor_id = 2;	//改变状态的攻击者
}
message MechData
{
	required enMechStatus status = 1; //状态
	required int32			energy = 2;  //能量值
}

message PlatformArea
{
	required string name = 1 [(yd_fieldoptions.field_bufsize)=32];
	required int32 speed = 2;
	required Proto_Vector3 pos =3;
	optional Proto_Vector3 next_pos = 4;
	repeated PlatformEvent event_list = 5; //触发的事件
}



message SceneDropObj
{
	required int32 id = 1;
	required int32 desc_id = 2;
	required Proto_Vector3 pos =3;
	optional int32 platform_id = 4;
	optional int32 create_time = 5;
}

message Proto_CSBattleNpcNtf
{
	required 	int32 id 				= 1;	
	optional	ChargedData charge 	= 2;
	optional MechData		mech 		= 3;
	optional BattleActorAction	action = 4;
}

message Proto_CSBattleNpcAttackNtf
{
	required int32 id 						= 1;
	required int32 target_id 				= 2;
	required int32 skill_id 				= 3;	
	required Proto_Vector3 target_pos 	= 4;	//目标位置点，有些技能不用选目标
	required int32 dir						= 5;  //-1代表左，1代表右边， 0代表目标方向，2代表目标反方向
}

message BattleSceneTrigger
{
	required int32 desc_id = 1; //触发器资源ID
	required int32 trigger_id = 2; //触发器对象ID
	optional int32 progress_duration = 3; //读条持续时间,可选参数
	required int32 create_time = 4; //创建时间
	optional int32 unique_id = 5;//触发器实例在编辑器里唯一的标识
}

message SceneTriggerList
{
	repeated BattleSceneTrigger triggers = 1; //
}

message BattleBall
{
	required int32 desc_id = 1; //场景物件资源ID
	required uint64 time_to_die = 2; //未来死亡时间，玩家掉落下来的有倒计时
}

message BattleRecycleBin
{
	required int32 desc_id = 1; //场景物件资源ID
	required enCampType camp = 2; //阵营ID
	//required enCampType trend_camp = 3; //中立时才有的，趋向阵营。15秒后会变成此阵营
	optional uint64 trend_start_time = 4; //趋向开始的时间
	optional int32  name_in_editor   = 5;  //怪物实例在编辑器里的标识
}


message Npc
{
	required int32 obj_id = 1;     //对象id
	required int32 npc_id = 2;     //npc id  
	optional enGuildCampType camp   = 3 [default = EN_GUILD_CAMP_TYPE_NONE]; //阵营
}


message CitySimplePlayer
{
	required string          name                 = 1;  //名字
	required uint64          role_id              = 2;  //角色ID
	required int32           obj_id               = 3;  //对象ID,唯一
	optional bool            is_team_leader       = 4;  //是否是队长
	optional bool            is_in_battle         = 5;  
	optional uint64          guild_id             = 6;   
}

//记录一些开关数据
message CSViewCommonInfo
{
    optional bool through_airwall = 1; //是否可穿墙
	optional bool use_hate        = 2; //是否使用仇恨字段
	optional bool in_hate         = 3; //是否在仇恨列表
}

message CSViewOne
{
	required int32               id               = 1;  //id
	optional ActorObjType        obj_type         = 2  [default=EN_ACT_TYPE_NONE]; //类型:英雄,怪物,or...
	optional Proto_Vector3       position         = 3;  //位置
	optional int32               direction        = 4;  //朝向
	optional CSState             state            = 5;  //状态
	optional uint64              mainid           = 6;
	optional BattlePlayerHero    hero             = 7;  //英雄
	optional BattleActor         actor            = 8;  //通用actor
	optional BattleStrongholdExt strong_hold      = 9;  //strong_hold类型的扩展字段
	optional BattleMechExt       mech             = 10; //mech类型的扩展字段
	optional BattleChargedExt    charged          = 11; //charged类型
	optional int32               platform_id      = 12; //所在移动平台ID	
	optional PlatformArea        platform         = 13; //移动平台信息
	optional BattleBall          ball             = 14; //球
	optional BattleRecycleBin    reclycle_bin     = 15; //回收点
	optional SceneTriggerList    trigger_list     = 16; //身上带的trigger_list
	optional bool                disappear        = 17; //消失
	optional bool                fix_ground       = 18 [default=false]; //出生在地面
	optional SceneDropObj        scene_drop_obj   = 19;
	optional enComputerAILevel   ai_level         = 20 [default=EN_AI_LEVEL_NULL]; //AI状态
	optional int32               move_seq         = 21; //移动序列号
	optional Npc                 npc              = 22; //NPC
	optional BattlePartner       partner          = 23; //伙伴
	optional ActorAttrList 		 base_attr_list   = 24; //基础属性列表
	optional bool                is_fight         = 25; //是否出战
	optional uint32              seed             = 26; //随机种子
	optional CitySimplePlayer    simple_player    = 27; //玩家简要数据
	optional CSViewCommonInfo    common_info      = 28; //是否可穿墙
    optional int32               entrance_mode    = 30; //出场方式
    optional string              action_label     = 31;
    optional Proto_Vector3       original_pos     = 32;
    optional bool                entrance_finish  = 33;
    optional int32               action           = 34;
    optional int32               start_frame      = 35;
    optional bool                is_abyss         = 36;
    optional Proto_Vector3		 angle			  = 37; //旋转角度
}

message Proto_CSEnterViewNtf
{
	required EnterViewReason reason = 1; //1 创建 2 复活  3 视野拉取
	repeated CSViewOne view_list = 2; //对象列表
	optional int32 map_id = 3; //地图id
}

//离开视野原因
enum LeaveViewReason
{
	LEAVE_VIEW_NONE = 0; //未知
	LEAVE_VIEW_DISAPPEAR = 1; //消失
	LEAVE_VIEW_OUT = 2; //视野拉取
	LEAVE_VIEW_SYS_KILL	= 3;  //系统杀死（掉落也算）  主要目的是为了前台区分要不要播动画
	LEAVE_VIEW_KILL		= 4; 	//正常被别人干死
	LEAVE_VIEW_SYS_KILL_NO_ACT = 5; //系统杀死但不播死亡动作
	LEVEL_VIEW_HIDE = 6; //隐藏
}

message Proto_CSLeaveViewNtf
{
	required LeaveViewReason reason = 1; //原因
	repeated int32 view_list = 2; //对象Obj_id列表
}

message Proto_CSBattlePlayerRemoveNtf
{
	repeated int32 battle_player_list = 1; //与E_CS_BATTLE_STATISTICS_NTF消息包里的battle_player_id对应
}

//用于区域及交互触发 
message Proto_CSBattleSceneTriggerReq
{
	required int32 trigger_id   = 1;
	required int32 operator_id  = 2; //操作者ID
	required int32 obj_id       = 3; //操作对象ID
	optional int32 area_id      = 5; //区域ID
	required Proto_Vector3 position = 6;//触发者位置信息
}

enum SceneTriggerOP
{
	SceneTrigger_OP_ADD = 1; // 添加SceneTrigger
	SceneTrigger_OP_DEL = 2; //移除SceneTrigger
}

//对象SceneTrigger操作通知
message Proto_CSObjectSceneTriggerOPNtf
{
	required int32 target_id = 1; //拥有者id
	required SceneTriggerOP op = 2; //操作类型
	required BattleSceneTrigger scene_trigger = 3; //scene_trigger信息
}

message Proto_CSBattleObjCampNtf
{
	required int32 id = 1;
	required enCampType camp = 2; //阵营ID
	optional int64 start_time = 3; // 开始时间
}

message Proto_CSBattleSwitchActiveNtf
{
	required uint64 	roleid = 1;
	required int32 		fromobj_id = 2;				//当前ID
	required int32 		toobj_id = 3;   //想控制对象的ID
	optional CSViewOne	toobj = 4; //想控制对象, 这会是一个新复制的对象
	optional bool			kill_fromobj  =5; // 是否要杀死原单位
}

enum MainIDModifyReason
{
	MAINID_OFFLINE 	= 1; //掉线
	MAINID_NETWORK 	= 2; //网络因素
	MAINID_CAMP		= 3; //阵营因素
}

message CSAcotrMainID
{
	required int32 id = 1; //actor id
	required uint64 mainid = 2; //actor 主机ID.
	optional uint32 seed = 3;
}

message Proto_CSMainIDNtf
{
	optional MainIDModifyReason reason = 1;	//主机变更原因
	repeated CSAcotrMainID mainid_list = 2; //main_id 信息列表
}

message CSActorAI
{
	required int32 id = 1; //actor id
	required ActorObjType obj_type = 2; //类型:英雄,怪物,or...
	required enComputerAILevel ai_level = 3; //AI状态
}

message Proto_CSActorAINtf
{
	repeated CSActorAI ai_list = 2; //ai 信息列表
}

message Proto_CSBattleStatisticsNtf
{
	required int32 battle_id = 1; //战斗ID
	optional BattleStatisticsInfo info = 2; //战场相关逻辑的信息
	repeated BattleStatisticElement element_list = 3; //报告列表
}

//pvp命令包
enum Proto_FightCmd
{
	CMD_FIGHT_ACTION = 1;
	CMD_FIGHT_HIT = 2;
	CMD_FIGHT_COMBO = 3;
	CMD_FIGHT_SWITCH_MEMBER = 4;
	CMD_FIGHT_PROJECTILE = 5;
	CMD_FIGHT_PARTNER_USE_SUPPORT_SKILL = 6;
}

//战斗包
message Proto_FightPkg
{
	required Proto_FightCmd cmd = 1; //命令号
	required int32 obj_id = 2; //发起者ID
	optional Proto_PvpSynAction action = 3;//CMD_FIGHT_ACTION
	optional Proto_PvpSynHit hit = 4; //CMD_FIGHT_HIT
	optional Proto_PvpSynCombo combo = 5; //CMD_FIGHT_COMBO
	optional Proto_PvpSynSwitchMember switch_member = 6; //CMD_FIGHT_SWITCH_MEMBER
	optional Proto_PvpSynProjectile projectile = 8;//CMD_FIGHT_PROJECTILE
	optional Proto_PvpSynPartnerUseSupportSkill supportSkill = 9;// CMD_FIGHT_PARTNER_USE_SUPPORT_SKILL
	optional uint64 timeStamp = 7; //时间戳
}


message CSCheatOne
{
	required uint64 cheat_role_id = 1;   //作弊者
	required ECheatType type = 2;     //作弊类型
	optional uint32 action_seq = 3;   //action序列号
	optional uint32 action = 4;       //动作
	optional NoHitCheatData no_hit = 5;   //作弊数据-该命中未命中
}

//战斗作弊举报
message Proto_CSCheatReportReq
{
	required uint64 battle_id = 1;        //作弊战斗id
	repeated CSCheatOne cheat_one = 2;   //作弊信息
}



message Proto_CSCheatPunishNtf
{
	optional CheatPunishType type = 1;   //类型
}

message Proto_CSStateNtf
{
	required int32 id = 1; //obj_id
	required CSState state = 2; //状态
}

enum enActionStateType
{
	E_Action_State_Standing = 1; //站立
	E_Action_State_InAir = 2; //空中
	E_Action_State_Lying = 3; //倒地
}

message Proto_CSActionStateSyncReq
{
	required int32 obj_id = 1;
	required enActionStateType action_state = 2;
	optional bool get_up = 3; //是否处于起身保护状态
}

message Proto_CSMoneyNtf
{
	required uint32 coin = 1;			//金币数量
	required uint32 diamond = 2;		//钻石数量
}

message Proto_CSEquipDressMsg
{
	required int32 hero_id			= 1;	//英雄ID
	required int32 op_type			= 2;	//装备操作类型 穿戴-1，卸载-2
	required int32 equip_index		= 3;	//装备部位索引
	required uint64 equip_id		= 4;	//装备ID
	optional bool inherit           = 5;    //是否继承
}

message Proto_CSEquipMsg
{
	optional uint64 equip_id        = 1;
	optional uint32 desc_id         = 2; //equip desc id
    
    optional bool   use_diamond     = 6; // 使用钻石(代币)

    optional int32  strength_level      = 10; // 当前强化等级
    optional bool   protect             = 11; // 强化保护
    optional uint32 strength_ticket_id  = 12; // 使用强化券

    optional int32  op_result           = 20; // 强化结果错误码 // 0为成功,其他读取错误码
    //optional uint64 inherit_equip_id  = 5; // 被继承装备uuid
    //optional uint32 inherit_equip_desc_id  = 6; // 被继承装备desc id
    //optional int32  inherit_type    = 7; // 继承类型：1 词缀 2 强化 4 buff ( 多种继承为按位与的关系 )
    
    //repeated int32 affix_locked_index    = 10; //
    //optional int32 affix_matrial_desc_id = 11; // 培养,专精消耗材料配置id
    //optional int32 select_matrial_index  = 12;

    //optional int32 buff_matrial_desc_id = 20; // 特技 消耗材料配置id 
}

// 请求附魔
message Proto_CSEquipMagicCardReq
{
	optional uint64 equip_id        = 1;	// 装备唯一id
	optional int32 item_id			= 2;
}

// 操作成功才返回
message Proto_SCEquipMagicCardRsp
{
}

// 请求合成附魔卡
message Proto_CSEquipMagicCardComposeReq
{
	repeated int32 item_id			= 1;
	repeated int32 grid_id			= 2;
    repeated int32 page             = 3;
}

message Proto_SCEquipMagicCardComposeRsp
{
	optional int32 add_item			= 2;
}

message Proto_CSItemDecomposReq 
{
    required uint32 item_id = 1;
    optional int32  item_quality = 2;
    repeated uint64 item_uuid = 3;
    required uint32 num = 4;
    required int32  grid    = 5;
    required int32  page = 6;
}

message Proto_CSEquipStrengthMsg
{
	required uint64 equip_uuid = 1;
	required int32  level = 2;

	optional int32 strengthen_percent = 3; //强化结果
}

enum enWeatherType
{
	EN_WEATHERTYPE_NULL		= -1;
	EN_WEATHERTYPE_WIND 	= 0;
	EN_WEATHERTYPE_FOG 		= 1;

	EN_WEATHERTYPE_MAX 		= 10;
}

message Proto_CSStateSlotOpenRsp
{
	required uint64 hero_id			= 1;	//英雄ID
	required uint32 stateslot_index		= 2;	//要开启的卡槽索引
	required int32	result_code		= 3;	//开启结果		-1：等级不够，-2：金币不够，-3:钻石不够，0：开启成功
}

message CSWeatherOne
{
	required int32			id = 1; 		//ID索引
	required enWeatherType weather_type = 2;  //天气类型
	required bool			valid	= 3;  //是否有效, true开启，false关闭
}

message Proto_CSWeatherNtf
{
	repeated CSWeatherOne weather_list = 1[(yd_fieldoptions.field_arysize)=16]; //天气信息列表
}

message Proto_CSSetHeroDebut
{
	required int32 hero_id     = 1;	//英雄ID
	required int32 skill_id    = 2; 	//ID索引
}

message Proto_CSAwardBase
{
	required int32 exp = 1;      // PlayerExp
	//required int32 hero_exp = 2; // HeroExp
	required int32 gold = 3;    // Gold
}

//message SoulBoxAwardGrid
//{
//	required int32 box_id = 1;
//	optional bool  opened = 2;
//	optional Proto_CSRoleItemNtf items = 3;
//}

//message Proto_CSHeroAward
//{
//	required int32 hero_id = 1;
//	required int32 hero_exp = 2;
//	required int32 hero_exp_added = 3;
//}

//message Proto_CSBattleAward 
//{
//	required int32  battle_id   = 1; //战斗id
//	required Proto_CSAwardBase  base   = 2;  // 基础奖励
//	optional Proto_CSAwardBase  friend_added  = 3;  // 基础奖励
//	optional Proto_CSAwardBase  vip_added  = 4;  // 基础奖励
//	optional Proto_CSAwardBase  mvp_added  = 5;  // 基础奖励
//	optional Proto_CSAwardBase  hero_added = 10;  // 英雄属性加成
//	repeated Item       item_list = 6[(yd_fieldoptions.field_arysize)=128]; //----delete-----
//	optional Proto_CSRoleItemNtf items = 7;
//	//repeated SoulBoxAwardGrid  soulboxs = 8;
//	repeated Proto_CSHeroAward hero_awards = 9[(yd_fieldoptions.field_arysize)=2];
//}

//message Proto_CSSelectSoulBox
//{
//	repeated int32 select_index_list = 1;
//}

message Proto_CSBuySkin 
{
	required int32 hero_id = 1; //
	required int32 skin_id = 2; // 配置表中的 id 列
	required MoneyType buy_way = 3; // NONE: 指定的id和数量 
}
message Proto_CSSetSkin
{
	required int32 hero_id = 1; //
	required int32 skin_desc_id = 2; // 配置表中的 id 列
}

message Proto_CSRTTSetClockReq
{
	required int32 seq = 1; //序列号
}

message Proto_CSRTTSetClockRsp
{
	required int32 seq = 1; //序列号
	required uint64 time_now = 2; //服务器时间:毫秒(ms)
}

message Proto_CSRTTAdjustNtf
{
	required int32 deviation = 1;//毫秒
	required uint64 time_now = 2; //服务器时间:毫秒(ms)
}

message Proto_CSBattleQuitNtf
{
}


enum enMallDataType
{
	EMDT_NULL = 0; //无效
	EMDT_HERO = 1; // 英雄
	EMDT_SKIN = 2; // 皮肤
	EMDT_ITEM = 3; // 道具
	EMDT_GIFT = 4; // 礼包
	
	EMDT_MAX	 = 10;
}

message MallDataExt
{
	required int32          id           		    = 1;
	required enMallDataType category                = 2;
	required int32          goods_id     		    = 3;
	optional string         goods_name   		    = 4[(yd_fieldoptions.field_bufsize) = 32];
	required int32          stack_num 	  		    = 5;
	required bool           new_arrival 			= 6;
	required bool           recommend   			= 7;
	required int32          discount 			    = 8;
	required string         discount_begin 	        = 9[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	required string         discount_end            = 10[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	required int32          itemprice_gold          = 11;
	required int32          itemprice_diamond       = 12;
	required string         schedule_begin          = 13[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	required string         schedule_end            = 14[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	required int32          limit_private           = 15;
	required int32          limit_privatePeriod  	= 16[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	required int32          limit_total     	    = 17;
	required int32          limit_totalperiod       = 18;
	required int32          sequence 	  		    = 19;
}

message PackDataExt
{
	required int32 id           		= 1;
	required string name   				= 2[(yd_fieldoptions.field_bufsize) = 32];
	required int32 discount 			= 3;
	repeated MallDataExt malldata		= 4;
}


message Proto_CSPackDataListNtf
{
	repeated PackDataExt pack_data = 1;
}

message Proto_CSQuestionReq
{
}
message Proto_CSQuestionRsp
{
	optional int32 examiner_id = 1;
	optional int32 question_id = 2;
	optional int32 question_round = 3; //答题进行到多少轮
	repeated int32 reward_id = 4; //领取奖励ID
	optional int32 help_count = 5; //求助次数
}
message Proto_CSAnswerReq
{
	optional int32 answer = 1; //选项1, 2, 3
}
message Proto_CSAnswerRsp
{
	optional bool ret = 1;
	optional bool is_end_question = 2;
	optional int32 award_exp = 3;
	optional int32 award_money = 4;
}

message Proto_CSHelpQuestionReq
{
	optional int32 examiner_id = 1;
	optional int32 question_id = 2;
}
message Proto_CSHelpQuestionRsp
{
	optional int32 help_question_count = 1;
}
message HelpQuestionNtf
{
	optional uint64 question_role_id = 1;
	optional string question_role_name = 2[(yd_fieldoptions.field_bufsize)=128, (yd_fieldoptions.field_string_len)=128];
	optional int32 examiner_id = 3;
	optional int32 question_id = 4;
}
message Proto_CSHelpQuestionAnswerReq
{
	optional uint64 question_role_id = 1;
	optional int32 examiner_id = 2;
	optional int32 question_id = 3;
	optional int32 answer = 4; //选项1, 2, 3
}
message HelpQuestionAnswerNtf
{
	optional uint64 question_role_id = 1;
	optional string question_role_name = 2[(yd_fieldoptions.field_bufsize)=128, (yd_fieldoptions.field_string_len)=128];
	optional uint64 answer_role_id = 3;
	optional string answer_role_name = 4[(yd_fieldoptions.field_bufsize)=128, (yd_fieldoptions.field_string_len)=128];
	optional int32 examiner_id = 5;
	optional int32 question_id = 6;
	optional int32 answer = 7; //选项1, 2, 3
}

message Proto_CSAwardQuestionRewardReq
{
}
message Proto_CSAwardQuestionRewardRsp
{
	optional Proto_CSRoleItemNtf item = 1;
}

message Proto_CSQuestionStartReq
{
}
message Proto_CSQuestionStartNtf
{
}
message Proto_CSRecvQuestionStartNtfReq
{
}

message Proto_CSQuestExpChain
{
	required QuestExpChain exp_chain = 1;
}
message Proto_CSDailogWithNpcReq
{
	required int32 npc_desc_id = 1;
	required int32 npc_global_id = 2;
}
message Proto_CSQECHelpMsg
{
	required uint64 role_id = 1;
	required int32  qec_index = 2;
	required int32  item_id  = 3;
	optional uint64 item_uuid = 4;
	optional int32 item_quality = 5;
}
message Proto_CSQECHelpNTF 
{
	required int32 qec_index = 1;
	required string helper_name = 2;
}
message Proto_CSQECFinishWithItemReq
{
	required int32 index = 1;
	required int32 item_id = 2;
	optional uint64 item_uuid = 3;
	optional int32 item_quality = 4;
}

//已废弃
message MilitantStartSysMsgPara
{
    optional enMilitantType type     = 1 [default=EN_MILITANT_TYPE_NONE];
	optional int32          need_num = 2;
	optional int32          has_num  = 3;
}
//已废弃
message MilitantRankSysMsgPara
{
    optional enMilitantType type      = 1 [default=EN_MILITANT_TYPE_NONE];
    repeated uint64         role_list = 2;

}
//已废弃
message MilitantRewardSysMsgPara
{
    optional enMilitantType type      = 1 [default=EN_MILITANT_TYPE_NONE];
	optional uint64         role_id   = 2;
	optional int32          item_id   = 3;
	optional int32          param     = 4;
	optional int32          drop_id   = 5;
}

message SysMsgEscapePara
{
	optional int32 obj_id = 1;
	optional string string_para = 2;
	optional int32 desc_id = 3;
	optional ItemGridCSData item_ntf_data = 4;
	optional uint64 guild_id = 5;
	optional uint64 team_id = 6; //队伍ID
	optional uint64 role_id = 7; //角色ID
	optional int32 team_lower_level = 8;//低等级
	optional int32 team_upper_level = 9;//高等级
	optional HelpQuestionNtf help_question_ntf = 10;
	optional HelpQuestionAnswerNtf help_question_answer_ntf = 11;
	optional MilitantStartSysMsgPara militant_start_sys_msg_para = 12;
	optional MilitantRankSysMsgPara militant_rank_sys_msg_para = 13;
	optional MilitantRewardSysMsgPara militant_reward_sys_msg_para = 14;
	repeated string array_para										= 15;	// 字符串数组
}

enum SysMsgShowType
{
	E_SysMsg_Show_Type_None = 0;
	E_SysMsg_Show_Type_A = 1;
	E_SysMsg_Show_Type_B = 2;
	E_SysMsg_Show_Type_C = 3;
	E_SysMsg_Show_Type_D = 4;
	E_SysMsg_Show_Type_E = 5;
}

message Proto_CSSysMsgNtf
{
	required int32 desc_id = 1;//消息的描述ID,如果是Gm命令发的desc_id为0
	repeated SysMsgEscapePara escape_paras = 2; //转义参数
	optional SysMsgShowType show_type = 3; //显示位置
	optional string content = 4; //显示内容
	optional int32 show_time = 5; //显示的持续时间，如果没有,则使用默认时间，单位为秒
	optional enProfessionType profession = 6 [default=EN_PROFESSION_NONE];		
}

message Proto_CSWatchBattleReq
{
	required uint64 battle_id = 1;
}

message Proto_CSBattleWantFightReq
{
	required int32 battle_id = 1;
	optional uint64 role_id = 2; //自己的RoleId
}

message Proto_CSBattleWantFightNtf
{
	required int32 battle_id = 1;
	required uint64 role_id = 2; //请战的roleId，废弃
	required int32 battle_player_id = 3; //战斗玩家ID
}

message Proto_CSBattleWillFightNtf
{
	required int32 battle_id = 1; //battle_id
	required int32 round_no = 2; //轮数
	repeated uint64 role_id = 3;//谁出场，废弃
	repeated int32 battle_player_id = 4; //战斗玩家ID
}

message Proto_CSWatchBattleRsp
{
	required uint64 battle_id = 1;
	required uint64 start_ts  = 2;
	required uint64 now_ts = 3;
	required int32  delay = 4;
}

message Proto_CSObserverLog
{
	required Proto_CS_CMD    cmd = 1;
	required uint64          timeoffset = 2;
	required bytes           log = 3; 
}

message ChatPlayerInfo
{
	required uint64 role_id 				= 1;
	required string role_name 				= 2; //名字
	optional enProfessionType profession 	= 3 [default=EN_PROFESSION_NONE]; // 职业
	optional int32  transfer_id             = 4; //转职ID
}


message CSChatMsg
{
	required ChatChannel channel = 1; //频道
	required uint32 chat_time = 2; //聊天时间
	optional ChatPlayerInfo player_info = 3; //玩家信息,发送时无需填写
	required CSChatContent chat_content = 4; //内容
    optional bool is_wq_answer   = 5;
    optional bool is_wq_answer_right   = 6; //世界答题是否正确
}

message Proto_CSChatSendReq
{
	required ChatChannel channel = 1; //频道
	required CSChatContent chat_content = 2; //内容
    optional bool is_wq_answer   = 5;
	optional bool is_check_safe	= 6;	// 是否检测安全信用分（true为需要检测）
}

message Proto_CSSecChatSendReq
{
	required ChatChannel channel = 1; //频道
	required string chat_content_text = 2; //内容
	optional bool is_group_chat	= 6;	// is group chat
    optional uint64  recv_role_id = 8;  // 接收者id 
}

message Proto_CSChatRecvNtf
{
	repeated CSChatMsg msg_list = 1; //内容列表
}

message Proto_CSJoinVoiceRoomReq
{
	required string room_name = 1;      //加入房间名字
	optional int32 voice_room_uid = 2;  //语音房间uid
}

message Proto_CSJoinVoiceRoomRsp
{
	required string room_name = 1;      //加入房间名字
	optional int32 voice_room_uid = 2;  //语音房间uid
}

message Proto_CSQuitVoiceRoomReq
{
	required string room_name = 1;    //加入房间名字
}

message Proto_CSQuitVoiceRoomRsp
{
	required string room_name = 1;    //加入房间名字
}

message Proto_CSChgVoiceStateReq
{
	required enTeamVoiceState state = 1 [default=E_Team_Voice_State_Off];    //语音状态
}

message Proto_CSChgVoiceStateRsp
{
	required enTeamVoiceState state = 1;    //语音状态
}


message Proto_CSBattleVoiceStateSetReq
{
	optional uint64 battle_id = 1;          //战斗id
	optional enTeamVoiceState state = 2 [default=E_Team_Voice_State_Off];    //语音状态
}

message Proto_CSBattleVoiceStateSetNtf
{
	optional uint64 battle_id = 1;             //战斗id
	optional RoomPlayerInfo player_info = 2;   //玩家信息
}


message Proto_CSSetObserver 
{
	required uint64  room_id = 1;
	optional uint64  role_id = 2;
	required bool    is_observer = 3;
}

message Proto_CSRuneActivatePlateReq
{
	required int32 plate_id	= 1;
}


message Proto_CSRuneActivatePlateRsp
{
	required int32 plate_id	= 1;
	required int32 result_code = 2;
}

enum enRuneOpType
{
	EN_RUNE_OP_TYPE_WEAR = 0;  //装上
	EN_RUNE_OP_TYPE_TAKE_OFF = 1;  //取下
	EN_RUNE_OP_TYPE_CHG_POS = 2;  //换位置
	EN_RUNE_OP_TYPE_CLEAR = 3;    //全部卸下
}

message Proto_CSRoleRuneOPReq
{
	required enRuneOpType op_type = 1 [default=EN_RUNE_OP_TYPE_WEAR];	//装上=0 取下=1 换位置=2
	required WearRune rune_info		= 2;    //念纹穿戴信息
}

message Proto_CSRoleRuneOPRsp
{
	required enRuneOpType op_type = 1[default=EN_RUNE_OP_TYPE_WEAR];	//装上=0 取下=1 换位置=2
	required RoleRuneData rune_data = 2; //念纹矩阵信息   
}


message Proto_CSRunePlateReq
{
	
}

message Proto_CSRunePlateRsp
{
	required RoleRuneData rune_data = 1; //念纹矩阵信息   
}


message Proto_CSRuneMakeReq
{
	
}

message Proto_CSRuneMakeRsp
{
	required int32 result_code = 1;
	optional Rune rune = 2;
}

message Proto_CSRuneMergeReq
{
	repeated uint64 rune_uid = 1[(yd_fieldoptions.field_arysize)=3];
	optional uint32 item_id = 2; 
}

message Proto_CSRuneMergeRsp
{
	required int32 result_code = 1;
	optional Proto_CSRoleItemNtf item = 2;
	repeated uint64 del_rune_uid = 3[(yd_fieldoptions.field_arysize)=3];
}


//----------------------------------------------------------------------------------------------------------
//------------交易 begin
//----------------------------------------------------------------------------------------------------------
//商城协议
message MallGoods
{
	required int32 id = 1; //商品id
	optional int64 utc_dct_begin = 7 [(yd_fieldoptions.field_cname) = "折扣开始utc时间"];
	optional int64 utc_dct_end = 8 [(yd_fieldoptions.field_cname) = "折扣结束utc时间"];
	optional int64 utc_sell_begin = 9 [(yd_fieldoptions.field_cname) = "上架utc时间"];
	optional int64 utc_sell_end = 10 [(yd_fieldoptions.field_cname) = "下架utc时间"];
	optional int32 week_left = 11 [(yd_fieldoptions.field_cname) = "本周剩余购买次数"];
	optional int32 day_left = 12 [(yd_fieldoptions.field_cname) = "今天剩余购买次数"];
	optional int32 need_diamond = 13 [(yd_fieldoptions.field_cname) = "需要钻石"];
	optional int32 cost_type = 14 [(yd_fieldoptions.field_cname) = "需要消耗类型"];
	optional int32 cost_value = 15 [(yd_fieldoptions.field_cname) = "需要消耗数量"];
	optional int32 discount = 16 [(yd_fieldoptions.field_cname) = "折扣百分比"];
	optional int32 itemid = 17 [(yd_fieldoptions.field_cname) = "物品id"];
	optional int32 week_limited = 18 [(yd_fieldoptions.field_cname) = "个人每周限购数量"];
	optional int32 day_limited = 19 [(yd_fieldoptions.field_cname) = "个人每天限购数量"];
	optional int32 buy_limited = 22 [(yd_fieldoptions.field_cname) = "个人总限购数量"];
	optional int32 total_left = 23  [(yd_fieldoptions.field_cname) = "个人总剩余数量"];
}


message Proto_CSMallListReq
{
	required int32 type = 1; //商城类型
}

message Proto_CSMallListRsp
{
	required int32 type = 1; //商城类型
	repeated MallGoods mall_goods = 2; //商城商品列表
}

message Proto_CSMallBuyReq
{
	required int32 id = 1;   //商品id
	optional int32 num = 2;  //购买数量
}

message Proto_CSMallBuyRsp
{
	required int32 type = 1; //商城类型
	required MallGoods mall_goods = 2;   //更新的商品
}

message Proto_CSMallItemReq
{
	required int32 item_id = 1;   //物品id
}

message Proto_CSMallItemRsp
{
	optional MallGoods goods = 1; //商品信息
}


//商会协议
message Proto_CSChamberListReq
{
	required int32 label   =  1;   //一级标签
	required int32 sub_label = 2;  //二级标签
}

message ChamberGoods
{
	required int32 item_id = 1; //物品id
	optional int32 price = 2;   //现单价
	optional int32 ratio = 3;   //基础价格百分比 (单位10000)
	optional int32 left_num = 11 [(yd_fieldoptions.field_cname) = "今天剩余购买次数"];
}

message Proto_CSChamberListRsp
{
	required int32 label   =  1;   //一级标签
	required int32 sub_label = 2;  //二级标签
	repeated ChamberGoods goods = 3;  //商品列表
}

message Proto_CSChamberBuyReq
{
	required int32 item_id = 1;     //物品id
	required int32 price = 2;       //物品单价,用于对比价格是否发生改变
	required int32 num = 3;         //数量
}

message Proto_CSChamberBuyRsp
{
	required int32 result = 1;        //结果，0表示成功，非0表示失败
	required ChamberGoods goods = 3;  //商品
}

message Proto_CSChamberSellListReq
{
	repeated int32 item_id = 1;   //请求counter
}

message Proto_CSChamberSellListRsp
{
	repeated ChamberGoods chamber_item = 1; //商品列表
}

message Proto_CSChamberSellReq
{
	required int32 item_id = 1;     //物品id
	required int32 price = 2;       //物品单价,用于对比价格是否发生改变
	required int32 num = 3;         //数量
	optional int64 uuid = 4;        //物品uuid
}

message Proto_CSChamberSellRsp
{
	required int32 result = 1;    //结果，0表示成功，非0表示失败
	required ChamberGoods goods = 3;  //商品
}

message Proto_CSMarketListReq
{
	required int32 label = 1;   //一级标签, 0表示关注列表相关
	required int32 sub_label = 2;   //二级标签
	optional int32 index = 3; //检索, 0表示默认
	optional int32 sort = 5; //=1价格升序， =2价格降序
	optional int32 state = 6; //物品状态，公示：1, 在售：2
	optional int32 page = 7; //第几页
}  

message Proto_CSMarketListRsp
{
	required int32 label = 1;   //一级标签
	required int32 sub_label = 2;   //二级标签
	optional int32 index = 3; //检索
	repeated tbMarketGoods goods = 4 [(yd_fieldoptions.field_arysize)=100];  //商品
	optional int32 max_page = 5; //最大页数
	optional int32 cur_page = 6; //当前页数
	optional int32 sort = 7;  //=1价格升序， =2价格降序
}  

message Proto_CSMarketListNumReq
{
	required int32 market_type = 1;   //一级标签, 0表示关注列表相关
	optional enMarketGoodsState state = 2 [default=EN_MGS_SELL]; //商品状态
}  

message CSMarketListNum
{
	optional int32 id = 1;            //对应MarketDesc中的index
	optional int32 num = 2;           //数量
}

message Proto_CSMarketListNumRsp
{
	optional int32 market_type = 1;   //一级标签, 0表示关注列表相关
	optional enMarketGoodsState state = 2 [default=EN_MGS_SELL]; //商品状态
	repeated CSMarketListNum list = 3 [(yd_fieldoptions.field_arysize)=50];
} 

message Proto_CSMarketBuyReq
{
	required uint64 goods_uid = 1;
	optional uint32 num = 2;
}
  
message Proto_CSMarketBuyRsp
{
	required int32 result = 1;
}  

message Proto_CSMarketSellReq
{
	required int32 item_id = 1;   //物品id
	required int32 num = 2;       //数量
	optional int32 quality = 3;   //品质
	optional uint64 uid = 4;      //唯一id
	optional uint32 price = 5;    //价格
}  

message Proto_CSMarketSellRsp
{
	required int32 result = 1;
	repeated tbMarketGoods goods = 2 [(yd_fieldoptions.field_arysize) = 8];  //商品
}    	

message Proto_CSMarketSellCancelReq	//下架
{
	required uint64 goods_id = 1;    //商品唯一id
	optional int32 item_id = 2;      //商品物品id
}

message Proto_CSMarketSellCancelRsp
{
	required int32 result = 1;
	repeated tbMarketGoods goods = 2 [(yd_fieldoptions.field_arysize) = 8];  //商品
}

message Proto_CSMarketResellReq	//重新上架
{
	required uint64 goods_id = 1;    //商品唯一id
	required uint32 price = 2;       //单个价格
	optional int32 num = 3;          //物品数量
}

message Proto_CSMarketResellRsp
{
	required int32 result = 1;
	repeated tbMarketGoods goods = 2 [(yd_fieldoptions.field_arysize) = 8];  //商品
}


message Proto_CSMarketSellListReq
{
}

message Proto_CSMarketSellListRsp
{
   repeated tbMarketGoods goods = 1 [(yd_fieldoptions.field_arysize) = 8];  //商品
}

message Proto_CSMarketPriceReq		//市场物品的价格
{
	required int32 item_id = 1;     //物品id
	required int32 quality = 2;     //品质
}

message Proto_CSMarketPriceRsp
{
	required int32 item_id = 1;
	optional int32 price = 2;  //建议价格
	repeated tbMarketGoods refer_sell_goods = 3 [(yd_fieldoptions.field_arysize) = 5];  //参考在售商品
	repeated tbMarketGoods refer_notice_goods = 4 [(yd_fieldoptions.field_arysize) = 5];  //参考公示商品
	required int32 quality = 5; //品质
}


message Proto_CSMarketFocusReq
{
	required uint64 goods_uid = 1;
}
  
message Proto_CSMarketFocusRsp
{
	required int32 result = 1;
	required tbMarketGoods goods = 2;
}  

message Proto_CSMarketFocusCancelReq
{
	required uint64 goods_uid = 1;
}
  
message Proto_CSMarketFocusCancelRsp
{
	required int32 result = 1;
    required tbMarketGoods goods = 2;
}  

message Proto_CSMarketFocusListReq   
{
	
}
  
message Proto_CSMarketFocusListRsp
{
	repeated tbMarketGoods goods = 1 [(yd_fieldoptions.field_arysize) = 20];  //商品
}  


enum MarketQueryType
{
	EN_MARKET_QUERY_TYPE_NORMAL = 1;     //普通搜索
	EN_MARKET_QUERY_TYPE_EQUIP = 2;      //装备搜索
	EN_MARKET_QUERY_TYPE_GOODS_UID = 3;  //商品uid搜索
}

message Proto_CSMarketQueryReq		//先支持treasure物品，以后可扩展支持所有shop
{
	optional MarketQueryType query_type = 1;   //查询类型（普通、装备）
	optional string item_name = 3 [(yd_fieldoptions.field_bufsize) = 32];             //名字查询
	optional int32 equip_type = 4;  //装备类型
	optional int32 equip_buff = 6;  //装备念痕id
	optional int32 min_price = 7;   //最小价格
	optional int32 max_price = 8;   //最大价格
	repeated CSAttr attr = 9 [(yd_fieldoptions.field_arysize) = 10];       //重铸属性
	repeated int32 quality = 10 [(yd_fieldoptions.field_arysize) = 2];     //品质
	optional int32 min_level = 11;     //最小等级
	optional int32 max_level = 12;     //最大等级
	optional enMarketGoodsState state = 13 [default=EN_MGS_SELL];    //商品状态
	optional uint64 goods_uid = 14;    //商品uid
}

message Proto_CSMarketQueryRsp
{
	repeated tbMarketGoods goods = 1 [(yd_fieldoptions.field_arysize) = 100];  //商品
}

message Proto_CSMarketRecordReq
{

}

message Proto_CSMarketRecordRsp
{
	repeated MarketTradeRecord notice_goods = 1;  //正在出售的公示物品
	repeated MarketTradeRecord sell_record = 2 [(yd_fieldoptions.field_arysize) = 20];    //成功出售记录
	repeated MarketTradeRecord buy_record = 3 [(yd_fieldoptions.field_arysize) = 20];     //成功购买记录
}


enum EMoneyExchangeType
{
	EN_MONEY_EXCHANGE_DIAMON_TO_GOLD = 1;   //钻石兑换金币
	EN_MONEY_EXCHANGE_DIAMON_TO_MONEY = 2;  //钻石兑换银币
	EN_MONEY_EXCHANGE_GOLD_TO_MONEY = 3;    //金币兑换银币
}

message Proto_CSMoneyExchangeReq
{
	required EMoneyExchangeType type = 1; //兑换类型
	required int32 exchange_value = 2;    //兑换金额
}


message Proto_CSMoneyExchangeRsp
{
	required int32 result = 1; //结果，0表示成功，1表示部分兑换
	optional int32 real_exchange_value = 2;  //实际兑换数量
	optional int32 req_exchange_value = 3;   //请求兑换数量
}


//----------------------------------------------------------------------------------------------------------
//------------交易 end
//----------------------------------------------------------------------------------------------------------


message Proto_CSSetSkillTalentReq
{
	required int32 hero_id = 1; 	//英雄ID
	required int32 skill_id = 2;	//技能ID
	required int32 talent_skill_id = 3; //天赋技能ID
}

message Proto_CSSetSkillTalentRsp
{
	required int32 hero_id = 1; 	//英雄ID
	required int32 skill_id = 2;	//技能ID
	required int32 talent_skill_id = 3; //天赋技能ID
	required int32 debut_skill = 4; //入场技
}

message Proto_CSChangeHeroJobReq
{
	required int32 hero_id = 1; //英雄ID
	required int32 job = 2; //新职业
}

message Proto_CSChangeHeroJobRsp
{
	required int32 hero_id = 1; //英雄ID
	required int32 job = 2; //新职业
	repeated int32 job_skill_list = 3;//
}

message Proto_CSResetHeroJobReq
{
	required int32 hero_id = 1; //英雄ID
}

message Proto_CSResetHeroJobRsp
{
	required int32 hero_id = 1; //英雄ID
	required int32 job = 2; //新职业
	repeated int32 job_skill_list = 3;
}

message Proto_CSStartLevelReq
{
	required int32 level_id = 1; //关卡ID
	required enComputerAILevel ai_level = 2; //电脑AI等级，要废弃掉
	required bool switch_active_hero	= 3; 
	required enLevelMode level_mode	= 4; //要废弃掉
	optional Proto_RoomPlayerInfo player_info  = 5[(yd_fieldoptions.field_arysize)=5]; //自己，要废弃掉
	repeated Proto_RoomPlayerInfo computer_list  = 6[(yd_fieldoptions.field_arysize)=5]; //电脑AI列表，要废弃掉
	optional enLevelCreateMethod createmethod = 7 [default=E_Level_Create_By_Default];//创建模式,要废弃掉
	//optional RiftStartData rift_start_data = 8; //秘境玩法开启相关数据

	optional int32 npc_obj_id = 9 [default=0];	//触发战斗的npc obj id
	optional int32 npc_id = 10 [default=0];	    //触发战斗的npc配置id
}

message Proto_CSRiftLevelFastDataReq
{
	optional int32 rift_level = 1; //秘境楼层
}
message Proto_CSRiftLevelFastDataRsp
{
	optional int32 rift_level = 1; //秘境楼层
	optional int32 first_rift_time = 2; //最快通关记录
	optional enBattleScore score_level = 3[default=EN_BATTLE_SCORE_NONE]; //通关评价
	optional string name = 4[(yd_fieldoptions.field_bufsize)=32];
	optional int32 player_rift_time = 5; //玩家最快通关记录
	optional enBattleScore player_score_level = 6[default=EN_BATTLE_SCORE_NONE]; //通关评价
	optional bool is_buff_level = 7;
}

message Proto_CSRiftLevelAwardReq
{
	optional int32 npc_obj_id = 1 [default=0];	//领取奖励的npc obj id
	optional int32 npc_id = 2 [default=0];	    //领取奖励的npc配置id
}
message Proto_CSRiftLevelAwardRsp
{
	optional Proto_CSRoleItemNtf item = 1;      //获取的奖励物品
}

message Proto_RiftChaptersReq
{
	optional int32 npc_id = 2; //秘境NPC id
}
enum enRiftChaptersErrCode
{
	E_RIFT_CHAPTERS_ERR_NONE = 0;
	E_RIFT_CHAPTERS_ERR_LV = 1;
	E_RIFT_CHAPTERS_ERR_TEAM = 2;
}
message Proto_RiftChaptersRsp
{
	optional enRiftChaptersErrCode err_code = 1;
}

//message Proto_CSResetRiftReq
//{
//}
//message Proto_CSResetRiftRsp
//{
//}

//message Proto_CSRiftMapChangeNtf
//{
//	optional RiftData rift_data = 1; //秘境玩法相关数据
//}

enum enBoxExecType
{
	E_Box_Exec_Default = 0; //中间的执行
	E_Box_Exec_Begin = 1;//开始
	E_Box_Exec_End = 2; //结束
}

message CSBoxExecInfo
{
	required enBoxExecType type = 1; //行为类型
	required int32 box_id = 2; //碰撞盒ID
	required int32 tree_node_id = 3; //行为树节点ID
}

message Proto_CSBoxExecReq
{
	required int32         battle_id = 1; //副本ID
	required CSBoxExecInfo box_info  = 2; //行为树信息
	required int32         obj_id    = 3; //触发者的英雄实例ID
}

message Proto_CSBoxExecRsp
{
    required int32              battle_id = 1;
	required CSBoxExecInfo      box_info  = 2;
	required int32              obj_id    = 3;
	optional Proto_CS_ErrorCode ret       = 4 [default = ERR_CODE_OK];
}
message Proto_CSBoxExecNtf
{
	required int32         battle_id = 1; //副本ID
	required CSBoxExecInfo box_info  = 2; //行为树信息
}

message CSBoxNodeInfo
{
	required int32 tree_node_id = 1; //行为树节点ID
	required int32 begin_time = 2; //开始时间 0表示未开始
	required int32 end_time = 3; //结束时间 0表示未结束
}

message CSBoxInfo
{
	required int32 box_id = 1;
	required int32 begin_time = 2; //开始时间 0表示未开始
	required int32 end_time = 3; //结束时间 0表示未结束
	repeated CSBoxNodeInfo node_list = 4; //节点信息
}

message Proto_CSBoxListNtf
{
	required int32 battle_id = 1;
	repeated CSBoxInfo box_info_list = 2; 
}


enum enLevelEventStatus
{
	E_Level_Event_Status_None = 0;
	E_Level_Event_Status_Init = 1;
	E_Level_Event_Status_Start = 2;
	E_Level_Event_Status_Victory = 3;
	E_Level_Event_status_Defeat = 4;
}

message Proto_LevelEvent
{
	required int32 level_event_group_id = 1; //关卡事件组ID,对应LevelData表里的
	required int32 level_event_id = 2; //关卡事件ID,对应LevelEvent表里的
	required enLevelEventStatus level_event_status = 3; //事件状态
	required int32 level_event_start_time = 4; //关卡事件开始(触发)时间，1970-1-1开始计时的秒数, C标准库里的通用计时开始时间
}

/*无则增加，有则更新*/
message Proto_CSLevelEventNtf
{
	required int32 level_desc_id = 1; //关卡(地图)资源ID
	required int32 battle_id = 2; //战斗实例ID
	repeated Proto_LevelEvent level_event_list = 3; //关卡事件列表
}

message Proto_CSBattleDiscardReq
{
	required int32 battle_id = 1; //关卡ID
}

message Proto_CSBattleDiscardNtf
{
	required int32 battle_id = 1; //关卡ID
	required uint64 role_id = 2; //角色ID
}

message BattlePlayerNamePair
{
	required uint64 role_id = 1;//角色ID
	required string role_name = 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
	required bool agree = 3;//是否同意
}

message BattleSurrenderInfo
{
	repeated BattlePlayerNamePair surrender_list = 1[(yd_fieldoptions.field_arysize)=5]; //投降者列表
	required uint64 start_elaspse_time = 2;//发起时间，距离开局的毫秒数
	required uint64 expired_elaspse_time = 3; //超时时间，距离开局的毫秒数
	required int32 min_needed_num = 4; //认输需要人数
	required int32 camp_player_num = 5; //当前阵营的人数(包括AI)
}

message Proto_CSBattleInitiateSurrenderReq
{
	required uint64 battle_id = 1;
}

//发起，或者状态更新
message Proto_CSBattleSurrenderNtf
{
	required uint64 battle_id = 1; //关卡ID
	required BattleSurrenderInfo surrender_info = 2; //投降信息
}

message Proto_CSBattleSurrenderReq
{
	required uint64 battle_id = 1;
	required bool agree = 2; //true同意，false拒绝
}

message Proto_CSBattleSurrenderResultNtf
{
	required uint64 battle_id = 1;
	required bool succeeded = 2; //true成功，false失败
}

enum enPveRevivalMethod
{
	E_Pve_Revival_By_Item  = 1; //用道具复活
	E_Pve_Revival_By_Money = 2; //用钱复活
	E_Rift_Revial		   = 3; //大秘境下前端播完动画请求复活(无需消耗任何东西)
}

message Proto_CSBattleRevivalReq
{
	required int32              battle_id = 1; //战斗ID
	required enPveRevivalMethod method    = 2; //方式 
    optional int32              obj_id    = 3; //0 表示自己
}

message Proto_CSBattleRevivalRsp
{
	required int32 battle_id = 1; //战斗ID
	required int32 revival_times = 2; //已用复活次数
}

message Proto_CSHeroStatistic
{
	required int32 hero_id = 1;
	required int32 pvp_times = 2; //pvp 次数
	required int32 pve_times = 3; //pve 次数
}

message Proto_CSPlayerStatisticNtf
{
	required RoleBattleStatistic role_statistic = 1; //角色统计
	repeated Proto_CSHeroStatistic hero_statistic = 2; //英雄统计
}

message Proto_CSLevelCompleteNtf
{
	required int32 charpter_id = 1; //章节ID
	optional enBattleScore score_level = 2[default=EN_BATTLE_SCORE_NONE]; //关卡评级
}

// 查看所有好友信息
message Proto_CSFriendQueryReq
{
}

message Proto_CSFriendQueryRsp
{
	repeated Proto_RoleFullInfo friend_role         = 1;
	repeated Proto_RoleFullInfo black_role	        = 2;
	repeated IMOtherList other_list					= 3;
}

// 关系网推荐好友
message Proto_CSFriendRecommendReq
{
	
}
message Proto_CSFriendRecommendRsp
{
	repeated Proto_RoleSimpleInfo role_info		    = 1;
	repeated enFriendNetRecommandReason reason		= 2;
}

// 设置是否可以加好友开关
message Proto_CSFriendSetSwitchReq
{
	optional bool is_add							= 1;	// ture为可加
}
message Proto_CSFriendSetSwitchRsp
{
	optional bool is_add							= 1;	// ture为可加
}

// 主动推荐好友
message Proto_GCFriendRecommandNtf
{
	repeated Proto_RoleSimpleInfo role_info     = 1;
	optional int32 id							= 2;
}

message Proto_CSSnsQueryRoleReq
{
	required string name 					= 1 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名,精确匹配
	repeated uint64 role_id_list 			= 2; //
	required bool is_online					= 3; //是否要求在线
	required int32 query_type				= 4;	//client用
}
message Proto_CSSnsQueryRoleRsp
{
	repeated Proto_RoleSimpleInfo role_info = 1;
	required bool is_online					= 3; //是否要求在线
	required int32 query_type				= 4;	//client用	
}

// 好友通过名字或者id查询玩家信息
message Proto_CSFriendQueryRoleReq
{
	optional string name 						= 1 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名,精确匹配
	optional uint64 role_id		 				= 2;
}
message Proto_CSFriendQueryRoleRsp
{
	optional Proto_RoleSimpleInfo role_info             = 1;
}

// 查看个人详细信息
message Proto_CSQueryRoleDetailReq
{
	repeated uint64 role_id		 						= 1;
}
message Proto_SCQueryRoleDetailRsp
{
	repeated Proto_RoleFullInfo role_info 		= 1;
}

// 邀请好友切磋
message Proto_CSFriend1v1InviteReq
{
	optional uint64 target_id 							= 1;
}

// 不再推荐好友请求
message Proto_CSFriendNotRecommand
{
	optional bool is_team_not_recommand			= 1;	// 是否是队伍内不推送
	optional bool is_week_not_recommand			= 2;	// 是否是一周内不推送
}

message ActivityDegreeInfo
{
	optional int32 activity_id					= 1;	// 活动id
	optional int32 join_count					= 2;	// 参与次数
	optional int32 degree_count					= 3;	// 活跃度获取次数
	optional bool is_start						= 4;    // 是否开启
}

// 请求所有的活动信息
message Proto_CSActivityDegreeGetAllReq
{
}

message Proto_GCActivityDegreeGetAllRsp
{
	repeated ActivityDegreeInfo activity_info   = 1;
	optional int32 activity_degree				= 2;	// 活跃度
	repeated int32 reward_id					= 3;	// 最近领取过的奖励id
}

// 请求获取奖励
message Proto_CSActivityDegreeGetRewardReq
{
	optional int32 reward_id					= 1;	// 奖励id
}

message Proto_GCActivityDegreeGetRewardRsp
{
	optional int32 reward_id					= 1;	// 最近领取过的奖励id
	repeated Item reward_item					= 2;
}

message Proto_GCActivityDataChangeNtf
{
	optional int32 activity_id					= 1;	// 活动id
	optional int32 join_count					= 2;	// 参与次数
	optional int32 degree_count					= 3;	// 活跃度获取次数
	optional int32 activity_degree				= 4;	// 活跃度
}

message Proto_CSSnsSetSignatureReq
{
	required string signature 					= 1 [(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64]; //签名
}
message Proto_CSSnsSetSignatureRsp
{
	required string signature 					= 1 [(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64]; //签名
}
message Proto_CSLoginNtf
{
	required uint64 role_id = 1;
	optional int32 moudle = 2;	// = 0好友， =1 公会
}

message Proto_CSLogoutNtf
{
	required uint64 role_id = 1;
	optional int32 moudle = 2;
}

message Proto_CSFriendApplyReq
{
	required uint64 accept_role_id     = 1;  // 接收者	
//    optional ENFriendSourceType source = 2[default=EN_FRIEND_SOURCE_OTHER];  // 好友申请来源
}
message Proto_CSFriendApplyRsp	//
{
	required uint64 accept_role_id = 2;  // 接收者
	required uint64 apply_time = 3;
}
message Proto_CSFriendAcceptReq
{
	required uint64 apply_role_id = 1;  // 申请者
	required bool agree				= 2; //=true同意 =false拒绝
}
message Proto_CSFriendAcceptRsp
{
	required uint64 apply_role_id = 1;  // 申请者
	required bool agree				= 2; //=true同意 =false拒绝
	required int32 result_code = 3; 
}

enum enFriendOperateType
{
	EN_FRIEND_ADD 				= 0; // 增加好友
	EN_FRIEND_DEL				= 1; // 删除好友
	EN_FRIEND_ADD_BLACK			= 2; // 加入黑名单
	EN_FRIEND_DEL_BLACK			= 3; // 移除黑名单
}

// 好友操作：加删好友，加删黑名单
message Proto_CSFriendOperateReq
{
	required uint64 role_id 	    	= 1;
	required enFriendOperateType type 	= 2;
}
message Proto_CSFriendOperateRsp
{
	required uint64 role_id 					= 1;
	optional Proto_RoleFullInfo role_info = 2;
	required enFriendOperateType type 			= 3;
}

// 通知对方我加了他的好友
message Proto_CSAddFriendReportTargetNtf
{
	optional string name						= 1;
	optional uint64 role_id						= 2;
	required enFriendOperateType type 			= 3;
}

message Proto_CSFriendApplyListReq
{

}

message Proto_CSFriendApplyListRsp
{
	repeated Proto_RoleSimpleInfo role_info = 1;
//    repeated ENFriendSourceType source 		= 2; // 好友申请来源
}

message Proto_CSMainCityFriendInfoReq
{

}

message Proto_MainCityFriendInfo
{
	optional uint64 id						= 1; // 玩家id
	optional string name					= 2; // 好友的名字
	optional uint32 heroid					= 3; // 英雄id
	optional int32 lv						= 4; // 好友的等级
	optional int32 skin_id					= 5; // 皮肤id
}

// 玩家请求主城好友信息返回
// 由于时装没有做，因此先不加时装
message Proto_CSMainCityFriendInfoRsp
{
	repeated Proto_MainCityFriendInfo info	= 1;
}

// 玩家请求切换主城英雄
message Proto_CSMainCityChangeHeroReq
{
	optional uint32 heroid			= 1;
}

message Proto_CSMainCityChangeHeroRsp
{
	optional uint32 heroid			= 1;	// 返回切换成功后的英雄id
}

// 主城推荐好友下线
message Proto_CSMainCityCommandFriendLogoutNtf
{
	optional uint64 role_id			= 1;	// 推荐的好友
}

message Proto_CSLevelConditionCheckReq
{
	required int32 battle_id = 1; //战斗ID
	required int32 boxid = 2; //boxID
	required int32 treeNodeId = 3; //nodeID
	repeated int32 condition_id_list = 4; //条件列表
}

message LevelConditionCheckResult
{
	required int32 condition_id = 1;//条件ID
	required bool result = 2; //true为满足 false为非满足
}

message Proto_CSLevelConditionCheckRsp
{
	required int32 battle_id = 1; //战斗ID
	required int32 boxid = 2; //boxID
	required int32 treeNodeId = 3; //nodeID
	repeated LevelConditionCheckResult condition_check_list = 4; //条件返回列表
}

message Proto_PlayerOnOff
{
	required uint64	role_id = 1;
	required bool   online  = 2;	//是否在线
}

message Proto_CSPlayerOnOffNtf
{
	repeated Proto_PlayerOnOff player_onoff = 1; //
}

message MacroSkillInfo
{
    required int32 skill_id        = 1;
	optional float skill_range_x   = 2;
	optional float skill_range_z   = 3; 
    optional int32 random_ratio    = 4;
    optional bool  use_skill_range = 5;
}

message Proto_MacroSection			//当前暂作攻击宏
{
	repeated int32	        skill_id   = 1;
	repeated MacroSkillInfo skill_info = 2;
}

message Proto_MacroSections
{
	repeated Proto_MacroSection macro_set = 1;
}

message Proto_CSAIExecMacroNtf
{
	required int32                      obj_id          = 1;
	required int32                      macro_id        = 2; //暂作索引识别用
	required bool                       fail2break		= 3; //中途执行失败是否打断终止宏 	
	repeated Proto_MacroSection	        macro_set       = 4;
	optional int32                      target_id       = 5; //目标
	optional bool                       face_to         = 6; //是否朝向目标
	optional Proto_CSActorMoveTargetPos move_info       = 7; //移动信息
    repeated Proto_MacroSections        macro_sets      = 8;
    optional int32                      type            = 9;
}

message Proto_CSAITerminalMacroNtf
{
	required int32 obj_id = 1;
	required int32 macro_id = 2;
}


message Proto_CSAIEndMacroReq
{
	required int32 obj_id = 1;
	required int32 macro_id = 2;
	required int32 reason = 3;  //结束原因 =0执行完成 =1中途执行失败 =2被server中止
}
		
message Proto_CSParagonUsePointReq
{
	required AttrType attr = 1;
}

message BattleDropRollInfo
{
    optional uint64 role_id = 1;
    optional int32  point = 2; // 1 - 100 // >0 为需求，<0 为贪婪 ( +200 为实际roll点值 ) -999 放弃
    optional uint64 time  = 3; // 玩家需求时间
}
message BattleDropItemInfo
{
	required int32 index = 1;
	required Proto_Vector3 pos = 3;
	required int32 platform = 4;
	required bool picked = 5;
	optional int32 monster_id = 6;

    required int32 item_id = 10;
    required int32 item_quality = 11;
    required uint32 item_count = 12;

    optional bool   is_team_drop = 20;
}

message BattleTeamDropInfo
{
	required int32 index = 1;
    required ItemGridCSData item = 2;
    optional uint64 picked_role_id = 21;        // 组队掉落用
    repeated BattleDropRollInfo roll_info = 22; 
}

message Proto_CSSoulBoxInfo
{
	repeated BattleDropItemInfo droped_list = 1; // 未进入roll点阶段的通知
    repeated BattleTeamDropInfo team_drop_info = 2; // roll 点阶段的通知(全量)， 玩家获得物品通知(增量)
}

// 将自己的魂匣加速  或者战斗拾取魂匣
message Proto_CSSoulBoxReq
{
	required int32 index = 1;
    optional bool  is_team_drop = 2;
    optional int32 is_require = 3; //是否需求 1:需求 2:贪婪 3:放弃 
}
	
message Proto_CSQuickMatchReq
{

                optional enBattleType           battle_type     = 1;//加入类型

//20181016暂且保留
	optional int32 map_desc_id = 2; //关卡ID
	optional int32 level_group_id = 3; //随机关卡组ID
}

message Proto_CSQuickMatchRsp
{
    optional int32 time = 1;//预计匹配时间
}

message Proto_CSBuyBagGridInfo
{
	required int32 times = 1;
	optional int32 total_grid = 2;
    required int32 page = 3;
}

message Proto_CSBattlePauseReq
{
	
}
message Proto_CSBattlePauseRsp
{

}
message Proto_CSBattleContinueReq
{

}

message Proto_CSRiftDataReq
{
}

message Proto_CSRiftFloorBonusesReq
{
	optional uint32 floor = 1;
}
message Proto_CSRiftFloorBonusesRsp
{
	optional Proto_CSRoleItemNtf bonuses_item = 1;
}

message Proto_CSExtShopItemReq
{
	optional int32 shop_id = 1;
}
message Proto_CSExtShopItemRsp
{
	repeated RiftShopItem shop_item = 1[(yd_fieldoptions.field_arysize)=24];
}

message Proto_CSExtShopBuyItemReq
{
	optional int32 shop_id = 1;
	optional int32 item_id = 2;
	optional int32 item_num = 3;
}
message Proto_CSExtShopBuyItemRsp
{
	optional Proto_CSRoleItemNtf shop_buy_item = 1;
	optional RiftShopItem shop_item = 2;
}

message Proto_CSBattleContinueRsp
{

}
message Proto_CSBattleSettingReq
{
	optional bool switch_active_hero = 1;
	optional enComputerAILevel ai_level = 2[default=EN_AI_LEVEL_NULL]; //电脑AI等级 

}


message Proto_CSBattleSettingRsp
{
	optional bool switch_active_hero = 1;
	optional enComputerAILevel ai_level = 2[default=EN_AI_LEVEL_NULL]; //电脑AI等级 
}

message Proto_CSSaveAffix 
{
	required uint64 uuid = 1;
}

message Proto_CSMsgSendReq 
{
	required uint64 recv_role_id = 1;
	required CSChatContent msg = 2;
}
message Proto_CSMsgSendRsp 
{
	required uint64 recv_role_id = 1;
	required CSChatContent msg = 2;
}

message Proto_CSMsgHeadReq
{

}
message Proto_CSMsgHeadRsp 
{
	repeated Proto_PrivateMsgHead msg_head_list = 1;
}

message Proto_CSMsgHeadNtf 
{
	repeated Proto_PrivateMsgHead msg_head = 1;
}

message Proto_CSMsgQueryReq 
{
	required uint64 send_role_id = 1;
}
message Proto_CSMsgQueryRsp 		//数量多时，可能分多个包连续发
{
	required uint64 send_role_id = 1;
	repeated tbRoleMsg  role_msg_list = 2;
}

message Proto_CSMailListReq 
{
	optional int32 begin				= 1;	// 开始的序号(1开始)
	optional int32 end					= 2;	// 结束的序号
}

message Proto_CSMailListRsp
{
	repeated tbRoleMail role_mail_list 	= 1;
	repeated enSnsMailStatus status		= 2;
}

// 通知服务器，客户端读取某邮件
// 带有物品的邮件，必须要获取物品后才能置成已读状态
message Proto_CSMailReadReq
{
	optional uint64 mail_id 			= 1;
}
message Proto_CSMailReadRsp 
{
	optional uint64 mail_id 			= 1;
	optional enSnsMailStatus status		= 2[default=EN_SNS_MAIL_NO_READ];
}

// 获取邮件物品(0表示一键获取)
message Proto_CSMailGetItemReq
{
	optional uint64 mail_id 			= 1;
}
message Proto_CSMailGetItemRsp 
{
	repeated uint64 mail_id 			= 1;	// 一键获取有可能只获取一部分邮件的，而发生背包满
	repeated ItemGridCSData item_list 		= 2;
	optional bool is_full				= 3;
	optional int32 count				= 4;	// 带有物品的邮件未读数
}

// mail_id 为0表示一键清除
message Proto_CSMailDelReq 
{
	optional uint64 mail_id 			= 1;
}

message Proto_CSMailDelRsp 
{
	repeated uint64 mail_id 			= 1;
}

message Proto_CSMailNtf 
{
	optional tbRoleMail tb_role_mail 	= 1;
	optional int32 count				= 2;	// 此类型邮件剩余个数（20物品邮件，30一般邮件）,提示邮件将满
	optional int32 no_read_count		= 3;	// 带有物品的邮件未读数
}

message Proto_CSGetRankReq 
{
	optional int32 rank_from = 1;
	optional int32 rank_to	 = 2;
	optional bool  is_self_rank = 3; // Exp, GS 弃用
	optional int32 trans_id = 4;
    optional bool  is_all_server_rank = 5; //是否为全服排行
}

message Proto_CSGetRankRsp 
{
	repeated RankInfo         rank_list         = 1;
	required int32            my_rank           = 2;
	required int32 	          rank_max          = 3;
	optional RankInfo         my_rank_info      = 4;
	optional int32            trans_id          = 5;
    optional uint64           next_refresh_time = 6;
    optional bool             is_all_server_rank = 7; //是否为全服排行
}

enum Proto_GuildNtfType
{
	EN_GUILD_NTF_NONE 				    = 0;
	EN_GUILD_NTF_MEMBER_ADD 		    = 1;
	EN_GUILD_NTF_MEMBER_DEL 		    = 2;
	EN_GUILD_NTF_MEMBER_CHANGE 		    = 3;
	EN_GUILD_NTF_TECH_UPGRADING 	    = 4;	//科技升级中
	EN_GUILD_NTF_TECH_UPGRADE 		    = 5;	//科技升级了
	EN_GUILD_NTF_APPLY_ADD 			    = 6;			//申请表增加
	EN_GUILD_NTF_APPLY_DEL 			    = 7;			//申请表删除
	EN_GUILD_NTF_EVENT 				    = 8;					//增加公会历史事件
	EN_GUILD_NTF_BASE_INFO_LEVEL 		= 10;	//公会信息改变 -- 等级
	EN_GUILD_NTF_BASE_INFO_COIN 		= 11;	//公会信息改变 -- 金币
	EN_GUILD_NTF_BASE_INFO_TITLE 		= 12;	//公会信息改变 -- 公告
	EN_GUILD_NTF_BASE_INFO_STATUS 		= 13;	//公会信息改变 -- 不良状态
	EN_GUILD_NTF_BASE_INFO_OTHER 		= 14;	//公会信息改变 -- 其他
	EN_GUILD_NTF_ACTIVITY_BASE_INFO		= 15; //公会活动的基本信息改变
	EN_GUILD_NTF_PLAYER_TECH_INFO		= 16; //玩家自己的科技信息
	EN_GUILD_NTF_MISC_INFO_CHANGE		= 17; //玩家杂项数据变化
};

message QueryGuildMemberInfo
{
	required uint64 role_id 				= 1;
	required enGuildMemTitle title 			= 2[default=EN_MEM_TITLE_MEMBER];  	//职位
	required int32 week_tax					= 3;	//周贡献
	required int32 total_tax				= 4;	//历史共获得贡献
	optional int32 level 					= 5;	//等级
	optional int32 avatar_id 				= 6; 	//等级
	optional string role_name 				= 7[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
	optional uint64 last_logout_time		= 8; 	//最后下线时间。 = 0表示在线
	optional uint64	join_time 				= 9;
	optional enProfessionType profession	= 10[default=EN_PROFESSION_A]; // 职业
	optional int32 transfer_id              = 11;   // 转职ID
	optional int32 division					= 12;	//段位
} 

// 由于客户端跟服务器member信息不一样
// 需要一个中间转换,而且会单独有一个自己的成员信息
message GuildMemberDataChangeNtf
{
	optional GuildMember mem_info				= 1;
	optional QueryGuildMemberInfo client_info 	= 2;
}

message Proto_CSGuildNtf
{
	required Proto_GuildNtfType type 			= 1;
	optional GuildMemberDataChangeNtf chg_mem   = 2;
	optional GuildBaseInfo base_info			= 3;
	optional GuildMiscInfo misc_data			= 4;
	optional GuildActivityData activity			= 5;
	optional GuildApply apply_data 				= 6;
	optional GuildEvent guild_event				= 7;
	optional uint64 guild_id					= 8;
}

message QueryGuildListInfo
{
	optional GuildBaseInfo base_info		= 1;
	optional QueryGuildMemberInfo president	= 2;
	optional GuildMiscInfo misc_data		= 3;
}

message Proto_CSGuildListReq
{
	required bool	 is_prepare = 1;
	required int32	 page_index = 2;
	required int32  page_num = 3;
	optional uint64	guild_id = 4; //是否查询指定公会，如果不是，则设置为0

}
message Proto_CSGuildListRsp
{
	required bool	 is_prepare = 1;
	required int32	 page_index = 2;	//第几页。 从0开始
	required int32  page_num = 3;		//每页个数 > 0
	required int32  page_total_num = 4;		//总页数(基于上述每页个数的计算
	repeated QueryGuildListInfo tb_guild_list = 5;
	optional uint64	guild_id = 6; //是否查询指定公会，如果不是，则设置为0
}

enum enGuildQuery
{
	EN_GUILD_QUERY_BASEINFO 				= 1;
	EN_GUILD_QUERY_APPLY 					= 2;
	EN_GUILD_QUERY_MEMBER 					= 3;
	EN_GUILD_QUERY_ACTIVITY 				= 4;	//查询公会活动基本信息
	EN_GUILD_QUERY_MERGE_LIST			 	= 5;	//查询申请合并列表（分页取）
}

message QueryGuildBaseInfo
{
	optional GuildBaseInfo base_info		= 1;
	optional GuildMember myself				= 2;	// 只要请求baseinfo，就会填充，前端需要自己的信息  															// 公会事件
	optional GuildMiscInfo misc_data		= 3;
	optional QueryGuildMemberInfo president = 4;
}

message QueryGuildMemberData
{
	repeated QueryGuildMemberInfo all_mem	= 1;
}

message QueryGuildMergeBaseInfo
{
	required uint64 id 						= 1;		//唯一ID
	optional int32 level 					= 2;
	optional enGuildStatus	status			= 3[default=EN_GUILD_STATUS_NORMAL];		//公会状态
	optional string name 					= 4 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //公会名
	optional uint64 create_time 			= 5;
	optional int32 guild_hot				= 6[default=100];	// 公会人气
	optional int32 sequence_id				= 7;	// 前端显示的唯一id
}

message QueryGuildMergeInfo
{
	optional QueryGuildMergeBaseInfo base	= 1;
	optional QueryGuildMemberInfo president	= 2;	// 会长
	optional GuildMiscInfo misc_data		= 3;
}

message QueryGuildMergeData
{
	repeated QueryGuildMergeInfo all_merge	= 1;
}


// 跟前端商量废弃分页，由于前端很多数据依赖于全部成员
// 通过缩小结构来减少包量
message Proto_CSGuildQueryReq
{
	optional enGuildQuery type 				= 1[default = EN_GUILD_QUERY_BASEINFO];
	optional bool is_online					= 2;										// 是否需要在线（false会发所有的成员）
}
message Proto_CSGuildQueryRsp
{
	optional enGuildQuery type 				= 1[default = EN_GUILD_QUERY_BASEINFO];
	optional QueryGuildBaseInfo baseinfo	= 2;	//EN_GUILD_QUERY_BASEINFO
	optional GuildApplyData apply_data 		= 3; 	//EN_GUILD_QUERY_APPLY
	optional QueryGuildMemberData mem_info	= 4; 	//EN_GUILD_QUERY_MEMBER
	optional GuildActivityData activity		= 5; 	//EN_GUILD_QUERY_ACTIVITY
	optional QueryGuildMergeData merge_info	= 6;	//EN_GUILD_QUERY_MERGE_LIST
}

// 获取行会事件(一次性30个)
message Proto_CSGuildGetEventReq
{
	optional int32 begin					= 1;	// 从1开始
	optional int32 end                      = 2;	// >=begin
}

message Proto_SCGuildGetEventRsp
{
	optional GuildEventData event_info		= 1;
}

message Proto_CSGuildCreateReq
{
	optional uint32 avatar_id				= 1; 	//公会头像
	optional enGuildApplySet apply_set  = 2[default = EN_GUILD_APPLY_NONE]; //公会申请设置
	optional string name 					= 3 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //公会名
	optional string notice 					= 4 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=128]; //公告	

}
message Proto_CSGuildCreateRsp
{
	optional QueryGuildBaseInfo	tb_guild 	= 1;
}
message Proto_CSGuildSetReq
{
	required uint64 guild_id 			= 1;
	optional uint32 avatar_id				= 2; 	//公会头像
	optional enGuildApplySet apply_set  = 3[default = EN_GUILD_APPLY_NONE]; //公会申请设置
	required string notice 					= 4 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=128]; //公告	
}
message Proto_CSGuildSetRsp
{
	required uint64 guild_id 			= 1;
	optional uint32 avatar_id				= 2; 	//公会头像
	optional enGuildApplySet apply_set  = 3[default = EN_GUILD_APPLY_NONE]; //公会申请设置
	optional string notice 					= 4 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=128]; //公告
	required int32 result = 5;		
}
message Proto_CSGuildApplyReq
{
	repeated uint64 guild_id 			= 1;	//如果guild_id = 0 表示一键申请
	optional bool is_response			= 2; //是否响应
}
message Proto_CSGuildApplyRsp
{
	repeated uint64 guild_id 			= 1;
	optional bool is_response			= 2; //是否响应
	required int32 result 				= 3;
}
message Proto_CSGuildInviteReq
{
	required uint64 guild_id  = 1;
	required uint64 invite_role_id 			= 2;

}
message Proto_CSGuildInviteRsp
{
	required uint64 guild_id  = 1;
	required uint64 invite_role_id 			= 2;  //被邀请者
	optional string guild_name 					= 3 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //公会名
	optional string role_name 					= 4 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //邀请者的名字	
	required int32 result = 5;
}

// 获取系统推荐合并列表(分段取)
message Proto_CSGuildGetSysRecommadReq
{
	optional int32 begin						= 1;	// 起始数
	optional int32 end							= 2;	// 截止数
}
message Proto_CSGuildGetSysRecommadRsp
{
	repeated QueryGuildMergeInfo info			= 1;
}

// 查询某个公会
message Proto_CSGuildResearchReq
{
	optional string name						= 1;	// 公会名字
	optional uint64 id							= 2;	// 公会id
}
message Proto_CSGuildResearchRsp
{
	optional QueryGuildListInfo info			= 1;
}

// 请求与其他公会合并
message Proto_CSGuildMergeWithOtherReq
{
	optional uint64 id							= 1;	// 公会id
}

enum ENGuildMergeListOperate
{
	EN_OPERATE_CLEAR							= 1;	// 清空列表
	EN_OPERATE_ACCEPT							= 2;	// 接受申请 
}

// 请求操作申请列表
message Proto_CSGuildOperateMergeListReq
{
	optional ENGuildMergeListOperate type		= 1;
	optional uint64	id							= 2;	//	公会id
}
message Proto_CSGuildOperateMergeListRsp
{
	optional ENGuildMergeListOperate type		= 1;
	optional uint64	id							= 2;	//	公会id
}

// 领取分红
message Proto_CSGuildGetBonusReq
{
	
}

message Proto_CSGuildGetBonusRsp
{
	optional int32 bonus						= 1;	// 获取的分红数
}

enum ENGuildApplyListOperate
{
	EN_APPLY_LIST_CLEAR							= 1;	// 清空列表
	EN_APPLY_LIST_ACCEPT						= 2;	// 接受申请 
	EN_APPLY_LIST_REFUSE						= 3;	// 拒绝申请 
}

message Proto_CSGuildApproveApplyReq
{
	optional uint64 apply_role_id 				= 1;
	optional ENGuildApplyListOperate type 		= 2;  

}
message Proto_CSGuildApproveApplyRsp
{
	optional uint64 apply_role_id 				= 1;
	optional ENGuildApplyListOperate type 		= 2;
	optional uint64 guild_id 					= 3;
}

message Proto_CSGuildAcceptInviteReq
{
	required uint64 guild_id = 1;
	required uint64 who_invite_role_id = 2;
	required bool is_accept = 3;

}
message Proto_CSGuildAcceptInviteRsp
{
	required uint64 guild_id = 1;
	required uint64 who_invite_role_id = 2;	// 邀请者的id
	required bool is_accept = 3;
	required int32 result = 4;
	optional bool is_in	= 5;	// 被邀请者是否进入行会
	optional string name = 6[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //被邀请者的名字
}
message Proto_CSGuildQuitReq
{
}
message Proto_CSGuildQuitRsp
{
	required uint64 guild_id 	= 1;
	required int32 result 		= 3;
}
message Proto_CSGuildPromoteReq
{
	required uint64 guild_id = 1;
	required uint64 promote_role_id = 2;
	required enGuildMemTitle new_title = 3;	// EN_MEM_TITLE_NONE就是开除
}
message Proto_CSGuildPromoteRsp
{
	required uint64 guild_id = 1;
	required uint64 promote_role_id = 2;
	required enGuildMemTitle new_title = 3;
	required int32 result = 4;
}

message Proto_CSGuildUpgrateReq
{
	optional eGuildArchType 		type 		= 1;
	optional int32 lv							= 2;	// 需要升到的等级
}
message Proto_CSGuildUpgrateRsp
{
	optional eGuildArchType 		type 		= 1;
	optional int32 lv			 				= 2;
}
message Proto_GuildShopItem
{
	optional int32 id = 1;	// 表编号
	optional int32 person_num = 2; // 总的买的数量
}
message Proto_CSGuildShopListReq
{
}
message Proto_CSGuildShopListRsp
{
	repeated Proto_GuildShopItem shop_item_list = 3;
}
message Proto_CSGuildShopBuyReq
{
	optional int32 id		= 1; // 表编号
	optional int32 count	= 2;
}
message Proto_CSGuildShopBuyRsp
{
	optional Proto_GuildShopItem shop_item = 2;
}
message Proto_CSGuildTechResearchReq
{
	optional int32 id = 1;
}
message Proto_CSGuildTechResearchRsp
{
	optional int32 id = 1;
}
message Proto_CSGuildTechLearnReq
{
	optional int32 id = 1;
}
message Proto_CSGuildTechLearnRsp
{
	optional int32 id = 1;
}

// 获取行会活跃奖励
message Proto_CSGuildRebateGetRewardReq
{
	optional int32 id						= 1;	// 表格里面的id
}
message Proto_SCGuildRebateGetRewardRsp
{
	optional int32 id						= 1;	// 表格里面的id
}

// 当前服务器职业选择的信息
message Proto_CSHunterProfDataReq
{
}

message Proto_SCHunterProfDataRsp
{
	repeated SvrHunterProfCount count_data      = 1;
	optional int32 cd_time						= 2;	// cd还余下多久,小于等于0是没有cd了
}

// 选择职业（更换也是这个）
message Proto_CSHunterProfSelectReq
{
	optional ENHunterProfType type				= 1[default=EN_HUNTER_PROF_NULL];
}
message Proto_SCHunterProfSelectRsp
{
	optional ENHunterProfType type				= 1[default=EN_HUNTER_PROF_NULL];
}

// 行会技能研究
message Proto_CSGuildSkillResearchReq
{
	optional int32 skill_id						= 1;
}
message Proto_SCGuildSkillResearchRsp
{
	optional int32 skill_id						= 1;
	optional int32 skill_lv						= 2;
}

// 建设基金转换
message Proto_CSGuildHouseValueExchangeReq
{
//	optional ENArchitectureValueType src_type	= 1[default=EN_ARCHI_VALUE_RESEARCH];	// 原资源
//	optional ENArchitectureValueType des_type	= 2[default=EN_ARCHI_VALUE_RESEARCH];	// 生成的资源
	optional int32 exchange_value				= 3;	// 转换的量
}
message Proto_SCGuildHouseValueExchangeRsp
{
	optional int32 change_value					= 1;	// 实际转换的量
}

message GuildTransportExpPlayer
{
	optional uint64 role_id							= 1;
	optional bool flag								= 2;	// true 为可以传功
}

// 获取行会成员是否可以传功
message Proto_CSGuildGetTransportListReq
{
}
message Proto_SCGuildGetTransportListRsp
{
	repeated GuildTransportExpPlayer player_info	= 1;
}

// 传功给公会成员（只是发起）
message Proto_CSGuildTransportExpReq
{
	optional uint64 role_id							= 1;
}
message Proto_SCGuildTransportExpRsp
{
}

// 推送给对方传功请求
message Proto_SCGuildTransExpRequestNtf
{
	optional uint64 role_id							= 1;
	optional string name							= 2;
}

// 回应传功请求
message Proto_CSGuildReplyTransExpReq
{
	optional uint64 role_id							= 1;
	optional bool is_ok								= 2;
}

// 开始传功（由受功者发起）
message Proto_CSGuildTransportExtBeginReq
{
}

enum enGuildTransportExpNotifyType
{
	EN_GUILD_TRANSEXP_NOTIFY_NULL					= 0;
	EN_GUILD_TRANSEXP_NOTIFY_PREPARE				= 1;	// 准备
	EN_GUILD_TRANSEXP_NOTIFY_START					= 2;	// 开始
	EN_GUILD_TRANSEXP_NOTIFY_END					= 3;	// 终止
	EN_GUILD_TRANSEXP_NOTIFY_POINT					= 5;	// 阻滞点
	EN_GUILD_TRANSEXP_NOTIFY_RESUME					= 6;	// 贯通阻滞
	EN_GUILD_TRANSEXP_NOTIFY_ONLINE					= 7;	// 重连发送数据
}

enum enGuildTransportExpEndType
{
	EN_GUILD_TRANS_END_TYPE_MOVE					= 1;	// 移动终止
	EN_GUILD_TRANS_END_TYPE_FINISH					= 2;	// 完成
	EN_GUILD_TRANS_END_TYPE_TIMEOUT					= 3;	// 超时
	EN_GUILD_TRANS_END_TYPE_LOGOUT					= 4;	// 掉线
	EN_GUILD_TRANS_END_TYPE_STOP					= 5;	// 主动停止
	EN_GUILD_TRANS_END_TYPE_LEAVE					= 6;	// 退出行会
	EN_GUILD_TRANS_END_TYPE_TEAM					= 7;	// 加入队伍
}

// 通知双方准备好传功，可以传送地图
message GuildPrepareTransportInfo
{
	optional uint64 role_id							= 1;
	optional Proto_Vector3 src_pos					= 2;
}

// 通知双方开始传功
message GuildStartTransportExpInfo
{
	optional uint64 role_id							= 1;
	optional int32 all_value						= 2;	// 总的行会贡献，或者经验
}

// 通知双方阻滞点
message GuildTransExpStopPoint
{
	optional int32 index							= 1;	// 阻滞点序号(1-6)
}

// 通知双方终止传功
message GuildEndTransportExpInfo
{
	optional enGuildTransportExpEndType end_type	= 1[default=EN_GUILD_TRANS_END_TYPE_MOVE];
	optional uint64 role_id							= 2;
	optional string name							= 3;
	optional int32 value							= 4;	// 经验或者行会贡献的值
}

// 重连发送数据
message GuildTransExpOnline
{
	optional uint64 role_id							= 1;	// 传功对象的id
	optional uint64 is_caller						= 2;	// 自己是否是发起者
	optional int32 all_value						= 3;	// 总的经验或者行会贡献的值
	optional int32 cur_time							= 4;	// 已经传功的时间间隔
	optional int32 resume_index						= 5;	// 阻滞点的序号（只有传功者才会发，默认是0）
}

// 通知双方传功进度的信息
// 包括：通知双方准备好传送，传功开始，传功终止，经验变化
message Proto_SCGuildTransportExpProcessNtf
{
	optional enGuildTransportExpNotifyType type	= 1[default=EN_GUILD_TRANSEXP_NOTIFY_NULL];
	optional GuildPrepareTransportInfo prepare_info	= 2;
	optional GuildStartTransportExpInfo start_info	= 3;
	optional GuildEndTransportExpInfo end_info		= 4;
	optional GuildTransExpStopPoint stop_point		= 6;
	optional GuildTransExpOnline online_data		= 7;
}

// 贯通阻滞点
message Proto_CSGuildTransExpResumeReq
{
}

// 终止传功
message Proto_CSGuildTransExpEndReq
{
}

message Proto_CSOpenBoxReq 
{
	required uint32 id = 1;
}
message Proto_CSOpenBoxRsp
{
	required uint32 id = 1;
	optional Proto_CSRoleItemNtf acquired_items = 3;
}

message QuestEventNodeNtf
{
	required int32 quest_id = 1;
	optional bool finished = 2;
	repeated QuestEventNode nodes = 3;
	optional int32 accept_time = 4;
}
message Proto_CSQuestNodeNtf 
{
	repeated QuestEventNodeNtf list = 1;
}
message Proto_CSQuestAcceptReq
{
	required int32 quest_id = 1;	
}
message Proto_CSQuestAcceptRsp
{
	required QuestNode quest = 1;
}
message Proto_CSQuestCompleteReq
{
	required int32 quest_id = 1;	
	optional uint32 selected_item_desc_id = 2;
	optional uint64 selected_item_uuid = 3;
	optional int32  selected_item_quality = 4;

    optional int32  next_quest_id = 10; //指定完成后自动接取的下一任务id
} 
message Proto_CSQuestCompleteRsp 
{
	required int32 quest_id = 1;
    optional Proto_CS_ErrorCode error_code = 8[default = ERR_CODE_OK];
	//optional Proto_CSRoleItemNtf items = 2;  // 获得的物品列表
	//optional uint64 exp = 3; 
	//optional uint64 pet_exp = 4;
	//optional uint64 guild_money = 5; // 请读表
	//optional uint64 guild_tax = 6; 
	//optional int32 avatar = 7;
}
message Proto_CSQuestLoopAcceptReq
{
	required int32 loop_id = 2;
}
message Proto_CSQuestLoopAcceptRsp
{
	required int32 loop_id = 1; //循环任务id
}
message Proto_CSQuestLoopAcceptNtf
{
	required LoopQuest loop_info = 1;
}
message Proto_CSQuestLoopResetReq
{
	required int32 loop_id = 1;
}
message Proto_CSQuestLoopResetRsp
{
	required int32 loop_id = 1;
}

message Proto_CSAchieveNtf // E_CS_ACHIEVE_NTF
{
	required AchieveInfo achieve_info = 1;
    optional int32      acquired_point = 2;
    optional int32      acquired_item_id = 3;
}
// message Proto_CSAchieveQueryReq // Use: Proto_CSGetRoleReq // E_CS_ACHIEVE_QUERY_REQ
message Proto_CSAchieveQueryRsp //E_CS_ACHIEVE_QUERY_RSP
{
    required uint64 role_id = 1;
    required int64      achieve_point = 2;
    repeated AchieveInfo achieve_list = 3;
}

 
//message SoulBoxOtherPlayerList
//{
//	optional uint64 role_id			= 1;
//	optional SoulBox box			= 2;
//	optional int32 beclick			= 3; // 玩家被加速的次数
//	optional string name			= 4[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
//	optional int32 head_id 			= 5; 
//	optional int32 lv				= 6;
//}

message Proto_CSIntrustRefleshNtf
{
	repeated int32 quest_id_list = 1;
}

//message Proto_CSGuildSoulboxListReq
//{
//} 
//message Proto_CSGuildSoulboxListRsp 
//{
//	repeated SoulBoxOtherPlayerList online_list 	= 1; // 在线玩家信息
//	repeated SoulBoxOtherPlayerList offline_list 	= 2; // 离线玩家信息
//}
//message Proto_CSGuildSoulboxClickReq
//{
//	required uint64 role_id = 1;
//} 
//message Proto_CSGuildSoulboxClickRsp
//{
//	optional SoulBoxOtherPlayerList	box 	 = 1;
//	optional int32 contribution				 = 2; // 贡献
//}

message Proto_CSGuildSoulboxContributeReq
{
	optional int32 num = 1;							// 捐献的数量
	optional int32 id = 2;
} 
message Proto_SCGuildSoulboxContributeRsp
{
	optional int32 num = 1;
	optional int32 id = 2;
}

// 获取行会排行榜信息
message Proto_CSGuildGetFightValueRankReq
{
	optional int32 rank_from = 1;
	optional int32 rank_to	 = 2;
}

message GuildFightValueRankData
{
	optional int32 rank				 	= 1;
	optional string guild_name       	= 2;	// 行会名称
	optional int32 level				= 3;	// 行会等级
	optional uint32 fight_value			= 4;	// 行会战力
}
message Proto_SCGuildGetFightValueRankRsp
{
	repeated GuildFightValueRankData data 				= 1;	// 排行榜信息
	optional GuildFightValueRankData my_guild_data	 	= 2;	// 我的行会排行信息
	optional int32 rank_max								= 3;	// 排行榜的总数
}

//---------------------------------------------------------
//SnsGroup群组 Begin---------------------------------------
//---------------------------------------------------------

//拉取群列表
message Proto_CSSnsGroupListReq
{

}

enum enSnsGroupListChgReason
{
	EN_SG_LIST_CHG_REASON_CREATE = 1;          //创建
	EN_SG_LIST_CHG_REASON_DISMISS = 2;         //群被解散
	EN_SG_LIST_CHG_REASON_QUIT = 3;            //退出
	EN_SG_LIST_CHG_REASON_KICKED = 4;          //被踢出
	EN_SG_LIST_CHG_REASON_JOIN = 5;            //被邀请进群
	EN_SG_LIST_CHG_REASON_CHG_NAME = 6;        //修改名字
	EN_SG_LIST_CHG_REASON_CHG_ANNOUNCE = 7;    //修改公告
}

message Proto_CSSnsGroupListNtf
{
	required SnsGroupList group_list = 1;           //创建群组消息
	optional enSnsGroupListChgReason reason = 2;    //刷新列表原因
}

message Proto_CSSnsGroupHintNtf
{
	required SnsGroupBase sns_group_info = 1;  //群组消息
	optional uint32 last_get_seq = 2;           //最后获取的群组的消息序列号
	optional uint32 max_seq = 3;  			   //群组的最新消息序列号
}

//创建群组
message Proto_CSSnsGroupCreateReq
{
	optional string group_name = 2 [(yd_fieldoptions.field_bufsize)=32];  //群名称
	optional string anouncement = 3[(yd_fieldoptions.field_bufsize)=256]; //群公告
}

message Proto_CSSnsGroupCreateRsp
{
	required SnsGroupList group_list = 1;    //创建群组消息
}

//解散群组
message Proto_CSSnsGroupDismissReq
{
	required uint64 group_id = 1;           //群组id
}

message Proto_CSSnsGroupDismissRsp
{
	required SnsGroupList group_list = 1;    //创建群组消息
}

//邀请入群
message Proto_CSSnsGroupInviteReq
{
	required uint64 group_id = 1;          //群组id
	optional uint64 inviter = 2;           //邀请人ID
	repeated uint64 invitee = 3 [(yd_fieldoptions.field_arysize)=50];           //被邀请者ID
}

//踢除出群
message Proto_CSSnsGroupKickReq
{
	required uint64 group_id = 1;          //群组id
	required uint64 kick_role = 2;         //被踢除的玩家roleid
}

//退出群组
message Proto_CSSnsGroupQuitReq
{
	required uint64 group_id = 1;          //群组id
}

//群组成员信息请求
message Proto_CSSnsGroupMemberReq
{
	required uint64 group_id = 1;          //群组id
}


//群组清理信息请求
message Proto_CSSnsGroupClearMsgReq
{
	required uint64 group_id = 1;          //群组id
}

message Proto_CSSnsGroupClearMsgRsp
{
	required uint64 group_id = 1;          //群组id
}


//修改群公告
message Proto_CSSnsGroupModAnnounceReq
{
	required uint64 group_id = 1;          //群组id
	optional string anouncement = 2[(yd_fieldoptions.field_bufsize)=256]; //群公告
}

//修改群公告
message Proto_CSSnsGroupModAnnounceRsp
{
	required uint64 group_id = 1;          //群组id
	optional string anouncement = 2[(yd_fieldoptions.field_bufsize)=256]; //群公告
}

//拉取群消息
message Proto_CSSnsGroupGetMsgReq
{
	required uint64 group_id = 1;          //群组id
	optional uint32 begin_seq = 2;         //开始序列号
}

//设置群消息接收提醒
message Proto_CSSnsGroupModSettingReq
{
	required uint64 group_id = 1;          //群组id
	optional bool remind = 2;              //是否提醒
}

//发送群消息
message Proto_CSSnsGroupSendMsgReq
{
	required uint64 group_id = 1;          //群组id
	required CSChatContent msg = 2;        //发送的消息
}

//修改群名称
message Proto_CSSnsGroupChgNameReq
{
	required uint64 group_id = 1;          //群组id
	required string name = 2 [(yd_fieldoptions.field_bufsize)=32];    //新名称
}


enum enSnsGroupRefreshReason
{
	EN_SGRR_ADD_MEMBER = 1;       //添加新成员
	EN_SGRR_REMOVE_MEMBER = 2;    //移除成员
	EN_SGRR_MOD_ANNOUNCE = 3;     //修改群公告
	EN_SGRR_MOD_SETTING = 4;      //修改群提醒设置
	EN_SGRR_NEW_MESSAGE = 5;      //拉取群消息
	EN_SGRR_GET_MEMBER_INFO = 6;  //拉取成员消息
	EN_SGRR_MOD_NAME = 7;         //修改名字
}


message Proto_CSSnsGroupMemberChgNtf
{
	required uint64 group_id = 1;        //群组id
	optional SnsGroupMember member = 2;  //群组成员
	optional bool remind = 3;            //是否设置了群提醒
	optional string group_name = 4[(yd_fieldoptions.field_bufsize)=32];      //群组名字
	optional enSnsGroupRefreshReason reason = 5;   //原因
}

message Proto_CSSnsGroupMessageNtf
{
	required uint64 group_id = 1;          //群组id
	optional SnsGroupMessage message = 2;  //群消息
}


//---------------------------------------------------------
//SnsGroup群组 end-----------------------------------------
//---------------------------------------------------------


//---------------------------------------------------------
//战队 begin-----------------------------------------
//---------------------------------------------------------

message CSCorpMember
{
	optional CorpsMemberOne member = 1;   //战队个人信息
	optional string name = 2 [(yd_fieldoptions.field_bufsize)=32]; //角色名字
	optional int32 profession = 3;  //职业
	optional int32 level = 4;       //等级
	optional int32 transfer_id = 5; //转职ID
}

message CSBattleCorps
{
	required uint64 id = 1;             //战队id
	optional CorpsBase base = 2;        //基础信息
	repeated CSCorpMember member = 3 [(yd_fieldoptions.field_arysize) = 9];   //战队成员
}

message Proto_CSCorpsCreateReq
{
	required string name = 1 [(yd_fieldoptions.field_bufsize)=32];
	optional string announce = 2 [(yd_fieldoptions.field_bufsize)=256]; //战队公告
	optional int32 join_min_lv = 4;         //进入最小等级
	optional int32 join_max_lv = 5;          //进入最大等级
}

message Proto_CSCorpsDismissReq
{
	required uint64 id = 1;   //战队id
}

message Proto_CSCorpsApplyAgreeReq
{
	required uint64 id = 2;            //战队id
	required uint64 agree_role_id = 3; //同意申请加入role id 
}

message Proto_CSCorpsQuitReq
{
	required uint64 id = 2;            //战队id
}

message Proto_CSCorpsKickReq
{
	required uint64 id = 2;            //战队id
	required uint64 kick_role = 3;     //被踢的人
}

message Proto_CSCorpsModSettingReq
{
	required uint64 id = 1;            //战队id
	optional string announce = 2;      //公告
	optional uint32 join_min_lv = 3;      //最小进入等级
	optional uint32 join_max_lv = 4;      //最小进入等级
}


enum enCorpChgReason
{
	EN_CORPS_CHG_REASON_NONE = 0;
	EN_CORPS_CHG_REASON_MEMBER_JOIN = 1;      //有队友加入
	EN_CORPS_CHG_REASON_MEMBER_QUIT = 2;      //有队友退出
	EN_CORPS_CHG_REASON_MEMBER_KICKED = 3;    //有队友被踢出去
	EN_CORPS_CHG_REASON_SETTING_CHG = 4;      //设置修改
	EN_CORPS_CHG_REASON_CREATE = 5;           //创建
	EN_CORPS_CHG_REASON_DISMISS = 6;          //解散
}

message Proto_CSCorpsChgNtf
{
	optional CSBattleCorps corps = 1;    //战队信息 
	optional enCorpChgReason reason = 2 [default=EN_CORPS_CHG_REASON_NONE]; //改变原因
}

message Proto_CSCorpsApplyReq
{
	required uint64 id = 2;     //战队id
}

message Proto_CSCorpsApplyRsp
{
	
}

message Proto_CSCorpsApplyListReq
{
	required uint64 id = 2;     //战队id
}

message Proto_CSCorpsApplyListNtf
{
	repeated CSCorpMember member = 3 [(yd_fieldoptions.field_arysize) = 25];   //战队申请加入成员消息
}

message Proto_CSCorpsApplyClearReq
{
	required uint64 id = 1;              //战队id
	optional bool clear_all = 2;         //是否删除所有申请
	repeated uint64 apply_role_id = 3;   //单个删除申请
}

message Proto_CSCorpsApplyClearRsp
{
	repeated CSCorpMember member = 3 [(yd_fieldoptions.field_arysize) = 25];   //战队申请加入成员消息
}

message Proto_CSCorpsInfoReq
{
	required uint64 id = 2;              //战队id
}

message Proto_CSCorpsInfoRsp
{
	optional CSBattleCorps crops = 1;    //战队信息 
}

message Proto_CSCorpsInviteReq
{
	optional uint64 invitee = 1;         //被邀请者
}


message Proto_CSCorpsInviteRsp
{
	optional uint64 invitee = 1;      //被邀请者
	optional string invitee_name = 2; //被邀请者名字
	optional int32 retcode = 3;       //错误码
}


message Proto_CSCorpsLeaderConfirmNtf    //请求队长同意邀请的ntf
{
	optional uint64 inviter = 1;         //邀请者ID
	optional string inviter_name = 2;    //被邀请者名字
	optional uint64 invitee = 3;         //被邀请者
	optional string invitee_name = 4;    //被邀请者名字
}

message Proto_CSCorpsLeaderConfirmReq    //队长的邀请消息确认
{
	optional uint64 inviter = 1;         //邀请者
	optional uint64 invitee = 2;         //被邀请者
	optional bool is_refuse = 3;         //是否拒绝
}

message Proto_CSCorpsInviteeConfirmNtf          //被邀请者的邀请通知
{
	optional uint64 inviter = 1;         //邀请者
	optional string inviter_name = 2;    //邀请者名字
	optional uint64 corps_id = 3;        //战队id
	optional string corps_name = 4;      //战队名字
	optional bool leader_confirm = 5;    //队长已确认
}

message Proto_CSCorpsInviteeConfirmReq
{
	optional uint64 corps_id = 1;        //战队id
	optional bool is_refuse = 2;         //是否拒绝
}



//---------------------------------------------------------
//战队 end-----------------------------------------
//---------------------------------------------------------







// 主动推送sns数据
message Proto_CSSnsLoginDataNtf 
{
	optional SnsLoginData data 				= 1;
}

enum enGemstoneOpera
{
	E_Gemstone_Opera_None = 0;
	E_Gemstone_Opera_Dress = 1; //穿 
	E_Gemstone_Opera_Takeoff = 2; //脱
}

//有用到_s结构,添加string和repeated字段请务必添加大小
message Proto_CSUseItemReq
{
	required int32  item_id        = 1;
	optional int32  hero_id        = 2;
	optional int32  num            = 3;
	optional uint64 partner_uid    = 4;
	optional int32  quality        = 5;  //品质物品必须携带quality字段
    optional int32  grid_page      = 9;
    optional int32  grid_index     = 10; //物品所在格子,小于0表示不指定
	optional bool   is_confirm     = 11; //是否是二次确认
	optional uint64 target_role_id = 12; //使用目标
	optional string message        = 13 [(yd_fieldoptions.field_bufsize) = 128, (yd_fieldoptions.field_string_len) = 128];
}

message Proto_CSUseItemRsp
{
	required int32 item_id = 1;
	optional Proto_CSRoleItemNtf items = 2;
	optional ItemUseLimite item_use_limite = 3;
	optional int32 result					= 4;	// 过期物品需要提示客户端
}

message Proto_CSUseItemConfirmNtf
{
	required int32 item_id = 1; //物品id
	optional string confirm_str = 2; //确认文字
}

message Proto_CSGemstoneDressMsg
{
	required int32 hero_id			= 1;	//英雄ID
	required enGemstoneOpera opera	= 2;	//操作类型
	required int32 gemstone_slot	= 3;	//第几个孔
	required int32 gemstone_id		= 4;	//宝石(念玉)的资源ID
	optional int32 wear_pos         = 5;    //穿戴的部位
}


message Proto_CSGemstoneDressRsp
{
	optional int32 ret_code = 1;               //返回结果
}

message Proto_CSGemstoneSynthesizeReq
{
	required int32 wear_pos = 1;     //装备位
	required int32 slot = 2;         //槽位
	optional int32 gemstone_id = 3;  //宝石(念玉)的资源ID
	optional bool auto_consume = 4;  //自动购买材料
}

//合成成功
message Proto_CSGemstoneSynthesizeRsp
{
	required int32 wear_pos = 1;     //装备位
	required int32 slot = 2;         //槽位
	optional int32 gemstone_id = 3;  //宝石(念玉)的资源ID
	optional bool auto_consume = 4;  //自动购买材料
}

message Proto_CSGemstoneComposeReq
{
	repeated int32 gemstone_id = 1;     //宝石(念玉)的资源ID 
}

enum EResult
{
	EN_SUCCESS = 1;    //成功
	EN_FAIL = 2;       //失败
}

message Proto_CSGemstoneComposeRsp
{
	optional int32 result = 1;        //合成结果
	optional int32 gemstone_id = 2;   //合成宝石id
}

message Proto_CSGemstoneExchangeReq
{
	repeated int32 gemstone_id = 1;     //宝石(念玉)的资源ID 
}

message Proto_CSGemstoneExchangeRsp
{
	optional int32 gemstone_id = 2;    //兑换的宝石ID
}

message Proto_CSRoomInviteFriendReq		//邀请好友打仗
{
	required uint64 room_id = 1; //房间号
	required uint64 to_role_id = 2; //邀请谁
	optional int32 level_id = 3; //关卡编号
}
message Proto_CSRoomInviteFriendRsp		//邀请好友打仗 -- 给接收者
{
	required uint64 room_id = 1; //房间号
	required uint64 from_role_id = 2; //谁邀请的
	optional int32 level_id = 3; //
}
message Proto_CSRoomGuildInviteReq
{
	required uint64 room_id = 1; //房间号
	optional int32 level_id = 2; //关卡编号
}
message Proto_CSRoomGuildInviteNtf
{
	required uint64 room_id = 1; //房间号
	required uint64 from_role_id = 2; //谁邀请的
	optional int32 level_id = 3; //关卡编号
	optional string from_role_name = 4 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
}
message Proto_CSRoomGuildApplyReq
{
	required uint64 room_id = 1; //房间号
	required uint64 to_role_id = 2; //向谁申请
	optional int32 level_id = 3; //关卡编号
}
message Proto_CSRoomGuildApplyRsp
{
	required uint64 room_id = 1; //房间号
	required uint64 from_role_id = 2; //谁申请的
	optional int32 level_id = 3; //关卡编号
}
message Proto_CSRoomAgreeReq
{
	required uint64 room_id = 1; //房间号
	required uint64 from_role_id = 2; //谁邀请你的，或者向谁申请的
	required uint64 to_role_id = 3; //同意谁进来(自己也必须填)
	optional int32 level_id = 4; //关卡编号
}

//--- 战斗评分 ---
message Proto_CSBattleScoreNtf 
{
	required BattleScoreTempData score = 1;
}

//message Proto_CSBattleScoreInvite 
//{
//	required uint64 battle_id = 1;
//	required uint64 role_id = 2;
//}
message Proto_CSBattleScoreConfimReq
{
	required uint64 battle_id = 1;
}

// --------- 赛 -----------
message Proto_CSSkyArenaData
{
    required int32  season_id           = 1; // in corps data
    required uint32 season_start_time   = 2;  
    required uint32 season_finish_time  = 3;

    optional int32  current_floor         = 11; // in corps data
    //optional int32  today_win_times     = 12;
    //optional int32  today_battle_times  = 13;
    repeated int32  today_acquired_box    = 14[(yd_fieldoptions.field_arysize)=3];
    optional int32  battle_score        = 15; // 表现分

    optional SkyarenaStatistics statistics_history  = 21; // 历史记录
    optional SkyarenaStatistics statistics_season   = 22; // 赛季
    optional SkyarenaStatistics statistics_today    = 23; // 今日--今日最高层数无意义

    optional int32      match_cd        = 30; // 匹配cd
    // 0: 正常进行比赛 // 1:轻微消极比赛 // 2:严重消极比赛 // 3:重大消极比赛    
    optional int32      sa_ban_mode     = 37; 
    optional uint32     sa_ban_time     = 38; // 记录时间
    optional int32      sa_ban_score    = 39; // 信誉积分
}

//message Proto_CSTournamentQueryRsp
//message Proto_CSTournamentNtf
//message Proto_CSFloorMasterBattleNtf
//message Proto_CSFloorMasterBattleBetInfo
//message Proto_CSSkyArenaMasterInfoReq
//message Proto_CSFloorMasterInfo
//message Proto_CSGetTournamentAwardReq
//message Proto_CSGetTournamentAwardRsp
//message Proto_CSGetSkyArenaBattleNodeReq
//message Proto_CSGetSkyArenaBattleNodeRsp
//message FloorMasterRankRole
message Proto_CSGetSkyArenaRankReq
{
}
message Proto_CSGetSkyArenaRankRsp
{
}
//message Proto_CSLadderNtf

// -------- 红包 start ——-------
message Proto_CSRedEnvelopesSendReq
{
	required uint64 sender_role_id = 1;	//	发送者角色id
	required uint64 uniq_item_id = 2;	//	发送的红包id
	optional uint32 add_colin = 3;	//	充值金币
	optional string say_something = 4;	// 发红包的祝福语
}

message Proto_CSRedEnvelopesNtf
{
	required uint64 uniq_red_envelopes_id = 1;	//	红包唯一id
	optional uint32 coin_num = 2;		//	红包金币数量
	optional uint64 sender_role_id = 3; //	发送者角色id
	optional string role_name = 4;	// 角色名
	optional string say_something = 5; // 祝福语
}

message Proto_CSRedEnvelopesObtainReq
{
	required uint64 uniq_red_envelopes_id = 1;	//	红包唯一id
	optional uint64 sender_role_id = 2; // 领取人
}
enum EnRedEnvelopesOptionRet
{
	OBTAIN_SUCCESS = 0;
	OBTAIN_FAIL = 1;
	OBTAIN_USED = 2;
}

message Proto_CSRedEnvelopesObtainRsp
{
	required EnRedEnvelopesOptionRet obtain_result = 1;	//	获取红包结果
	optional uint64 sender_role_id = 2;	//	发送者角色id
	optional string sender_name = 3;	// 发送人名
	optional uint32 sender_header = 4;	// 头像
	optional string say_something = 5;	//	祝福语
	optional uint64 uniq_red_envelopes_id = 6; // 红包唯一id
}

message Proto_CSRedEnvelopesOpenReq
{
	required uint64 uniq_red_envelopes_id = 1;	//	红包唯一id
	optional uint64 opener_role_id = 2;	// 打开人
}

message Proto_CSRedEnvelopesOpenRsp
{
	required EnRedEnvelopesOptionRet open_result = 1;	//	打开红包结果
	optional GuildRedEnvelopesInfo red_envelopes_info	= 2;	// 领取完后，红包数据，有可能会为空，因为有可能被删除了
	optional bool is_del = 3;	// 红包是否被删除，你就是最后一个领取红包的
	optional uint64 uniq_red_envelopes_id = 4;	//	红包唯一id
}

message Proto_CSRedEnvelopesGuildAllReq
{
	required uint64 send_role_id = 1;
	optional uint32 client_tag = 2; // 客户端使用
}

enum RedEnvelopesValid
{
	VALID = 0;		//	有效
	INVALID = 1; 	// 无效
}

message RedEnvelopesInfo
{
	required uint64 uniq_red_envelopes_id 				= 1;	// 红包唯一id
	required RedEnvelopesValid red_envelopes_state 		= 2;	// 红包状态
	optional uint32 coin_sum 							= 3;	// 金币总数
	optional string say_something 						= 4;	// 祝福语
	optional string sender_name 						= 5;	// 发送者名字
	optional uint32 get_cnt	 							= 6; 	// 领取计数
	optional uint32 total_cnt	 						= 7; 	// 红包拆分总数
	optional uint32 time								= 8;	// 红包的倒计时
	optional bool is_null								= 9;	// 红包是否已经被领光了(true 是灵光了)
}

message Proto_CSRedEnvelopesGuildAllRsp
{
	required uint64 rsp_timeStamp = 1;	//	请求列表时间
	repeated RedEnvelopesInfo red_envelopes_list = 2;	//	已领取的红包用户数
	optional uint32 client_tag = 3; // 客户端使用
}

// -------- 红包 end ——-------
message Proto_CSGuildWarScheduleListReq		
{
	required int32 week = 1; // = 5, 6, 7
}
message Proto_CSGuildWarScheduleListRsp		
{
	required int32 week = 1; 					// = 5, 6, 7
	optional GuildWarSchedule schedule = 2;
}
message Proto_CSGuildWarRankListReq		
{

}
message Proto_CSGuildWarRankListRsp		
{
	repeated GuildWarJoinGuild join_guild_list = 1;	//一次全发
}
message Proto_CSGuildWarChampionListReq		
{

}
message Proto_CSGuildWarChampionListRsp		
{
	repeated GuildWarChampion champion = 1;   //冠军信息
}
message Proto_CSGuildWarJoinReq		
{

}
message Proto_CSGuildWarJoinRsp		
{
	optional int32 result = 1; 
}
message Proto_CSGuildWarSetTeamReq		
{
	optional uint64 src_role_id = 1;		//交换者. src_role_id  dest_role_id均为0，表示一键配置
	optional int32 src_team_index = 2; //组编号，从0开始
	optional uint64 dest_role_id = 3;	//被交换者  = 0 表示无
	optional int32 dest_team_index = 4; //组编号，  -1表示换出
}
message Proto_CSGuildWarSetTeamRsp		
{
	optional uint64 src_role_id = 1;		//交换者
	optional int32 src_team_index = 2; //组编号，从0开始
	optional uint64 dest_role_id = 3;	//被交换者  = 0 表示无
	optional int32 dest_team_index = 4; //组编号，  -1表示换出
	optional int32 result = 5;
}
message Proto_CSGuildWarSetHeroReq		
{
	repeated GuildWarFormaion	 guildwar_formation = 1; //公会战-阵容（最多三组，每组2个英雄）
}
message Proto_CSGuildWarSetHeroRsp		
{
	repeated GuildWarFormaion	 guildwar_formation = 1; //公会战-阵容（最多三组，每组2个英雄）
}
message Proto_CSGuildWarConfirmReq		
{

}
message Proto_CSGuildWarConfirmRsp		
{
	optional int32 result = 1;
}
enum Proto_GuildWarNtfType
{
	EN_GUILDWAR_NTF_NONE 				= 0;
	EN_GUILDWAR_NTF_TEAM 				= 1;  //公会对战组信息
	EN_GUILDWAR_NTF_BATTLE 				= 2;	//
	EN_GUILDWAR_CLASH_SCORE				= 3;	//对抗双方比分更新
	EN_GUILDWAR_CLASH						= 4; //通知公会双方的所有人对战
	EN_GUILDWAR_CLASH_LIST				= 5; //当前的对阵表
	EN_GUILDWAR_ENTRY_ROLE				= 6;	//后台主动推送某个人确认资格
	EN_GUILDWAR_ENTRY_ROLE_LIST		= 7;	//前台请求和返回
	EN_GUILDWAR_TO_CONFIRM				= 8; //提示去确认资格
	EN_GUILDWAR_PLAYOFF					= 9; //通知进入季后赛
	EN_GUILDWAR_SYS_PLAYOFF_GUILD		= 10; //系统通知哪些队伍进入了季后赛
	EN_GUILDWAR_BATTLE_REWARD			= 11; //每场公会战斗结束时的额外奖励
};

message Proto_CSGuildWarQueryReq		
{
	required Proto_GuildWarNtfType type = 1;
}
message Proto_CSGuildWarNtf		
{
	required Proto_GuildWarNtfType type = 1;
	optional tbGuildWar guild_war = 2;
	repeated GuildWarTeam team_list = 3;
	optional GuildWarBattle battle = 4;
	repeated GuildWarClash clash = 5;
	repeated GuildWarEntryRole entry_role_list = 6;
	repeated GuildInfo guild_list = 7;
	optional bool confirm_login	= 8; //是否是因上线收到的资格确认消息
	repeated Item item_list = 9;
}

message Proto_CSGuildWarRoomEnterReq		
{
	optional uint64 room_id = 1;
	optional int32 clash_id = 2;
	optional int32 war_id = 3;	
}
message Proto_CSGuildWarRoomNtf		
{
	optional uint64 room_id = 1;
	optional int32 clash_id = 2;
	optional int32 war_id = 3;
}
/* 公会活动捐赠*/
message Proto_CSGuildActivityDonateReq		
{
	optional int32 activity_id = 1; //活动ID
	repeated Item item_list = 3;	//捐献的物品
}
message Proto_CSGuildActivityDonateRsp		
{
	optional int32 activity_id = 1; //活动ID
	repeated Item item_list = 2;	//捐献的物品
	required int32 result = 3; //执行结果
}
/*开启公会活动*/
message Proto_CSGuildActivityStartReq		
{
	optional int32 activity_id = 1; //活动ID
}
message Proto_CSGuildActivityStartRsp		
{
	optional int32 activity_id = 1; //活动ID
	required int32 result = 2; //执行结果
}

message Proto_CSGuildActivityChallengeReq		
{
	optional int32 activity_id = 1; //活动ID
}
message Proto_CSGuildActivityChallengeNtf		
{
	optional int32 activity_id = 1; //活动ID
	required int32 result = 2; //执行结果
}
message Proto_CSSubstitutionReq
{
	required int32 substitution_index = 1; //切换阵容中的第几组英雄上场(下标从0开始)
}

message Proto_CSSubstitutionRsp
{
	required int32 substitution_index = 1; //切换阵容中的第几组英雄上场(下标从0开始)
}

message Proto_CSCurrencyExchangeReq 
{
	required int32 id = 1;
	required int32 times = 2;
}
message Proto_CSCurrencyExchangeRsp 
{
	required int32 id = 1;
	required int32 times = 2;
	repeated int32 crit = 3; // 爆击 倍率
}


// -------------------------------------------------
enum enOBWatchFontColor
{
	EN_OB_WATCH_FONT_RED = 0;
	EN_OB_WATCH_FONT_GREEN = 1;
	EN_OB_WATCH_FONT_BLUE = 2;
	EN_OB_WATCH_FONT_WHITE = 3;

}
enum enOBWatchFontSize
{
	EN_OB_WATCH_FONT_NORMAL = 0;
	EN_OB_WATCH_FONT_SMALL = 1;
	EN_OB_WATCH_FONT_LARGE = 2;
}
message Proto_CSOBWatchMsg
{
	required string msg = 1[(yd_fieldoptions.field_bufsize)=64];
	optional enOBWatchFontColor color = 2;
	optional enOBWatchFontSize font_size = 3;
}

message Proto_CS1v1InviteReq 
{
	required uint64 to_role_id = 1;	//邀请谁
}
message Proto_CS1v1InviteNtf 
{
	required uint64 from_role_id = 1;	//谁邀请你
	optional string from_role_name = 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
}
message Proto_CS1v1InviteOPReq 
{
	required uint64 from_role_id = 1;	//谁邀请你
	required bool  agree  = 2;  //是否同意
}
message Proto_CS1v1InviteOPNtf 
{
	required uint64 to_role_id = 1;	//邀请谁

	required bool  agree  = 2;  //是否同意
	optional string to_role_name = 3[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
}

message Proto_CSMatchNtf
{
    required RoomMatchData match_data = 1; // 与登陆时的结构体共用 
}

message Proto_CSPickSceneDropObjReq
{
	required int32 id = 1; 
}
message Proto_CSPickSceneDropObjRsp
{
	required int32 id = 1; 
}


message CommentData
{
	required uint64 comment_id = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //评论ID
	optional string comment = 2 [(yd_fieldoptions.field_bufsize)=103, (yd_fieldoptions.field_string_len)=156]; //评论
	optional int32 time = 3; //点赞数目
	optional int32 bang = 4; //点赞数目
	repeated uint64 bang_player = 5[(yd_fieldoptions.field_arysize) = 65535]; //点赞过的玩家
	optional uint64 comment_player_id = 6;
	optional string comment_player_name = 7 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional int32 top_three_rank = 8; 
}
message Proto_CSCommentDataReq
{
	required int32 hero_id = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //英雄ID
}
message Proto_CSCommentDataNtf
{
	required int32 hero_id = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //英雄ID
	repeated CommentData comment_data = 2[(yd_fieldoptions.field_arysize) = 103];
}
message Proto_CSBangCommentReq
{
	required uint64 comment_id = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //评论ID
}
message Proto_CSBangCommentRsp
{
	required CommentData comment_data = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //评论
}
message Proto_CCommentHeroReq
{
	required int32 hero_id = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //英雄ID
	required string comment = 2[(yd_fieldoptions.field_bufsize)=156, (yd_fieldoptions.field_string_len)=156]; //评论
}

message Proto_CSHeroRankUpReq
{
	required int32 hero_id = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //英雄ID
}

message Proto_CSHeroRankUpRsp
{
	required int32 hero_id = 1[(yd_fieldoptions.field_type) = E_FIELDTYPE_PRIMARYKEY]; //英雄ID
}

message Proto_CSPlayerAutoFightReq
{
	required bool start_auto_fight = 1;
}

message Proto_CSPlayerAutoFightRsp
{
	required bool ret = 1;
	optional bool auto_fight = 2; //自动战斗状态
}

message Proto_CSGetPlayerCreditDataReq
{
	
}

message Proto_CSGetPlayerCreditDataRsp
{
	optional int32  punish_point    = 1; //惩罚点
	optional int32  credit_point    = 2; //信誉点
	optional uint64 ban_battle_time = 3; //剩余禁赛时间 ms
	optional uint64 ban_match_time  = 4; //剩余禁匹配时间 ms
}

message Proto_CSCreditReportPlayerReq
{

}

message Proto_CSCreditReportPlayerRsp
{

}

message Proto_GachaPonReq
{
}
message Proto_GachaPonRsp
{
	optional string ad_img = 1[(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64];;
	optional int32 item_id = 2;
	optional int32 item_num = 3;
	optional int32 itemten_id = 4;
	optional int32 itemten_num = 5;
}

enum enDrawType
{
	DRAW_ONE = 1;
	DRAW_TEN = 2; 
}
message Proto_CSDrawReq
{
	optional enDrawType draw_type = 1[default=DRAW_ONE];
}
message DrawItem
{
	optional int32 item_id = 1;
	optional int32 item_num = 2;
	optional int32 hero_id = 3;
	optional bool is_hero = 4;
}
message Proto_CSDrawRsp
{
	repeated DrawItem item = 1[(yd_fieldoptions.field_arysize) = 16];
}

message Proto_CSSynthesisReq
{
	optional int32 item_id = 1;
}
message Proto_CSSynthesisRsp
{
	optional int32 hero_id = 1;
}

message Proto_CSMiscDataNtf
{
	optional RoleMiscData role_misc_data = 1;
}


message Proto_CSHeroComposeReq
{
	required int32 hero_id = 1;
}

message Proto_CSHeroComposeRsp
{
	required int32 hero_id = 1;
}


message Proto_CSHeroPieceExchangeReq
{
	required int32 itemid = 1;         //万能碎片id
	required int32 exchange_num = 2;   //兑换数量
	required int32 heroid = 3;         //英雄碎片对应的英雄id
}

message Proto_CSHeroPieceExchangeRsp
{
	required int32 exchange_num = 1;
	required int32 heroid = 2;           //英雄碎片对应的英雄id
	required int32 total_piece_num = 3;  //英雄碎片总量
}

message Proto_CSNianPracticeChallengeReq
{
	required int32 hero_id = 1;
	required int32 nian_position = 2;
}
message Proto_CSNianPracticeReq
{
	required int32 hero_id = 1;
	required int32 nian_position = 2;
}
message Proto_CSNianPracticeRsp
{
	required int32 hero_id = 1;
	required int32 nian_position = 2;
	required enNianPracticeStatus nian_status = 3;
}
message Proto_CSNianPracticeDataNtf
{
	optional RoleNianPracticeData nian_practice	= 1; //玩家念修行数据 
}

enum enRoleScoreNtfType
{
    EN_ROLE_SCORE_NTF_TYPE_ALL  = 0;
	EN_ROLE_SCORE_NTF_TYPE_RUSH = 1;
}
//关卡数据推送
message Proto_CSRoleChapterScoreNtf
{
	optional RoleChapterScoreData role_chapter_score_data = 1; //玩家关卡数据 
	optional enRoleScoreNtfType   type                    = 2 [default = EN_ROLE_SCORE_NTF_TYPE_ALL];
}

message SupportPlayerInfo
{
	required uint64 role_id 				= 1; //角色唯一ID,AI的话为0
	required string name 					= 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
	required uint32 level					= 3; //角色等级
	required uint32 avatar_id				= 4; //指挥官头像
	repeated uint32	formation = 5 [(yd_fieldoptions.field_arysize)=8]; //阵容 
	repeated int32  skin_desc = 6 [(yd_fieldoptions.field_arysize)=8]; //阵容对应的皮肤
	required int32  index = 7; //索引标识
}

message Proto_CSQuerySupportListReq
{
	required uint64 battle_id = 1; //战斗ID
}

message Proto_CSQuerySupportListRsp
{
	required uint64 battle_id = 1; //战斗ID
	repeated SupportPlayerInfo support_list = 2; //援助列表
}

message Proto_CSCallSupportReq
{
	required uint64 battle_id = 1; //战斗ID
	required int32 support_index = 2; //第几个support
}

message Proto_CSCallSupportNtf
{
	required uint64 battle_id = 1; //战斗ID
	required int32 support_index = 2; //第几个support
	required uint64 role_id = 3; //角色ID
	required SupportPlayerInfo support = 4;//援助信息
}

message CSSupportInviteFriend
{
	required uint64 friend_id = 1; //目标RoleID
	required uint64 battle_id = 2; //战斗ID	
	required enBattleType type = 3; //队伍类型
	required int32 map_desc_id = 4; //地图资源ID
}

message CSSupportReplyInvite
{
	required uint64 inviter_id = 1; //邀请人ID
	required uint64 battle_id = 2; //战斗ID	
	required enBattleType type = 3; //队伍类型
	required int32 map_desc_id = 4; //地图资源ID
	required int32 result = 5; //0:同意 1:不同意
}

message CSSupportInviteFriendRsp
{
	required uint64 friend_id = 1;//好友ID
	required uint64 battle_id = 2; //战斗ID	
	required enBattleType type = 3; //队伍类型
	required int32 map_desc_id = 4; //地图资源ID
	required int32 result = 5; //0:同意 1:不同意
}

message CSSupportReplyInviteRsp
{
	required uint64 inviter_id = 1;//邀请者ID
	required uint64 battle_id = 2; //战斗ID	
	required enBattleType type = 3; //队伍类型
	required int32 map_desc_id = 4; //地图资源ID
}

message CSSupportInviteNotify
{
	required uint64 inviter_id = 1; //邀请者名字
	required string inviter_name = 2[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //邀请者名字
	required uint64 battle_id = 3; //战斗ID	
	required int32 map_desc_id = 4; //地图资源ID
	required enBattleType type = 5; //类型
	required int32 inviter_avatar_id = 6;//头像
}

message CSTeamHalfwayJoinBattleInviteNtf
{
	required uint64 team_id = 1; //队伍Id
	required int32 map_desc_id = 2; //地图ID
	required enBattleType battle_type = 3; //战斗类型
	required uint64 leader_role_id = 4; //队伍队长ID
	required string team_leader_name = 5[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //队长名字
	required int32 team_leader_avatar_id = 6;//头像
	required int32 team_leader_hero_id = 7;//英雄ID
}

message CSTeamReplyHalfwayJoinBattleInviteReq
{
	required uint64 team_id = 1; //队伍Id
	required enBattleType battle_type = 2; //战斗类型
	required uint64 leader_role_id = 3; //队伍队长ID
}

message CSTeamReplyHalfwayJoinBattleInviteRsp
{
	required uint64 team_id = 1; //队伍Id
	required enBattleType battle_type = 2; //战斗类型
	required uint64 leader_role_id = 3; //队伍队长ID
}

message Proto_CSClientBackgroundReq
{

}

message Proto_CSClientForegroundReq
{

}


//-------------------------------------主城相关协议 Begin------------------------------------------------------------------------------
//---------------------------- Client <-> MapSvr Begin------------------------------------------
message Proto_CSMapEnterReq
{
	required int32 map_desc_id = 1;     //地图id, 0表示上次记录的地图
	optional uint64 map_obj_id = 2;     //地图实例id
}

message Proto_CSMapEnterRsp
{
	required int32 result = 1;              //
	required RoleMapData map_data = 2;      //地图id
	optional int32 obj_id = 3;			    //对象id
	optional CSViewOne self_view = 4;       //自己的视野
}


message Proto_CSMapLeaveReq
{
	required int32 map_desc_id = 1;  //地图id
}


message Proto_CSMapLeaveRsp
{
	required int32 result = 1;       
}

enum enMapActionType
{
	EN_MAP_ACTION_TYPE_MOVE = 1;    //移动相关
	EM_MAP_ACTION_TYPE_COLLECT = 2;   //采集
}


message Proto_CSMapActionReq
{
	required Proto_PvpSynAction action = 1;  
	optional int32 obj_id = 2;					//对象id
	optional enMapActionType action_type = 3;   //动作类型: 移动、采集
	optional int32 collect_npc_obj_id = 4;      //采集 npc id
}


message Proto_CSMapActionRsp
{
	required int32 result = 1; 
	optional int32 obj_id = 2;					//对象id
}


message Proto_CSMapActionNtf
{
	required int32 obj_id = 1;      //玩家对象id
	required Proto_PvpSynAction action = 2;    
}


message Proto_CSMapPosReq
{
	required Proto_CSActorPosReq actor_pos_req = 1;
}

message Proto_CSMapPosResetNtf
{
	required Proto_CSActorMoveReset move_reset = 1;
}

message Proto_CSMapSvrLoginReq
{
	required int64 role_id = 1;     //角色roleid
}

message Proto_CSMapSvrLoginRsp
{
	required uint64 role_id				   = 1;
	required uint64 server_time            = 2;
	optional int32 obj_id                  = 3;
}


message Proto_CSMapRefreshViewNtf
{
	required int32 reason = 1; //更换皮肤，队长改变..
	repeated CSViewOne view_list = 2;   //对象列表
	optional int32 map_id = 3; //地图id
}


message Proto_CSMapCollectReq
{
	optional int32 collect_npc_obj_id = 1;      //采集 npc obj id
}

message Proto_CSMapCollectRsp
{

}


// 发给双方拜师是否成功
// 确定：发给师傅和徒弟，分别是对方的名字和id
// 取消：发给师傅，徒弟的名字和id
message Proto_SCMasterResultNtf
{
	optional uint64 role_id					= 1;
	optional string name 					    = 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional bool is_success					= 3;	// false为拒绝成为弟子    true为成功成为弟子
}

message SingleMasterInfo
{
	optional uint64 role_id					= 1;
	optional string name 					    = 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional enProfessionType type				= 3[default=EN_PROFESSION_A];
	optional int32 lv							= 4;
	optional int32 transfer_id                  = 5;  //转职ID
}
enum enMasterIntroduceType
{
	EN_MASTER_INTRODUCE_NONE	= 1;
	EN_MASTER_INTRODUCE_FRIEND	= 2;
	EN_MASTER_INTRODUCE_GUILD	= 3;
}

message SingleMasterNeedPlayer
{
	optional uint64 role_id						= 1;
	optional string name 					    = 2;
	optional enProfessionType type				= 3[default=EN_PROFESSION_A];
	optional int32 lv							= 4;
	optional string guild_name 					= 5;	// 行会名
	optional string find_master_sign			= 6;	// 收徒宣言
	optional uint64 guild_id					= 7;	// 行会id
	optional enMasterIntroduceType intro_type	= 8[default=EN_MASTER_INTRODUCE_NONE];
	optional bool is_apply						= 9;	// 是否申请过
	optional int32 transfer_id                  = 10;   // 转职ID
}

// 获取寻师列表或者徒弟列表
message Proto_CSMasterGetNeededPlayerReq
{
	optional bool is_master						= 1;	// true为获取寻师列表，false为寻徒列表
	optional int32 index						= 2;	// 
	optional int32 last_count					= 3;	// 后端在rsp里面给的，index为1的时候，就发0
}
message Proto_SCMasterGetNeededPlayerRsp
{
	optional bool is_master						= 1;	// true为获取寻师列表，false为寻徒列表
	repeated SingleMasterNeedPlayer player_info = 2;
	optional bool is_last						= 3;	// 是否是最后的页码
	optional int32 last_count					= 4;	// 下一次req里面传给后端
}

message ClientMasterApplyPlayer
{
	optional uint64 role_id						= 1;
	optional string name 					    = 2;
	optional enProfessionType type				= 3[default=EN_PROFESSION_A];
	optional int32 lv							= 4;
	optional string guild_name 					= 5;	// 行会名
	optional uint64 guild_id					= 6;	// 行会id
	optional bool is_master						= 7;	// 是否是申请做师傅，false为做徒弟
	optional int32 transfer_id                  = 8;    // 转职ID
}

// 获取申请列表
message Proto_CSMasterGetApplyListReq
{
	optional bool is_open						= 1;	// 判断是否是客户端打开了界面，用于红点显示
}
message Proto_SCMasterGetApplyListRsp
{
	repeated ClientMasterApplyPlayer apply_player = 1;
	optional bool is_dirty						  = 2;	// 红点显示用
}

// 清空申请列表
message Proto_CSMasterClearApplyListReq
{
}
message Proto_SCMasterClearApplyListRsp
{
}

// 响应申请
message Proto_CSMasterOperateApplyReq
{
	optional bool is_master						= 1;	// true为拜师，false为收徒
	optional uint64 role_id						= 2;
}
message Proto_SCMasterOperateApplyRsp
{
	optional bool is_master						= 1;	// true为拜师，false为收徒
	optional uint64 role_id						= 2;
	optional bool is_success					= 3;	// true为操作成功
}

// 申请拜师或者收徒
message Proto_CSMasterApplyReq
{
	optional bool is_master						= 1;	// true为拜师，false为收徒
	optional uint64 role_id						= 2;
}
message Proto_SCMasterApplyRsp
{
	optional bool is_master						= 1;	// true为拜师，false为收徒
	optional uint64 role_id						= 2;
}

// 推送给对方有人申请你做师傅或者徒弟 
message Proto_SCMasterApplyNtf
{
	optional bool is_master						= 1;	// true为拜师，false为收徒
	optional uint64 role_id						= 2;	// 申请者的id
}

// 修改状态或者公告
message Proto_CSMasterModifyReq
{
	optional bool is_find						= 1;	// 是否需要寻找弟子
	optional string master_sign					= 2;
}
message Proto_SCMasterModifyRsp
{
}

// 解散关系
message Proto_CSMasterLeaveReq
{
	optional uint64 role_id						= 1;
}
message Proto_SCMasterLeaveRsp
{
	optional uint64 role_id						= 1;
}

// 同门推荐
message Proto_SCMasterRecommendNtf
{
	repeated SingleMasterInfo friend_info		= 1;
}

// 获取教学任务(师傅和徒弟共用一个协议)
// 如果师傅没有布置任务，那么会返回空的列表
message Proto_CSMasterGetTeachTaskReq
{
}
message SinglePlayerTaskInfo
{
	optional uint64 time						= 1;	// 任务倒计时(0时表示还没有提交任务)
	optional uint64 role_id						= 2;	// 师傅/徒弟id
	optional string name 						= 3 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	repeated SingleTaskInfo task				= 4;	// 所有的任务
	optional bool is_up_task					= 5;	// 是否提交了任务
	optional bool is_get_final					= 6;	// 是否获取最终奖励
	optional uint64 ce							= 7;	// 战斗力
	optional enProfessionType type				= 8[default=EN_PROFESSION_A];
	optional int32 lv							= 9;
	optional int32 teach_score					= 10;	// 教学成绩
	optional int32 logout_time					= 11;	// 玩家离线时间，0为在线，其他为下线的时间
	optional int32 transfer_id              	= 12;    //转职ID
	
}
message Proto_SCMasterGetTeachTaskRsp
{
	repeated SinglePlayerTaskInfo info			= 1;
}

// 布置任务
message Proto_CSMasterSetTaskReq
{
	optional uint64 role_id						= 1;
}
message Proto_SCMasterSetTaskRsp
{
	optional int32 result						= 1;	// 结果
	optional uint64 role_id						= 2;
}

// 更新任务进度
message Proto_SCMasterTaskUpdateNtf
{
	optional uint64 role_id						= 1;
	optional SingleTaskInfo info				= 2;
}

// 上交任务
message Proto_CSMasterUpTaskReq
{
}
message Proto_SCMasterUpTaskRsp
{
	optional int32 result						= 1;	// 结果
}

// 领取最终奖励(师傅和徒弟都用这个)
message Proto_CSMasterGetTeachRewardReq
{
	optional uint64 role_id						= 1;	// 师傅领取谁的奖励
}
message Proto_SCMasterGetTeachRewardRsp
{
	optional uint64 role_id						= 1;
}

// 获取教学成果(师傅和徒弟都用这个)
message Proto_CSMasterGetTeachResultReq
{
}
message SingleTeachResultInfo
{
	optional uint64 role_id						= 1;	// 师傅/徒弟id
	optional string name 						= 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	repeated SnsStudyAchievement task			= 3;	// 所有的成果
	optional uint64 ce							= 4;	// 战斗力
	optional enProfessionType type				= 5[default=EN_PROFESSION_A];
	optional int32 lv							= 6;
	optional int32 transfer_id              	= 7;    //转职ID
}
message Proto_SCMasterGetTeachResultRsp
{
	repeated SingleTeachResultInfo info			= 1;
}

// 更新成果进度
message Proto_SCMasterResultUpdateNtf
{
	optional uint64 role_id						= 1;
	optional SnsStudyAchievement info			= 2;
}

// 领取成果奖励(师傅和徒弟都用这个)
message Proto_CSMasterGetResultRewardReq
{
	optional uint64 role_id						= 1;	// 师傅领取谁的奖励
	optional int32 id							= 2;	// 成果id
}
message Proto_SCMasterGetResultRewardRsp
{
	optional int32 id							= 1;	// 成果id
	optional int32 result						= 2;
	optional uint64 role_id						= 3;	// 师傅领取谁的奖励
}

// 获取教学成绩(师傅和徒弟都用这个)
message Proto_CSMasterGetTeachScoreReq
{
}
message SinglePlayerTeachScoreInfo
{
	optional uint64 role_id						= 1;	// 师傅/徒弟id
	optional string name 						= 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional int32 score						= 3;	// 教学成绩
}
message Proto_SCMasterGetTeachScoreRsp
{
	repeated SinglePlayerTeachScoreInfo info	= 1;
}

// 通知客户端弹评价框
message Proto_SCMasterShouldJudgeNtf
{
}

// 评价
message Proto_CSMasterJudgeReq
{
	optional enApprenticeJudgeType type			= 1[default=EN_JUDGE_NO_HELP]; 
}

// 请求结业
message Proto_CSMasterFinishStudyReq
{
}

// 通知师傅或者徒弟已经结业
message Proto_SCMasterFinishStudyNtf
{
	optional uint64 role_id						= 1;	// 师傅/徒弟id
	optional string name 						= 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
}

//---------------------------- Client <-> MapSvr End------------------------------------------
//---------------------------- Client <-> GameSvr Begin---------------------------------------
message Proto_CSMapQueryReq
{
	required int32 map_desc_id  = 1; //地图ID
	required int32 trans_npc_id = 2; //传送npc id, 登录后第一次请求填0
	optional int32 trans_id     = 3; //传送点id
	optional bool  use_point    = 4;
	optional int32 x_point      = 5;
	optional int32 y_point      = 6;
	optional int32 z_point      = 7;
}

message Proto_CSMapQueryRsp
{
	required int32 map_desc_id = 1;    //地图id
	optional int32 index = 2;          //分线
	required uint32 map_svr_ip = 3;
	required uint32 map_svr_port = 4;
	optional int32 map_obj_id = 5;     //地图objid
	required RoleMapData map_data = 6; //地图坐标信息
	optional string map_svr_url = 7;   //地图服务器url 
}


message Proto_CSMapTransNtf
{
	required int32 map_desc_id = 1;    //地图id
	optional int32 index = 2;          //分线
	required uint32 map_svr_ip = 3;
	required uint32 map_svr_port = 4;
	optional int32 map_obj_id = 5;   //地图objid
}


//---------------------------- Client <-> GameSvr End------------------------------------------
//-------------------------------------主城相关协议 End--------------------------------------------------------------------------------


message Proto_CSSealedPlayerNtf
{
	optional uint32 sealed_time = 1; //封停截止时间
	optional string reason      = 2;
}

message Proto_CSEscortQueryReq
{
	optional uint32 protect_difficulty = 1; //护送难度
}

message Proto_CSEscortQueryRsp
{    
	optional uint32 escort_id = 1; //任务ID
}

message Proto_CSEscortAcceptReq
{    
	optional uint32 escort_id = 1; //任务ID
}

message Proto_CSEscortAcceptRsp
{    
}

enum enEscortErrorCode
{
	EN_ERR_CODE_ESCORT_IN_QUEST                            = 1; //在任务中
	EN_ERR_CODE_ESCORT_COMPLETE                            = 2; //已经完成三次任务
	EN_ERR_CODE_ESCORT_LEVEL                               = 3; //等级不够
	EN_ERR_CODE_ESCORT_FIGHT_FAILED                        = 4; //任务战斗失败
	EN_ERR_CODE_ESCORT_COMPLETE_HEIGHT                     = 5; //高级护送已经完成三次任务
	EN_ERR_CODE_ESCORT_LEVEL_HEIGHT                        = 6; //高级护送等级不够
	EN_ERR_CODE_ESCORT_IN_TEAM                             = 7; //在队伍中
	EN_ERR_CODE_ESCORT_MONEY                               = 8; //钱不够
}
message Proto_CSEscortErrorRsp
{
	optional enEscortErrorCode err_code = 1;
}

message Proto_CSEscortFaildNtf
{
}

message Proto_CSEscortCompleteReq
{
}

message Proto_CSEscortCompleteRsp
{    
}

enum EscortDataNtfScene
{
	EN_BATTLE_FAILD = 1; //战斗失败
	EN_BATTLE = 2; //战斗胜利
	EN_ACCEPT_ESCORT = 3; //接受护送任务
	EN_GIVE_UP = 4; //放弃任务
	EN_COMPLETE = 5; //完成任务
	EN_UPDATE_ESCORT_DATA = 6; //刷新护送数据
}
message Proto_CSEscortDataNtf
{
	optional RoleEscortData escort_data	= 1; //护送数据
	optional EscortDataNtfScene escort_data_ntf_scene = 2; //推送护送数据的场景
}

message Proto_CSBagGridArrangeRsp 
{
	required int32          storage_page = 1;
	repeated ItemGridCSData grid_list = 2;
}

message Proto_CSStorageMoveReq
{
	required int32 storage_page = 1; // -99 用于临时背包
	optional int32 grid_index = 2;
	optional int32 item_id  = 3;
	optional uint64 item_num = 4;
	optional uint64 uuid = 5;
    optional bool pick_all_items = 6; // 取临时背包物品时,可以全部提取. (storage_page == -99)
}
message Proto_CSStorageMoveRsp
{
	required int32 storage_page = 1;
	required int32 grid_index = 2;
	optional BagPage storage_info = 3;
	//repeated ItemGrid    grid_list = 4;
}

message Proto_CSStorageThrowMsg
{
    required int32  page = 1;
	required int32 grid_index = 2;
	required uint32 item_id  = 3;
	required uint64 item_num = 4;
	required uint64 uuid = 5;
}

message Proto_CSUseTreasureMapReq
{
	required uint64 treasuremap_id = 1; //藏宝图ID
}
enum enTreasureMapStatus
{
	EN_SITE_WRONG = 0; //坐标错误
	EN_MONEY = 1; //得银
	EN_PUNISH = 2; //惩罚
	EN_TREASURE = 3; //得宝
	EN_COPY = 4; //副本
}
message Proto_CSUseTreasureMapRsp
{
	required enTreasureMapStatus status = 1; //挖宝事件
	optional Proto_CSRoleItemNtf item = 2;   //挖宝所得
}

// 请求玩家的空间基础信息
message Proto_CSZoneBaseInfoReq
{
	optional uint64 role_id									= 1;	// 请求查看的玩家的id
}

message Proto_CSZoneBaseInfoRsp
{
	optional uint64 role_id									= 1;																				// 请求查看的玩家的id
	optional string name 									= 2 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; 	// 角色名
	optional int32 level									= 3;	
	optional enProfessionType profession					= 4 [default=EN_PROFESSION_NONE];													// 职业
	optional int32 title_id									= 5;																				// 称号id
	optional string signature 								= 6 [(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64]; 	// 签名	
	optional string guild_name								= 7 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; 	// 公会名字
	optional string be_name 								= 8 [(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; 	// 曾经用过的角色名
	optional uint32 avatar_id								= 9; 																				// 头像
	optional int32 count									= 10; 																				// 没有查看的通知数
	optional int32 heroid									= 11;
	optional int32 cur_skin									= 12; 																				// 当前使用的皮肤
	repeated int32 cur_emblem								= 13[(yd_fieldoptions.field_arysize) = 3]; 											// 当前使用的徽章
	optional int32 cur_effect								= 14; 																				// 当前使用的挂件
	repeated int32 all_emblem								= 15[(yd_fieldoptions.field_arysize) = 100];										// 所有的徽章
	repeated int32 fashions          						= 16 [(yd_fieldoptions.field_arysize) = 4];
}

// 选择空间装饰
message Proto_CSZoneDesignAddReq
{
	optional int32 cur_skin							= 1; // 当前使用的皮肤
	repeated int32 cur_emblem						= 2[(yd_fieldoptions.field_arysize) = 3]; // 当前使用的徽章
	optional int32 cur_effect						= 3; // 当前使用的挂件
}
message Proto_GCZoneDesignAddRsp
{
	optional int32 result							= 1;
}

// 一个玩家的状态信息
message SingleZoneFriendStatus
{
	optional ZoneRoleDetailInfo role_info					= 1;
	optional MyZoneStatusInfo info							= 2;	// 发布的状态
	optional bool is_up										= 3;	// 我自己是否点赞过 
}

// 请求我的好友圈状态(3个点赞和3评论)(分段获取)
message Proto_CSZoneFriendStatusReq
{
	optional int32 begin									= 1;	// 起始数
	optional int32 end										= 2;	// 结束数
}

message Proto_CSZoneFriendStatusRsp
{
	repeated SingleZoneFriendStatus info					= 1;
}

// 请求玩家的所有的状态(3个点赞和3评论)(分段获取)
message Proto_CSZoneRoleStatusReq
{
	optional uint64 role_id									= 1;
	optional int32 begin									= 2;	// 起始数
	optional int32 end										= 3;	// 结束数
}

message Proto_CSZoneRoleStatusRsp
{
	repeated SingleZoneFriendStatus info				    = 1;
}

// 请求发布状态
message Proto_CSZonePublishStatusReq
{
	optional string content									= 1;	// 状态的内容
	optional int32 photo_count								= 2;	// 图片数量
	optional bytes item_content								= 3[(yd_fieldoptions.field_bufsize)=512];	// 前端使用的物品链接,ZoneItemContent序列后
}

message Proto_CSZonePublishStatusRsp
{
	optional MyZoneStatusInfo info   						= 1;
}

// 请求上传图片
message Proto_CSZoneUploadPhotosReq
{
	optional ZoneStatusSmallPhoto small_photos				= 1;	// 缩略图片
	optional ZoneStatusPhoto photos							= 2;	// 原图
	optional uint64 uuid									= 3;	// 所属状态的id
}

message Proto_CSZoneUploadPhotosRsp
{
	optional int32 result			   						= 1;	// 结果
	optional uint64 uuid									= 2;	// 所属状态的id
}

message SingleZoneStatusPhotoReq
{
	optional uint64 role_id									= 1;	// 谁的状态
	optional uint64 id										= 2;	// 状态id
	optional uint64 photo_id								= 3;	// 图片的唯一id
}

message SingleClientSmallPhoto
{
	optional ZoneStatusSmallPhoto photos					= 1;
	optional SingleZoneStatusPhotoReq info					= 2;
}

message SingleClientPhoto
{
	optional SingleZoneStatusPhoto photos					= 1;
	optional SingleZoneStatusPhotoReq info					= 2;
}

// 主动推送缩略图给前端
message Proto_SCZoneStatusSmallPhotosNtf
{
	repeated SingleClientSmallPhoto role_photos				= 1;
}

// 请求单张原图
message Proto_CSZoneStatusGetPhotosReq
{
	optional SingleZoneStatusPhotoReq role_photo			= 1;
}

message Proto_CSZoneStatusGetPhotosRsp
{
	optional SingleClientPhoto role_photo					= 1;
}

// 请求单条状态的详细信息
message Proto_CSZoneStatusDetailReq
{
	optional uint64 uuid									= 1;	// 状态的唯一id
	optional uint64 role_id									= 2;	// 谁的状态
}

message Proto_CSZoneStatusDetailRsp
{
	optional SingleZoneFriendStatus info   					= 1;
}

// 请求所有的点赞信息
message Proto_CSZoneStatusUpInfoReq
{
	optional uint64 uuid									= 1;	// 状态的唯一id
	optional uint64 role_id									= 2;	// 谁的状态
}

message Proto_CSZoneStatusUpInfoRsp
{
	repeated ZoneRoleInfo info   							= 1;
	optional int32 result 									= 2[default=0];    // 返回结果 
}

// 请求评论信息(分段获取)
message Proto_CSZoneStatusNotesInfoReq
{
	optional uint64 role_id									= 1;	// 谁的状态
	optional uint64 uuid									= 2;	// 状态的唯一id
	optional int32 begin									= 3;	// 起始数
	optional int32 end										= 4;	// 结束数
}

message Proto_CSZoneStatusNotesInfoRsp
{
	repeated MyZoneNotesInfo info   						= 1;
	optional int32 result 									= 2[default=0];    // 返回结果 
}

// 请求对别人点赞（内容和回复对象为空时）或者评论
message Proto_CSZoneNoteStatusReq
{
	optional uint64 role_id									= 1;	// 谁的状态
	optional uint64 uuid									= 2;	// 状态的唯一id
	optional uint64 target_id								= 3;	// 回复的对象 
	optional string content									= 4;	// 评论的内容
}

message Proto_CSZoneNoteStatusRsp
{
	optional MyZoneNotesInfo info							= 1;
	optional ZoneRoleInfo up_info   						= 2;
	optional int32 result 									= 3;    // 返回结果 
	optional uint64 uuid									= 4;	// 状态的唯一id
	optional uint64 role_id									= 5;	// 谁的状态
}

// 请求删除点赞（填充target_id）和评论（自己的或者对别人的,填充note_id）
message Proto_CSZoneDeleteNoteReq
{
	optional uint64 uuid									= 1;	// 状态的唯一id
	optional uint32 note_id									= 2;	// 评论的id 
	optional uint64 role_id									= 3;	// 谁的状态 
	optional uint64 target_id								= 4;	// 删除点赞的玩家 
}

message Proto_CSZoneDeleteNoteRsp
{
	optional int32 result									= 1;
	optional uint64 uuid									= 2;	// 状态的唯一id
	optional uint32 note_id									= 3;	// 评论的id 
	optional uint64 role_id									= 4;	// 谁的状态 
	optional uint64 target_id								= 5;	// 删除点赞的玩家 
}

// 请求删除状态
message Proto_CSZoneDeleteStatusReq
{
	optional uint64 uuid									= 1;	// 状态的唯一id
}

message Proto_CSZoneDeleteStatusRsp
{
	optional int32 result									= 1;
	optional uint64 uuid									= 2;	// 状态的唯一id
}

// 请求查看留言板(分段获取)
// 起始为1会发送留言以外的信息
message Proto_CSZoneMessageBoardReq
{
	optional uint64 role_id									= 1;
	optional int32 begin									= 2;	// 起始数
	optional int32 end										= 3;	// 结束数
}

message Proto_CSZoneMessageBoardRsp
{
	repeated MyZoneMessageInfo info							= 1;
	optional int32 set_gift									= 2;	// 放置礼物数量
	optional int64 hot_degree								= 3;	// 人气
	optional int64 receive_gift								= 4;	// 收到的礼物数
}

// 请求踩空间
message Proto_CSZoneStepOnReq
{
	optional uint64 role_id									= 1;
}

message Proto_CSZoneStepOnRsp
{
	optional int64 hot_degree								= 1;	// 人气
	repeated Item drop_id									= 2;
}

// 请求放置礼物
message Proto_CSZoneSetGiftReq
{
	optional int32 gift_count								= 1;
}

message Proto_CSZoneSetGiftRsp
{
	optional int32 gift_count								= 1;
}

// 请求留言
// 赠送礼物时，没有附加留言，客户端自己组默认的留言
message Proto_CSZonePublishMessageReq
{
	optional uint64 role_id									= 1;	// 谁的留言板
	optional uint64 target_id								= 2;	// 回复的对象 
	optional string content									= 3;	// 评论的内容
	optional Item give_gift									= 4;	// 给礼物
	optional bytes item_content								= 5[(yd_fieldoptions.field_bufsize)=512];	// 前端使用的物品链接,ZoneItemContent序列后
}

message Proto_CSZonePublishMessageRsp
{
	optional MyZoneMessageInfo info							= 1;
}

// 请求删除留言（自己的或者对别人的）
message Proto_CSZoneDeleteMessageReq
{
	optional uint64 role_id									= 1;	// 要删除谁的留言板的留言
	optional uint64 id										= 2;	// 留言的唯一id
}

message Proto_CSZoneDeleteMessageRsp
{
	optional int32 result									= 1;
	optional uint64 id										= 2;	// 留言的唯一id
	optional uint64 role_id									= 3;	// 要删除谁的留言板的留言
}

// 请求获得礼物记录
message Proto_CSZoneGetGiftRecordReq
{
	optional uint64 role_id									= 1;
}

message Proto_CSZoneGetGiftRecordRsp
{
	repeated MyZoneMessageInfo gift_role					= 1;
	optional uint64 role_id									= 2;
}

// 请求获得人气记录 
message Proto_CSZoneAddHotRecordReq
{
	optional uint64 role_id									= 1;
}

message Proto_CSZoneAddHotRecordRsp
{
	repeated ZoneAddHotRecord add_hot_role					= 1;  // 给我加了人气的记录
	optional uint64 role_id									= 2;
}

// 个人空间请求删除礼物记录 
message Proto_CSZoneDeleteGiftRecordReq
{
	optional int32 index									= 1;  // 序号(0开始)
}

message Proto_CSZoneDeleteGiftRecordRsp
{
	optional int32 index									= 1;
	optional int32 result									= 2;	// 返回码
}

// 个人空间请求未查看的评论记录 
message Proto_CSZoneGetNoReadRecordReq
{
}

message Proto_CSZoneGetNoReadRecordRsp
{
	repeated MyZoneNotesHistory record						= 1;	// 是顺序的（从time字段时间小的到时间大的）
}

// 通知评论了你的状态,或者点赞(内容为空)
message Proto_SCZoneRoleNoteYouNtf
{
	optional int32 no_read_count							= 1;
}

// 通知回复了你的评论
message Proto_SCZoneRoleReplyYouNtf
{
	optional int32 no_read_count							= 1;
}

// 通知有你的留言
message Proto_SCZoneRoleMessageNtf
{
	optional int32 no_read_count							= 1;
}

// 通知回复了你的留言
message Proto_SCZoneRoleReplyMessageNtf
{
	optional int32 no_read_count							= 1;
}

// 修改玩家基本信息
// 日期必须是：2017/04/09
message Proto_CSModifyRoleInfoReq
{
	optional Birthday birthday				= 1; // 本人生日
	optional enSexType sex					= 2[default=EN_SEX_HANDSOME]; 																			// 本人性别
	optional string	location				= 3[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; // 所在省市
	optional string signature 				= 4[(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64]; // 签名
}

message Proto_CSModifyRoleInfoRsp
{
	optional Proto_RoleSimpleInfo info		= 1;
}

enum enRetriveCostType
{
	EN_RETRIVE_COST_TYPE_GOLD = 1;     //金币
	EN_RETRIVE_COST_TYPE_DIAMON = 2;   //粉钻
}


message Proto_CSExpRetriveReq
{
	optional int32 type = 1;    //消耗类型  
	optional int32 num = 2;     //精力数量
}

message Proto_CSExpRetriveRsp
{
	optional int32 left_num = 2;     //剩余精力数量
}

message Proto_CSAwardRetriveReq
{
	optional int32 type = 1;         //消耗类型  
	optional int32 activity_id = 2;  //活动id
	optional int32 count = 3;        //找回次数
}

message Proto_CSAwardRetriveRsp
{
	optional int32 activity_id = 1;  //活动id
	optional int32 left_count = 2;   //剩余找回次数
}

message Proto_CSRetriveDataNtf
{
	optional RoleRetriveData data = 1;
}

enum enGachaBuyType
{
	EN_GACHA_BUY_ONE = 1;
	EN_GACHA_BUY_TEN = 2;
}

message Proto_CSGachaBuyReq
{
	optional int32 type = 1;    //购买类型
	optional int32 id = 2;
}

message Proto_CSGachaBuyRsp
{
	optional int32 type = 1;    //购买类型
	optional int32 id = 2;
	repeated Item item = 3; 
}

message Proto_CSGachaRecordReq
{
	optional int32 last_seq = 1;
}

message Proto_CSGachaRecordRsp
{
	repeated GachaRecordOne record = 1;
	optional int32 max_seq = 2;
}


//-生活技能相关协议- start
message Proto_CSGetLifeSkillDataReq
{

}

message Proto_CSGetLifeSkillDataRsp
{

}

message Proto_CSLifeSkillDataNtf
{
	repeated LifeSkillOne life_skill_list = 1; //生活技能数据
}

message Proto_CSLifeSkillLevelUpReq
{
	required enLifeSkillType type          = 1; //要升级的生活技能类型
	optional int32           use_item_type = 2; //使用物品类型1: 货币 2: 代替品
	required bool            use_once      = 3; //1：提升一次 2：提升至下一级
}

message Proto_CSLifeSkillLevelUpRsp
{
	required enLifeSkillType    type          = 1; //升级的生活技能类型
	optional int32              use_item_type = 2; //使用的物品类型1：货币 2：代替品
	optional int32              up_times      = 3; //提升次数
	optional int32              add_levels    = 4; //提升的等级
	optional int32              add_exp       = 5; //增加的经验 一点经验对应一次进度提升
	repeated Item               use_item_list = 6; //消耗的物品
	optional Proto_CS_ErrorCode ret           = 7[default = ERR_CODE_OK]; //结果
}

message Proto_CSUseLifeSkillReq
{
	required enLifeSkillType type              = 1; //要使用的生活技能类型
	optional int32           use_item_type     = 2; //使用物品类型1: 货币 2: 代替品
	repeated Item            use_item_list     = 3; //消耗物品选择（根据功能选用）
	repeated Item            product_item_list = 4; //要生产的物品（根据功能选用）
}

message Proto_CSUseLifeSkillRsp
{
	required enLifeSkillType    type              = 1; //使用的生活技能类型
	optional int32              use_item_type     = 2; //使用的物品类型1：货币 2：代替品
	repeated Item               use_item_list     = 3; //消耗的物品
	repeated Item               product_item_list = 4; //生产的物品
	optional int32              alchemy_ratio     = 5; //炼金倍率
	optional Proto_CS_ErrorCode ret               = 6[default = ERR_CODE_OK]; //结果  
	optional Proto_CSRoleItemNtf add_item         = 7; //生成的物品
}

//-生活技能相关协议- end

enum enSkillLevelUpType
{
	EN_SKILL_LEVELUP_TYPE_ONE = 3;       //单次升级
	EN_SKILL_LEVELUP_TYPE_ALL = 4;       //一键升级
}

//技能升级、降级
message Proto_CSSkillLevelUpReq
{
	required enSkillLevelUpType type = 1;
	repeated SkillIDLevel skill_id = 2 [(yd_fieldoptions.field_arysize) = 10];     //技能id
}

message Proto_CSSkillLevelUpRsp
{
	required HeroSkillData skill_data = 1;   //技能信息
}

enum enSkillDataChgReason
{
	EN_SKILL_DATA_CHG_UPGRADE = 1;       //技能升级
	EN_SKILL_DATA_CHG_AWAKE = 2;         //技能觉醒 （任务完成觉醒）
	EN_SKILL_DATA_CHG_AWAKE_RESET = 3;   //技能觉醒重置
	EN_SKILL_DATA_CHG_ATTACH = 4;        //镶嵌技能
	EN_SKILL_DATA_SELECT_TALENT = 5;     //选择天赋
	EN_SKILL_DATA_CHG_REAWAKE = 6;       //技能重新觉醒 （重置后重新觉醒）
}


message Proto_CSSkillDataNtf
{
	required HeroSkillData skill_data = 1;   //技能信息
	optional int32 reason = 2; //改变原因
}

message Proto_CSSkillAwakeResetReq
{
	optional int32 reserve = 1;          
}

message Proto_CSSkillAwakeResetRsp
{
	required HeroSkillData skill_data = 1;   //技能信息
}


message Proto_CSSkillSelectTalentReq
{
	required int32 branch_id = 1;         //觉醒id
	required int32 index = 2;             //天赋索引
	required int32 talent_id = 3;         //天赋buff
}

message Proto_CSSkillSelectTalentRsp
{
	required int32 branch_id = 1;         //觉醒id
	required int32 index = 2;             //天赋索引
	required int32 talent_id = 3;         //天赋buff
}

message Proto_CSSkillAttachReq
{
	repeated int32 skill_id = 2 [(yd_fieldoptions.field_arysize) = 10];   //技能
	optional int32 index = 1;   //第几套
}

message Proto_CSSkillAttachRsp
{
	required HeroSkillData skill_data = 1;   //技能信息
}

message Proto_CSSkillSetUseReq
{
	optional int32 index = 1;   //第几套,总共三套
}

message Proto_CSSkillSetUseRsp
{
	optional int32 index = 1;   //第几套,总共三套
}

message Proto_CSSkillAwakeReq
{
	required int32 awake_index = 1;   //技能
	required int32 branch_id = 2;     //分系
}

message Proto_CSSkillAwakeRsp
{
	required HeroSkillData skill_data = 1;   //技能信息
}

message Proto_CSSkillReadReq
{
	required int32 skill_id = 1;          //技能id
}

//新的转职技能系统--------------------
enum ESkillUpgradeType
{
	EN_SKILL_UPGRADE = 1;   //技能升级
	EN_SKILL_DEGRADE = 2;   //技能降级
}

message Proto_CSRoleSkillUpgradeReq
{
	optional ESkillUpgradeType type = 1 [default = EN_SKILL_UPGRADE];
	optional int32 tree_id = 2;
	optional int32 skill_type = 3;
	optional int32 skill_id = 4;
}

message Proto_CSRoleSkillUpgradeRsp
{
	optional ESkillUpgradeType type = 1;
	optional int32 tree_id = 2;
	optional RoleSkillData skill_data = 3;
}

message SkillTreeNode
{
	optional int32 id = 1;
	optional int32 level = 2;
}

message Proto_CSRoleSkillRecommondReq
{
	repeated SkillTreeNode node = 1;
}

message Proto_CSRoleSkillRecommondRsp
{
	optional RoleSkillData skill_data = 1;
}

message Proto_CSRoleSkillResetReq
{
	optional int32 reserve = 1;
}

message Proto_CSRoleSkillResetRsp
{
	optional RoleSkillData skill_data = 1;
}

message Proto_CSRoleSkillSetReq
{
	optional HeroSkillSet skill_set = 1;
	optional int32 index = 2;   //第几套方案
}

message Proto_CSRoleSkillSetRsp
{
	optional HeroSkillSet skill_set = 1;
	optional int32 index = 2;   //第几套方案
}

message Proto_CSRoleSkillSwitchSetReq
{
	optional int32 index = 1;  
}

message Proto_CSRoleSkillSwitchSetRsp
{
	optional int32 index = 1;  
}

message Proto_CSRoleSkillDataNtf
{
	optional RoleSkillData skill_data = 1;
}

message Proto_CSRoleSkillTransferReq
{
	optional int32 transfer_id = 1;   //转职ID
}

message Proto_CSRoleSkillTransferRsp
{
	optional RoleSkillData skill_data = 2; 
}

enum enFPOperateType
{
	EN_FP_ACTIVATE = 1;        //激活
	EN_FP_FREEZE = 2;          //冻结
}

message Proto_CSFPOperateReq
{
	required enFPOperateType type = 1;   //操作类型
	required int32 value = 2;            //涉及的FP点
}


//-奖励通知- start
enum enRewardNotifyType
{
	EN_REWARD_NOTIFY_TYPE_NONE                      = 0;  //缺省
	EN_REWARD_NOTIFY_TYPE_QUEST                     = 1;  //任务
	EN_REWARD_NOTIFY_TYPE_LEVEL                     = 2;  //关卡
	EN_REWARD_NOTIFY_TYPE_TEAM_LEADER               = 3;  //队长额外奖励 
	EN_REWARD_NOTIFY_TYPE_SIX_EXPERIMENT_SCORE      = 4;  //六系试炼积分
    EN_REWARD_NOTIFY_TYPE_QUALITY_ITEM              = 5;  //任务交物品额外奖励
	EN_REWARD_NOTIFY_TYPE_MILITANT_MATCH_COMMON     = 6;  //武斗大会一般奖励
	EN_REWARD_NOTIFY_TYPE_MILITANT_MATCH_WIN_COMB   = 7;  //武斗大会连胜奖励
	EN_REWARD_NOTIFY_TYPE_MILITANT_MATCH_SINGLE_WIN = 8;  //武斗大会单次胜利奖励
	EN_REWARD_NOTIFY_TYPE_SIX_EXPERIMENT_QUEST      = 9;  //六系试炼任务
	EN_REWARD_NOTIFY_TYPE_SKYARENA                  = 10; //天空竞技场
	EN_REWARD_NOTIFY_TYPE_FIELDBOX					= 11; //野外宝箱
	EN_REWARD_NOTIFY_TYPE_GUILD_SINGLE_WIN          = 12; //公会单场战斗胜利奖励
	EN_REWARD_NOTIFY_TYPE_GUILD_FIGHT               = 13; //公会单轮战斗奖励
	EN_REWARD_NOTIFY_TYPE_GUILD_BOSS				= 14; //公会boss奖励
	EN_REWARD_NOTIFY_TYPE_DUNGEON                   = 15; //副本奖励
	EN_REWARD_NOTIFY_TYPE_QUESTIONNAIRE				= 16; //问卷调查奖励
	EN_REWARD_NOTIFY_TYPE_MULTI_LEVEL               = 17; //连战
	EN_REWARD_NOTIFY_TYPE_MAGIC               		= 18; //魔境
	EN_REWARD_NOTIFY_TYPE_LEVEL_BOUNS               = 19; //等级礼包
	EN_REWARD_NOTIFY_TYPE_HLICENSE                  = 20; //猎人执照奖励
	EN_REWARD_NOTIFT_TYPE_CE                        = 21; //战力奖励
	EN_REWARD_NOTIFT_TYPE_RUSH_SCORE                = 22; //单人副本积分
	EN_REWARD_NOTIFY_TYPE_GUILD_REBATE_RWD			= 23; //行会返利活跃奖励
	EN_REWARD_NOTIFY_TYPE_ACTIVITY_RWD				= 24; //活动活跃积分奖励
	EN_REWARD_NOTIFY_TYPE_QUESTION					= 25; //智力闯关奖励
	EN_REWARD_NOTIFY_TYPE_ONLINE_TIME				= 26; //福利·在线奖励
	EN_REWARD_NOTIFY_TYPE_ACT_EIGHT					= 27; //嘉年华奖励领取
	EN_REWARD_NOTIFY_TYPE_GUILD_TRANS_EXP			= 28; //行会传功
    EN_REWARD_NOTIFY_TYPE_WORLD_QUESTION            = 29; //世界答题奖励
    EN_REWARD_NOTIFT_TYPE_RUSH_CHAPTER              = 30; //单人副本章奖励
    EN_REWARD_NOTIFT_TYPE_ACT_QUEST_RWD             = 31; //活动任务奖励
    EN_REWARD_NOTIFT_TYPE_ACHIEVE                   = 32; //成就
	EN_REWARD_NOTIFY_TYPE_GUILD_QUESTION			= 33; //公会答题
	EN_REWARD_NOTIFY_TYPE_MAIL          			= 34; //邮件领取
	EN_REWARD_NOTIFY_TYPE_MALL_BUY        			= 35; //商城购买
	EN_REWARD_NOTIFY_TYPE_MARKET_BUY                = 36; //摆摊购买
	EN_REWARD_NOTIFY_TYPE_USE_ITEM                  = 37; //使用道具
	EN_REWARD_NOTIFY_TYPE_LUCK_DRAW                 = 38; //转圈抽奖
	EN_REWARD_NOTIFY_TYPE_ITEM_DECOMPOSE            = 39; //物品分解
	EN_REWARD_NOTIFY_TYPE_GUILD_SHOP				= 40; //行会商店
    EN_REWARD_NOTIFY_TYPE_LOGIN                     = 41; //登陆奖励
	EN_REWARD_NOTIFY_TYPE_GACHA_BUY                 = 42; //宝罐购买
    EN_REWARD_NOTIFY_TYPE_GUILD_CONTRIBUTE          = 43; //行会捐献奖励
	EN_REWARD_NOTIFY_TYPE_MONTH_CARD                = 44; //月卡每日奖励
	EN_REWARD_NOTIFY_TYPE_SUPPER_CARD               = 45; //终身卡每日奖励
    EN_REWARD_NOTIFY_TYPE_SCORE_EIGHT               = 46; //嘉年华积分奖励
}

message Proto_CSRewardNtf
{
	required enRewardNotifyType  type = 1;  //通知类型
	optional Proto_CSRoleItemNtf item = 2;  //物品列表
    optional int32               reward_param_1 = 3; // 通知参数 任务奖励时,为任务id
}

enum enBattleEndScoreType
{
    EN_BST_NO_INACTIVE_PLAY = 1;    //无消极比赛
    EN_BST_KILL_RANK        = 2;    //击杀排名
    EN_BST_WINNING_STREAK   = 3;    //连胜
    EN_BST_ASSIST_RANK      = 4;    // 
    EN_BST_BUFF_AQUIRED_RANK = 5;
}
message BattleEndScoreDetailed  
{
    required enBattleEndScoreType score_type = 1;
    optional int32  data = 2; // 数值
    optional int32  score = 3; // 奖励分数
}
message SkyArenaScore
{
    optional int32 score = 1; //表现分
    repeated BattleEndScoreDetailed  detailed = 2; // 表现分详情
    optional int32 floor_before_battle   = 3; //战斗前层数
    optional int32 floor_after_battle   = 4; //战斗后层数
}

//-奖励通知- end
message CleanFitantCount
{
	optional int32 clean_fitant_count = 1;
}

message PhantomTroupeChaseCount
{
	optional int32 member_chase_count = 1; //旅团追捕次数
	optional int32 core_chase_count   = 2; //旅团中坚次数
	optional int32 leader_chase_count = 3; //旅团团长次数
}

message BattleEndWantedExtraData
{
    optional WantedOne wanted_info         = 1;
	repeated Item      final_attack_reward = 2;
}

message Proto_CSBattleEndExtraDataNtf
{
	optional CleanFitantCount         clean_fitant_count   = 1;
    optional SkyArenaScore            sky_arena_score      = 2;
	optional PhantomTroupeChaseCount  phantom_troupe_count = 3; //幻影旅团次数
	optional BattleEndWantedExtraData wanted_data          = 4; //捉拿悬赏
}

//message Proto_CSCleanFitantCountNtf
//{
//	optional int32 clean_fitant_count = 1;
//}


message Proto_CSItemExchangeReq
{
	required int32 exchange_id = 1;     //兑换id, 对应ItemExchangeDesc
	optional int32 npc_obj_id = 2;      //npc id
	optional int32 legend_road_id = 3;  //传奇之路id
}

message Proto_CSItemExchangeRsp
{
	optional int32 result = 1;   //结果
}

enum enEscortType
{
	E_ESCORT = 1;	//护送任务
	E_HEIGHT_ESCORT = 2; //高级护送任务 
}

message Proto_CSEscortCompleteStateNtf
{
	optional enEscortType escort_type = 1; //护送类型
	optional int32 escort_count = 2; //护送次数 
	optional int32 height_escort_count = 3; //高级护送次数
}

message Proto_CSGetTrapTowerBuffReq
{
	optional int32 npc_desc_id = 1;
}
message Proto_CSGetTrapTowerBuffRsp
{
	repeated int32 buff_id = 1[(yd_fieldoptions.field_arysize) = 4];
	optional int32 new_buff_id = 2;
}

message Proto_CSReleaseTrapTowerBuffReq
{
	optional int32 npc_desc_id = 1;
}
message Proto_CSReleaseTrapTowerBuffRsp
{
	repeated int32 buff_id = 1[(yd_fieldoptions.field_arysize) = 4];
	optional int32 release_buff_id = 2;
}

message Proto_CSTrapTowerBuffNtf
{
	repeated int32 buff_id = 1[(yd_fieldoptions.field_arysize) = 4];
}

message Proto_CSTrapTowerScoreAwardReq
{
}
message Proto_CSTrapTowerScoreAwardRsp
{
	optional Proto_CSRoleItemNtf item = 1;
}

message Proto_CSRoleTrapTowerDataReq
{
}
message Proto_CSRoleTrapTowerDataNtf
{
	optional RoleTrapTowerData data = 1;
}

message Proto_CSTrapTowerQuestAwardReq
{
}

message Proto_CSTrapTowerScoreNtf
{
	optional int32 score = 1;
}

message Proto_CSGetActivityRankListReq
{
	required enTemporaryRankType type   = 1; //排行榜类型
	required int32               num    = 2; //排名数目
	optional bool                is_bak = 3; //是否备份
}

message Proto_CSGetActivityRankListRsp
{
	required enTemporaryRankType type      = 1; //排行榜类型
	repeated ActivityRankInfo    rank_list = 2; //排行榜
	optional Proto_CS_ErrorCode  ret       = 3[default = ERR_CODE_OK]; //结果 
	optional bool                is_bak    = 4; //是否备份
}

message Proto_CSActivityRankNtf
{
	required enTemporaryRankType type      = 1; //排行榜类型
	repeated ActivityRankInfo    rank_list = 2; //排行榜
}

message Proto_CSSixExperimentScoreNtf
{
	required int32 score     = 1;
	required int32 max_score = 2;
}

message Proto_CSGetSixExperimentScoreRewardReq
{

}

message Proto_CSGetSixExperimentScoreRewardRsp
{
	optional Proto_CS_ErrorCode  ret = 1[default = ERR_CODE_OK]; //结果   
}

// 前端触发获取在线福利经验
// 需求是如果前端无获取，然后下线，就丢掉这部分
message Proto_CSWelfareGetExpReq
{
}

message Proto_CSWelfareGetExpRsp
{
	optional int32 time = 1;   // 挂机的持续时间（分钟）
	optional int32 exp	= 2;   // 挂机所得的经验
}

// 福利经验有改变，主动通知客户端
message Proto_CSWelfareExpChangeNtf
{
	optional int32 exp			= 1;    // 当前的福利经验
	optional int32 act_degree	= 2;	// 活跃度（减少时，会发活跃度 ）
	optional int32 add_exp		= 3;	// 增加的经验
	optional double exp_rate	= 4;
}

//设置武斗大会出场顺序
message Proto_CSSetMilitantMatchBattleInfoReq
{
    optional FightOrder fight_order = 1; //设置的顺序
}

message Proto_CSSetMilitantMatchBattleInfoRsp
{
    optional Proto_CS_ErrorCode  ret = 1[default = ERR_CODE_OK]; //结果   
}

message Proto_CSMilitantMatchBattleInfoNtf
{
    repeated FightOrder fight_order_list = 1; //阵营出场顺序
}

// 一个队伍玩家的财宝信息
message RoleSeaDiscoveryResource
{
	optional uint64 role_id				= 1;
	repeated int32 resource_count 		= 2; //每个财宝的个数（用enTeamPlayerGetResourceType做索引）
	optional string name 				= 3[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional int32 prof 				= 4; //职业
}

//通知关卡数据
message Proto_CSSeaDiscoveryDataNtf
{
	optional int32 total_score						= 1; //队伍获得的累计总积分（用于领奖）
	repeated int32 resource_count 					= 2; //每个财宝的累计总个数（用enTeamPlayerGetResourceType做索引）
	repeated RoleSeaDiscoveryResource role_data 	= 3; //所有队伍成员的财宝数
	optional int32 cur_score						= 4; //当前关卡获得的积分
	repeated int32 resource_score					= 5; //每个财宝的积分
	optional int32 index							= 6; //积分奖励领取的序号
}

// 遗迹淘金活动结束
message Proto_CSSeaDiscoveryEndNtf
{
}

//获取遗迹淘金的奖励
message Proto_CSSeaDiscoveryGetRewardReq
{
}

message Proto_CSSeaDiscoveryGetRewardRsp
{
	repeated ItemGridCSData reward_item				= 1;	// 奖励的物品
}

//武斗大会
message Proto_CSGetMilitantMatchPlayerDataReq
{

}

message Proto_CSGetMilitantMatchPlayerDataRsp
{
    optional Proto_CS_ErrorCode  ret = 1[default = ERR_CODE_OK]; //结果   
}

message Proto_CSGetMilitantMatchGlobalDataReq
{

}

message Proto_CSGetMilitantMatchGlobalDataRsp
{
    optional Proto_CS_ErrorCode  ret = 1[default = ERR_CODE_OK]; //结果   
}

message Proto_CSGetMilitantMatchRewardReq
{
    optional int32 reward_id = 1; //奖励id
}

message Proto_CSGetMilitantMatchRewardRsp
{
    optional Proto_CS_ErrorCode  ret = 1[default = ERR_CODE_OK]; //结果 
}

message Proto_CSMilitantMatchPlayerDataNtf
{
    optional RoleMilitantMatchData militant_match_data = 1; 
}

message Proto_CSMilitantMatchGlobalDataNtf
{
    optional uint64                   end_time           = 1; //武斗大会结束时间
    optional uint64                   next_match_time    = 2; //下次匹配开始时间
    optional uint64                   next_battle_time   = 3; //下次战斗时间
    optional enMilitantType           militant_type      = 4 [default = EN_MILITANT_TYPE_NONE]; //处于的战斗类型（青铜，白银
    optional enMilitantMatchRoomState room_state         = 5 [default = EN_MILITANT_MATCH_ROOM_STATE_NONE]; //战斗房间状态
    optional int32                    player_num         = 6; //剩余人数   
}

message Proto_CSMilitantMatchDataNtf
{
    repeated MilitantMatchInfo match_info = 1; //对手信息
}

message Proto_CSMilitantMatchEnterMapReq
{
    
}

message Proto_CSMilitantMatchEnterMapRsp
{
    optional enMilitantType      militant_type   = 1 [default = EN_MILITANT_TYPE_NONE]; //处于的战斗类型（青铜，白银
    optional Proto_CS_ErrorCode  ret             = 2 [default = ERR_CODE_OK]; //结果 
}

enum enMilitantKickType
{
    EN_MILITANT_KICK_TYPE_NONE = 0;
    EN_MILITANT_KICK_TYPE_LOSE = 1;
	EN_MILITANT_KICK_TYPE_END  = 2;
	EN_MILITANT_KICK_TYPE_MAX  = 3;
}

message Proto_CSMilitantMatchKickNtf
{
    optional enMilitantType militant_type = 1 [default = EN_MILITANT_TYPE_NONE]; //处于的战斗类型（青铜，白银
	optional enMilitantKickType kick_type = 2 [default = EN_MILITANT_KICK_TYPE_NONE];
}

message Proto_CSSetBattleDrugReq
{
	required BattleDrugSetting setting = 1;
}

message Proto_CSSetBattleDrugRsp
{
	required BattleDrugSetting setting = 1;
}

message Proto_CSQuestAcceptFailedNTF
{
    required string member_name = 1;
    required Proto_CS_ErrorCode error_code = 2;
}

// 获取所有的称号信息
message Proto_CSRoleGetAllTitleReq
{
	
}

message Proto_CSRoleGetAllTitleRsp
{
	optional RoleTitleData data				= 1;	// 有可能会有过期的还在里面（允许一分钟的延迟）
	repeated string title_name				= 2;	// 称号的名称
}

// 戴上某个称号
message Proto_CSRoleSetTitleReq
{
	//optional bool is_attr					= 1;	
    // 是否是设置属性称号(true为属性称号，false为显示称号)
	//optional int32 title_id					= 2;	// 设置的属性id

    required uint32 title_item_id = 1;
    required int32  page_type     = 2; // 背包分页枚举
    optional int32  grid_index    = 3; // 物品所在格子位置
}
message Proto_CSRoleSetTitleRsp
{
	//optional bool is_attr					= 1;
	optional int32           title_id		 = 2;
    optional GridItemBase    title_item      = 3;
}

// 隐藏/显示称号
message Proto_CSRoleIsShowReq
{
	optional bool is_show					= 1;	// ture为显示,false为隐藏
}
message Proto_CSRoleIsShowRsp
{
	optional bool is_show					= 1;	// ture为显示,false为隐藏
}

// 获得一个称号(如果是第一个获得的称号，需要默认勾选显示称号和属性称号)
message Proto_CSRoleAddTitleNtf
{
	optional int32 title_id					= 1;
	optional bool is_show					= 2;	// 是否是显示称号
	optional bool is_attr					= 3;	// 是否是属性称号
	optional string title_name				= 4;	// 称号名字
}

// 删除称号
message Proto_CSRoleDeleteTitleNtf
{
	repeated int32 title_id					= 1;	// 删除的称号id
	optional int32 show_title				= 2;	// 显示的称号id
	optional int32 attr_title				= 3;	// 属性的称号id
}

//服务器等级
message Proto_CSGetOpenServerDaysReq
{

}

message Proto_CSGetOpenServerDaysRsp
{
    optional int32 open_days = 1; //开服天数
}

//时装
enum enFashionNtfReason
{
    EN_FASHION_NTF_REASON_NONE   		= 0;
	EN_FASHION_NTF_REASON_DATA			= 1;
    EN_FASHION_NTF_REASON_DRESS   		= 2;
    EN_FASHION_NTF_REASON_UNDRESS   	= 3;
}

message Proto_CSGetFashionDataReq
{
    
}

message Proto_CSGetFashionDataRsp
{
    optional Proto_CS_ErrorCode  ret = 1 [default = ERR_CODE_OK]; //结果 
}

message Proto_CSGetFashionBagReq
{
    optional enFashionType type = 1 [default = EN_FASHION_TYPE_NONE]; //默认拉去全部类型时装
}

message Proto_CSGetFashionBagRsp
{
    optional Proto_CS_ErrorCode  ret = 1 [default = ERR_CODE_OK]; //结果 
}

message Proto_CSGetFashionSlotReq
{
    optional int32 slot = 1; //index
}

message Proto_CSGetFashionSlotRsp
{
    optional Proto_CS_ErrorCode  ret = 1 [default = ERR_CODE_OK]; //结果 
}

message Proto_CSSaveFashionSlotReq
{
    optional int32 slot     = 1; //index
	repeated int32 fashions = 2; //时装配置表ID数组
}

message Proto_CSSaveFashionSlotRsp
{
    optional Proto_CS_ErrorCode  ret = 1 [default = ERR_CODE_OK]; //结果 
}

message Proto_CSBuyFashionReq
{
    repeated int32 fashions = 1; //时装配置表ID数组
	repeated Item  items    = 2;
}

message Proto_CSBuyFashionRsp
{
    optional Proto_CS_ErrorCode  ret = 1 [default = ERR_CODE_OK]; //结果 
	repeated uint64 uuid			 = 2;
}

message Proto_CSFashionDataNtf
{
	optional enFashionNtfReason reason  = 1 [default = EN_FASHION_NTF_REASON_NONE]; //ntf原因
	optional RoleFashionData data		= 2;
}

message Proto_CSFashionDressReq
{
	optional uint64 uuid				= 1;
	optional bool is_dress				= 2;	// 是否是穿，true为穿
}

message Proto_SCFashionDressRsp
{
	optional uint64 uuid				= 1;
	optional bool is_dress				= 2;	// 是否是穿，true为穿
}

message Proto_CSFashionComposeReq
{
	repeated uint64 uuid				= 1;
	optional int32 new_id				= 2;	// 合成后的id
}
message Proto_SCFashionComposeRsp
{
	repeated int32 get_item				= 1;	// 获得的物品id
}

message Proto_CSFashionSelectAttrReq
{
	optional int32 index				= 1;	// 从0开始
	optional uint64 uuid				= 2;
}
message Proto_SCFashionSelectAttrRsp
{
	optional int32 index				= 1;
	optional uint64 uuid				= 2;
}


message Proto_CSQQVIPInfoChangedNtf
{
    repeated QQVIPInfo qqvipinfo= 1;
}

message Proto_CSSelectFashionSlotReq
{
    optional int32 slot = 1; //0 表示默认
}

message Proto_CSSelectFashionSlotRsp
{
    optional Proto_CS_ErrorCode  ret = 1 [default = ERR_CODE_OK]; //结果 
}

message Proto_CSMallPriceReq
{
    repeated Item item = 1;
}

message MallPriceInfo
{
    optional Item  item          = 1;
	optional int32 mall_id       = 2;
	optional int32 need_item_id  = 3;
	optional int32 need_item_num = 4;
	optional int32 need_diamond  = 5;
	optional int32 discount      = 6;
	optional int32 buy_limit     = 7;
}

message Proto_CSMallPriceRsp
{
    repeated MallPriceInfo       price_info = 1;
    optional Proto_CS_ErrorCode  ret        = 2 [default = ERR_CODE_OK]; //结果 
}

message Proto_CSMasterLoopQuestAcceptReq
{
}
message Proto_CSMasterQuestInfoNtf
{
	optional RoleMasterQuestData info = 1;
}
message Proto_CSMasterQuestSubmitItemReq
{
	required int32 item_id = 1;
	optional uint64 item_uuid = 2;
	optional int32 item_quality = 3;
}
message Proto_CSMasterQuestQuestionReq
{
}
message Proto_CSMasterQuestQuestionInfoNtf
{
	optional int32 question_desc_id = 1;
}
message Proto_CSMasterQuestQuestionAnswerReq
{
	optional int32 answer = 1; //选项1, 2, 3, 4
}
message MQQuestionAnswerState
{
	optional uint64 role_id = 1;
	optional enMQQuestionState state = 2[default=EN_RIGHT]; 
}
message Proto_CSMasterQuestQuestionAnswerNtf
{
	repeated MQQuestionAnswerState state = 1[(yd_fieldoptions.field_arysize)= 2];
}
message Proto_CSMasterQuestCompleteNtf
{
	optional int32 quest_id = 1;
}
message Proto_CSMasterQuestGiveupReq
{
}
message Proto_CSMasterQuestGiveupRsp
{
	optional int32 quest_id = 1;
}
message Proto_CSMasterLoopQuestCompleteNtf
{
}


// 大包转小包的限制
enum enPacketPieceLimit
{
	EN_PACKET_PIECE_MAX_SIZE	= 65000;	// 字节数（不超过65535,包头长度类型uint16）
}

// 发给服务器的大包拆小包
message Proto_CSPacketPieceToSvrReq
{
	optional int32 index			= 1;	// 小包的序号(1开始)
	optional int32 msgid			= 2;	// 消息id(content协议的消息id)
	optional int32 count			= 3;	// 最大的包数
	optional uint32 seqid			= 4;	// 序列号
	optional bytes content			= 5;	// 是pb结构序列化后的二进制流(协议内容 )
}

// 大包分小包的ntf
message Proto_SCPacketPieceToClientNtf
{
	optional int32 index			= 1;	// 小包的序号(1开始)
	optional int32 msgid			= 2;	// 消息id(content协议的消息id)
	optional int32 count			= 3;	// 最大的包数
	optional uint32 seqid			= 4;	// 序列号
	optional bytes content			= 5;	// 是pb结构序列化后的二进制流(客户端协议内容 )
}

//公会战
message GuildCompetitionGuildInfo
{
    optional uint64              uid     = 1;
	optional int32               serial  = 2;
	optional string              name    = 3;
}

message GuildCompetitionRoundVersusInfo
{
    optional enGuildVersusResult       result   = 1 [default = EN_GUILD_VERSUS_RESULT_NO_DEAL]; 
	optional GuildCompetitionGuildInfo info_one = 2;
	optional GuildCompetitionGuildInfo info_two = 3;
}

message GuildCompetitionRoundInfoOne
{
    optional int32                           round       = 1;
    repeated GuildCompetitionRoundVersusInfo versus_info = 2;
}

message Proto_CSRegisterGuildCompetitionReq
{
    optional int32 day            = 1;
	optional int32 step           = 2;
}

message Proto_CSRegisterGuildCompetitionRsp
{
	optional int32              day            = 1;
	optional int32              step           = 2;
	optional uint64             day_time       = 3;
    optional Proto_CS_ErrorCode ret            = 4 [default = ERR_CODE_OK]; //结果 
}

message Proto_CSGuildCompetitionEnterMapReq
{
    
}

message Proto_CSGuildCompetitionEnterMapRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
}

message Proto_CSGetGuildCompetitionPlayerDataReq
{
    
}

message Proto_CSGetGuildCompetitionPlayerDataRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
}

message Proto_CSGuildCompetitionPlayerDataNtf
{
    optional RoleGuildCompetitionData guild_competition_data = 1; 
}

message Proto_CSGuildCompetitionRoundInfoNtf
{
	optional int32                        day                = 1;
	optional uint64                       week               = 2;
	optional int32                        competition_serial = 3;
    optional int32                        round_num          = 4;
    repeated GuildCompetitionRoundInfoOne round_info         = 5;
}

message Proto_CSGetGuildCompetitionRoundInfoReq
{
    optional int32 day   = 1;
	optional int32 round = 2;
}

message Proto_CSGetGuildCompetitionRoundInfoRsp
{
    optional Proto_CS_ErrorCode                   ret        = 1 [default = ERR_CODE_OK]; //结果
    optional Proto_CSGuildCompetitionRoundInfoNtf round_info = 2;
}

message Proto_CSGetGuildCompetitionGlobalDataReq
{
    
}

message Proto_CSGetGuildCompetitionGlobalDataRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
}

message Proto_CSGuildCompetitionGlobalDataNtf
{
    repeated GuildCompetitionBaseInfo base_info = 1;
}

message Proto_CSGuildCompetitionAttackReq
{
    optional uint64 target_role_id = 1;
}

message Proto_CSGuildCompetitionAttackRsp
{
    optional uint64             target_role_id = 1;
    optional Proto_CS_ErrorCode ret            = 2 [default = ERR_CODE_OK]; //结果
}

message GuildBattleNpc
{
    optional int32           obj_id     = 1;
	optional int32           npc_id     = 2;
	optional int32           process    = 3;
	optional enGuildCampType camp       = 4 [default = EN_GUILD_CAMP_TYPE_NONE];
	optional int32           direction  = 5;
}

message Proto_CSGuildBattleInfoNtf
{
    repeated GuildBattleNpc     npc_info         = 1;
	optional uint64             state_start_time = 2; //ms
	optional uint64             state_duration   = 3; //ms
    repeated int32              score            = 4;
	optional enGuildBattleState state            = 5 [default = EN_GUILD_BATTLE_STATE_NONE];
}

message Proto_CSGetGuildBattleVensusInfoReq
{
    
}

message Proto_CSGetGuildBattleVensusInfoRsp
{
    optional GuildCompetitionRoundVersusInfo vensus_info    = 1;
	optional uint64                          enter_end_time = 2;
    optional Proto_CS_ErrorCode              ret            = 3 [default = ERR_CODE_OK]; //结果
}

//伙伴对战

message FightPartnerOne
{
	optional int32  id    = 1;
	optional int32  level = 2; 
}

message SelectPartner
{
    optional int32 id   = 1;
	optional int32 slot = 2;
}

message FightPartnerInfo
{
    optional uint64          role_id     = 1;
	optional enCampType      camp        = 2 [default = EN_CAMP_TYPE_NONE];
	repeated FightPartnerOne select      = 3;
	optional bool            confirm     = 4;
	//repeated FightPartnerOne hold        = 5;
	optional int32           cur_partner = 6;
	optional string          name        = 7;
}

message Proto_CSSetFightPartnerReq
{
    repeated int32 id = 1;
}

message Proto_CSSetFightPartnerRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
}

message Proto_CSFightPartnerInfoNtf
{
    repeated FightPartnerInfo partner_info = 1;
}

message Proto_CSGetFightPartnerInfoReq
{
    
}

message Proto_CSGetFightPartnerInfoRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
}

message Proto_CSSwitchFightPartnerReq
{
    optional int32 id = 1;
}

message Proto_CSSwitchFightPartnerRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
    optional int32              id  = 2;
}

message Proto_CSConfirmFightPartnerReq
{
    optional bool confirm = 1;
}

message Proto_CSConfirmFightPartnerRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
}

message PartnerUseInfoOne
{
    optional int32                 id     = 1;
	optional bool                  use    = 2;
	optional enPartnerBattleStatus status = 3 [default=EN_PARTNER_BATTLE_STATUS_NONE]; 
}

message PlayerPartnerUseInfo
{
    optional uint64              id         = 1; //玩家UID
	optional string              name       = 2; //玩家名字
	optional int32               level      = 3;
	repeated PartnerUseInfoOne   use        = 4; //玩家可用伙伴
    optional enCampType          camp       = 5 [default = EN_CAMP_TYPE_NONE]; //阵营,红蓝方
	optional enProfessionType    profession = 6 [default = EN_PROFESSION_NONE]; // 职业
}

message Proto_CSFightPartnerRoomInfoNtf
{
	repeated PlayerPartnerUseInfo  use_info = 2;
}

//AI释放SP技
message Proto_CSCastPartnerSupportSkillNtf
{
    optional uint64 role_id = 1;
	optional int32  obj_id  = 2;
}

//拍卖争夺会
message MatchErrorInfo
{
    optional Proto_CS_ErrorCode ret         = 1 [default = ERR_CODE_OK]; //结果
	repeated string             name        = 2;
	optional int32              min_member  = 3;
	optional int32              max_member  = 4;
	optional int32              need_level  = 5;
	optional int32              cd_sec      = 6;
	optional int32              partner_lv  = 7;
	optional int32              partner_num = 8;
}

message Proto_CSAuctionCompetitionSingleMatchReq
{

}

message Proto_CSAuctionCompetitionSingleMatchRsp
{
    optional Proto_CS_ErrorCode ret  = 1 [default = ERR_CODE_OK]; //结果
    optional MatchErrorInfo     info = 2;
}

message Proto_CSAuctionCompetitionTeamMatchReq
{

}

message Proto_CSAuctionCompetitionTeamMatchRsp
{
    optional Proto_CS_ErrorCode ret  = 1 [default = ERR_CODE_OK]; //结果
	optional MatchErrorInfo     info = 2;
}


message Proto_CSConfirmTeamMatchReq
{
    optional bool            confirm = 1; //是否确认
	optional enTeamReadyType type    = 2 [default = EN_TEAM_READY_TYPE_NONE];
}

message Proto_CSConfirmTeamMatchRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
}

enum enConfirmType
{
    EN_CONFIRM_TYPE_NONE    = 0;
	EN_CONFIRM_TYPE_CONFIRM = 1;
	EN_CONFIRM_TYPE_REFUSE  = 2;
}
message TeamConfirmInfo
{
    optional uint64           id         = 1;
	optional string           name       = 2;
	optional int32            level      = 3;
	optional enProfessionType profession = 4 [default=EN_PROFESSION_NONE];
	optional enConfirmType    confirm    = 5 [default=EN_CONFIRM_TYPE_NONE]; 
	optional int32            transfer_id = 6; //转职ID
}

message Proto_CSConfirmTeamMatchNtf
{
    repeated TeamConfirmInfo team_info = 1;
	optional uint64          time      = 2;
	optional int32           team_id   = 3;
	optional enTeamReadyType type      = 4 [default=EN_TEAM_READY_TYPE_NONE];
	optional int32           int_param = 5;
}

enum enReportType
{
    EN_REPORT_TYPE_NONE       = 0; //没有
	EN_REPORT_TYPE_HACK       = 1; //作弊
	EN_REPORT_TYPE_FUCK       = 2; //骂人
	EN_REPORT_TYPE_PASSIVE    = 3; //消极比赛
	EN_REPORT_TYPE_NO_OP      = 4; //没有操作
	EN_REPORT_TYPE_UNDERCOVER = 5; //卧底
	EN_REPORT_TYPE_SEEK_DIED  = 6; //送死
	EN_REPORT_TYPE_THUMB_UP   = 7; //点赞
}

message Proto_CSAuctionCompetitionReportReq
{
    optional uint64       role_id       = 1;
	optional enReportType type          = 2 [default = EN_REPORT_TYPE_NONE];
	optional string       msg           = 3;
}

message Proto_CSAuctionCompetitionReportRsp
{
    optional Proto_CS_ErrorCode ret     = 1 [default = ERR_CODE_OK]; //结果
	optional uint64             role_id = 2;
	optional string             name    = 3;
	optional enReportType       type    = 4 [default = EN_REPORT_TYPE_NONE];
}

message Proto_CSAuctionCompetitionDataNtf
{
    optional RoleAuctionCompetitionData auction_data = 1;
}

message Proto_CSGetAuctionCompetitionDataReq
{
    optional bool make_history = 1;
}

message Proto_CSGetAuctionCompetitionDataRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
}

message Proto_CSGetAuctionCompetitionDailyRewardReq
{

}

message Proto_CSGetAuctionCompetitionDailyRewardRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
}

message Proto_CSBattleChatInfoReq
{
    optional uint64 role_id = 1;
	optional int32  msg_id  = 2;
}

message Proto_CSBattleChatInfoRsp
{
    optional uint64 role_id = 1;
	optional uint64 msg_id  = 2;
}

message Proto_CSBattleChatInfoNtf
{
    optional uint64 role_id = 1;
	optional uint64 msg_id  = 2;
}

//拍卖争夺会 end

message Proto_CSRoleInfoReq
{
	optional uint64 role_id = 1; //要获取角色信息的玩家ID
}
message RoleBaseInfo
{
	optional uint64 role_id 				= 1; //角色唯一ID
	optional int32 level					= 2; //等级
	optional string name 					= 3[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //角色名
	optional int32 player_id                = 4; //playerdesc的描述id
	optional uint64	guild_id				= 5;		//所在公会
	optional string guild_name 				= 6[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; //公会名
	optional HeroOne player					= 7; //英雄信息（包含属性）
	optional int32 mag 						= 8; //念力
	optional int32 transfer_id              = 10; //转职ID
	optional bool is_check_name				= 11[default = false]; //是否实名认证
	optional string title_name 				= 12[(yd_fieldoptions.field_bufsize)=64, (yd_fieldoptions.field_string_len)=64]; //称号
	optional RoleAuctionCompetitionData auction_competition_data = 13; //拍卖争夺会数据
	optional RoleSkyarenaData sky_arena_data = 14; //天空竞技场 
	optional string head_url				= 15;	// 头像的url(游客为空)
	optional GridItemBase title_item		= 16;	// 物品称号
	optional int32 pvp_1v1_grade            = 17;   // 1v1段位
}
message EquioInfo
{
	repeated Equip equip_list 				= 1[(yd_fieldoptions.field_arysize)=8];//装备列表
}

message RolePanelFashionInfo
{
	optional RoleFashionData role_data		= 1;		// 时装额外的数据（转职信息，套装信息，默认套装）
	repeated ItemGridCSData dressed_data	= 2; 		// 时装穿戴数据
}

message RolePanelPartnerInfo
{
    repeated PartnerOne role_partner_list   = 1; //伙伴数据
	repeated EPartnerType type				= 2;
}

message Proto_CSRoleInfoRsp
{
	optional RoleBaseInfo base_info = 1;
	optional EquioInfo equip_info = 2;
	optional RolePanelFashionInfo fashion_info = 3;
	optional RolePanelPartnerInfo partner_info = 4;
}
message Proto_CSRoleInfoRightReq
{
	optional bool 					 is_public_base					= 1; //是否公开基础信息
	optional bool 					 is_public_equip				= 2; //是否公开装备信息
	optional bool   				 is_public_partner				= 3; //是否公开伙伴信息
	optional bool 				 	 is_public_rune					= 4; //是否公开念纹信息
}
message Proto_CSRoleInfoRightRsp
{
	optional bool 					 is_public_base					= 1; //是否公开基础信息
	optional bool 					 is_public_equip				= 2; //是否公开装备信息
	optional bool   				 is_public_partner				= 3; //是否公开伙伴信息
	optional bool 				 	 is_public_rune					= 4; //是否公开念纹信息
}
message Proto_CSRoleSnsInfoReq
{
	optional Birthday birthday				= 1; // 本人生日
	optional enPlayerZodiac zodiac			= 2[default = EN_PLAYER_ARIES]; // 本人星座
	optional enSexType sex					= 3[default = EN_SEX_GUESS]; // 本人性别
	optional string	location				= 4[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; // 所在省市
	optional bool is_public_sns				= 5; //是否公开社交信息
}
message Proto_CSRoleSnsInfoRsp
{
	optional Birthday birthday				= 1; // 本人生日
	optional enPlayerZodiac zodiac			= 2[default = EN_PLAYER_ARIES]; // 本人星座
	optional enSexType sex					= 3[default = EN_SEX_GUESS]; // 本人性别
	optional string	location				= 4[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32]; // 所在省市
	optional bool is_public_sns				= 5; //是否公开社交信息
}
message Proto_CSRoleScoreReq
{
}
message Proto_CSRoleScoreRsp
{
	optional int32 fight_honor = 1;	 //武勋值
	optional int32 contribution = 2; //行会贡献
	optional int32 nian_score = 3; //念力积分
	optional int32 master_score = 4; //授业点
	optional int32 skyarena_score = 5; //天空竞技场积分
}

//----------------------------------------------------
//十二支执照协议
//----------------------------------------------------

message Proto_CSLicenseBlockOpenReq
{
	required int32 row = 1;    //行  
	required int32 col = 2;    //列
	optional int32 block_id = 3;   //执照格子id
}

message Proto_CSLicenseBlockOpenRsp
{
	optional RoleLicenseData license_data = 1;   //执照数据
	optional int32 row = 2;    //行  
	optional int32 col = 3;    //列
}

message Proto_CSLicenseSlotUnlockReq
{
	required enLicenseSlotType slot_type = 1;   //槽位类型
	required int32 pos = 2;    //位置，第几个槽位
}

message Proto_CSLicenseSlotUnlockRsp
{
	optional RoleLicenseData license_data = 1;   //执照数据
	required int32 pos = 2;    //位置，第几个槽位
}

message Proto_CSLicenseSlotSetReq
{
	required enLicenseSlotType slot_type = 1;   //槽位类型
	required int32 pos = 2;           //位置，第几个槽位
	required int32 block_id = 3;      //执照格id
	optional int32 row = 4;    //行  
	optional int32 col = 5;    //列
}

message Proto_CSLicenseSlotSetRsp
{
	optional RoleLicenseData license_data = 1;   //执照数据
	optional enLicenseSlotType slot_type = 2 [default = EN_LST_ACTIVE_SKILL];   //槽位类型
	optional int32 pos = 3;           //位置，第几个槽位
}

message Proto_CSLicenseLPExchangeReq
{
	required int32 exchange_num = 1;    //兑换数量
}

message Proto_CSLicenseLPExchangeRsp
{
	required int32 exchange_num = 1;             //兑换数量
	optional RoleLicenseData license_data = 2;   //执照数据
}

message Proto_CSLicenseDataNtf
{
	optional RoleLicenseData license_data = 1;   //执照数据
}

//积分商店
message Proto_CSPointShopListReq
{
	optional int32 market_type = 1;
}
message itemPointMarket
{
	optional int32 id = 1;
	optional int32 surplus_count = 2;
	optional int32 surplus_buy_count = 3;
}
message Proto_CSPointShopListRsp
{
	optional int32 market_type = 1;
	repeated itemPointMarket item = 2;
}
message Proto_CSPointShopBuyReq
{
	optional int32 market_type = 1;
	optional int32 id = 2;
	optional int32 num = 3;
}
message Proto_CSPointShopBuyRsp
{
	optional int32 market_type = 1;
	optional itemPointMarket item = 2;
}

//野外宝箱
message Proto_CSFieldBoxInfoReq
{
	optional int32 npc_global_id = 1;
}
message Proto_CSFieldBoxInfoRsp
{
	repeated int32 box_lib_list = 1[(yd_fieldoptions.field_arysize) = 25];  	// 物品信息
	optional int32 lucky_value = 2;
	optional int32 open_count = 3;
	optional int32 result = 4;
}
message Proto_CSOpenFieldBoxReq
{
	optional int32 npc_global_id = 1;
}
message Proto_CSOpenFieldBoxRsp
{
	optional int32 box_lib_id = 1;
	optional int32 lucky_value = 2;
	optional int32 open_count = 3;
	optional Proto_CSRoleItemNtf item_ntf = 4;
	optional int32 result = 5;
}
message Proto_CSLuckyExchangeReq
{
	optional int32 lucky_id = 1;
}
message Proto_CSLuckyExchangeRsp
{
	optional int32 lucky_value = 2;
}

// 创建家族
message Proto_CSFamilyCreateReq
{
	optional RoleFamilyTitle title			= 1;	// 称号
}

// 创建成功通知
message Proto_SCFamilyCreateSuccessNtf
{

}

// 获取家族空间信息
message Proto_CSFamilyDetailInfoReq
{}
message Proto_SCFamilyDetailInfoRsp
{
	optional uint64 uuid 					= 1; 	// 家族唯一id
	optional RoleFamilyBase base_info		= 2;	// 家族基础信息
	optional RoleFamilyMem mem_info			= 3;	// 家族所有成员
	optional FamilyEventInfo event_info		= 4;	// 家族事件投票
	repeated bool is_login					= 5;	// 对应RoleFamilyMem成员信息的上下线，true为在线
}

// 编辑家族宣言
message Proto_CSFamilyModifySignatureReq
{
	optional string content					= 1;
}
message Proto_SCFamilyModifySignatureRsp
{
	optional int32 result					= 2;
}

// 修改字号
message Proto_CSFamilyModifyMemoNameReq
{
	optional string content					= 1;
}
message Proto_CSFamilyModifyMemoNameRsp
{
	optional int32 result					= 2;
}

message ModifyFamilyTitle
{
	optional RoleFamilyTitle new_title		= 1;
	optional bool is_item					= 2;	// 是否消耗物品
}

message AddFamilyMember
{
	repeated uint64 role_id					= 1;
}

message FireFamilyMember
{
	optional uint64 role_id					= 1;
	optional string reason					= 2;	// 请离原因
}

// 创建邀请列表
message Proto_CSFamilyCreateInviteListReq
{
}
message Proto_SCFamilyCreateInviteListRsp
{
	optional SingleFamilyInviteData info 	= 1;
}

// 邀请新人
message proto_CSFamilyInviteReq
{
	optional uint64 role_id					= 1;	// 被邀请人的id
}

message proto_CSFamilyInviteRsp
{
	optional int32 result					= 1;
	optional string content    				= 2;	// 头上飘字
}

// 通知其他人，邀请中状态
message Proto_SCFamilyInviteInfoNtf
{
	optional FamilyInviteRoleInfo info 		= 1;
}

// 通知有人邀请你加入家族
message Proto_SCFamilyInvitedNtf
{
	optional uint64 role_id					= 1;	// 邀请人的id
	optional string name    				= 2;	// 邀请人的名字
}

// 是否同意邀请
message Proto_CSFamilyAcceptInvitedReq
{
	optional uint64 role_id					= 1;	// 邀请人的id
	optional bool is_accept					= 2;	// true为同意
}
message Proto_SCFamilyAcceptInviteRsp
{
	optional SingleFamilyInviteData info 	= 1;
}

// 通知其他玩家被邀请者是否同意
message Proto_SCFamilyAcceptInvitedNtf
{
	optional uint64 role_id					= 1;	// 被邀请人的id
	optional bool is_accept					= 2;	// true为同意
}

// 退出邀请列表
message Proto_CSFamilyLeaveInviteListReq
{
	optional uint64 role_id					= 1;	// 邀请人的id
}

// T出邀请列表
message Proto_CSFamilyFireInviteListReq
{
	optional uint64 role_id					= 1;	// 被t的人的id
}

enum enFamilyLeaveListType
{
	EN_FAMILY_LEAVE_YOURSELF				= 0;	// 自己离开的
	EN_FAMILY_LEAVE_FIRED					= 1;	// 被t的
	EN_FAMILY_LEAVE_TIMEOUT					= 2;	// 邀请列表超时
	EN_FAMILY_LIST_DELETED					= 3;	// 邀请列表被删除
}

// 通知其他人，已邀请的人退出
message Proto_SCFamilyLeaveInviteNtf
{
	optional uint64 role_id					= 1;	// 已邀请人的id
	optional enFamilyLeaveListType type		= 2;	// 离开的类型 
}

// 发起仪式
message Proto_CSFamilyCallActivityReq
{
}
message Proto_SCFamilyCallActivityRsp
{
}

enum enFamilyActivityMessageType
{
	EN_FAMILY_MSG_TYPE_ENTER				= 1;	// 发起仪式
	EN_FAMILY_MSG_CANCEL_ACTIVITY			= 2;	// 取消仪式
	EN_FAMILY_MSG_PROCESS_TIMEOUT			= 3;	// 阶段超时，进入cd
	EN_FAMILY_MSG_ROLE_ENTER_MAP			= 4;	// 有人进入/退出场景(只通知发起者)
	EN_FAMILY_MSG_TYPE_HURRY				= 5;	// 催促
	EN_FAMILY_MSG_TYPE_PAY					= 6;	// 支付
	EN_FAMILY_MSG_PAY_FAILED				= 7;	// 支付失败
	EN_FAMILY_MSG_TYPE_START_DINNER			= 8;	// 开始晚宴
	EN_FAMILY_MSG_TYPE_START_FOOD			= 9;	// 上菜
	EN_FAMILY_MSG_TYPE_EAT_FOOD				= 10;	// 吃菜
	EN_FAMILY_MSG_TYPE_CHANGE_FOOD			= 11;	// 撤换菜
	EN_FAMILY_MSG_TYPE_START_VOTE			= 12;	// 开始谈资论辈
	EN_FAMILY_MSG_TYPE_VOTE_RANK			= 13;	// 发送新一轮投票信息
	EN_FAMILY_MSG_TYPE_VOTE					= 14;	// 发送玩家投票票数变化
	EN_FAMILY_MSG_IS_APPLY_BOSS				= 15;	// 重复确认是否选他为老大
	EN_FAMILY_MSG_NOT_APPLY_BOSS			= 16;	// 选老大有人不同意，同步给所有人
	EN_FAMILY_MSG_TYPE_START_TITLE			= 17;	// 进入修改称号阶段
	EN_FAMILY_MSG_TYPE_MOD_TITLE			= 18;	// 修改称号实时同步
	EN_FAMILY_MSG_TYPE_OK_TITLE				= 19;	// 确定修改称号
	EN_FAMILY_MSG_TYPE_START_MEMO			= 20;	// 进入修改字号阶段
	EN_FAMILY_MSG_TYPE_SYN_MEMO				= 21;	// 同步字号
	EN_FAMILY_MSG_TYPE_CDD					= 22;	// 进入契约
	EN_FAMILY_MSG_TYPE_SYN_CDD				= 23;	// 同步契约给其他人
	EN_FAMILY_MSG_TYPE_CDD_END				= 24;	// 契约阶段结束
}

// 催促和发起仪式都用这个结构
message FamilyEnterActivityMap
{
	optional uint64 role_id					= 1;	// 发起人的id
	optional string name    				= 2;	// 发起人的名字
	optional int32 time						= 3;	// 仪式倒计时
}

// 有人进入/退出场景(只通知发起者)
message FamilyRoleEnterMap
{
	optional uint64 role_id					= 1;	// 玩家的id
	optional bool is_enter					= 2;	// true为进入
}

// 撤换/上菜/吃菜
message FamilyEatFood
{
	optional int32 index					= 1;
	optional bool is_long					= 2[default=false];	// 是否是长动画
}

message FamilyVoteRole
{
	optional uint64 role_id					= 1;	// 人的id
	optional string name    				= 2;	// 人的名字
	optional int32 count					= 3;	// 票数
	optional uint32 avatar_id				= 4;	// 头像
	optional enProfessionType profession	= 5[default=EN_PROFESSION_NONE]; // 职业
	optional int32 transfer_id              = 6;    //转职ID
}

// 通知新一轮投票 
message FamilyVoteStart
{
	repeated FamilyVoteRole role_info		= 1;	// 被投票的人信息
	repeated FamilyVoteRole vote_info		= 2;	// 已经排好的人信息
}

// 通知投票后，票数改变的人
message FamilyVoteCountChange
{
	optional uint64 role_id					= 1;	// 人的id
	optional int32 count					= 2;	// 票数
}

// 支付失败通知
message FamilyPayFailedRole
{
	optional string pay_failed_role			  = 1;  // 支付失败的人名字
}

// 重复确认是否选他为老大
message FamilyApplyBoss
{
	optional uint64 role_id					= 1;	// 人的id
	optional string name    				= 2;	// 人的名字
	optional int32 count					= 3;	// 票数
}

// 同步给所有人他的字号修改
message FamilyRoleMemoChange
{
	optional uint64 role_id					= 1;	// 人的id
	optional string memo_name				= 2;	// 同步给其他玩家的字号
}

// 参与者仪式内收到的通知
message Proto_SCFamilyGetMessageNtf
{
	optional enFamilyActivityMessageType type = 1[default=EN_FAMILY_MSG_TYPE_ENTER];	// 通知的类型
	optional FamilyEnterActivityMap enter_map = 2;	// 通知受邀者进入仪式场景(催促和发起仪式都用这个结构)
	optional FamilyEatFood food				  = 3;	// 撤换/上菜同步
	optional FamilyVoteStart vote_info		  = 4;	// 通知新一轮投票 
	optional FamilyVoteCountChange vote_count = 5;	// 通知投票后，票数改变的人
	optional RoleFamilyTitle title			  = 6;	// 修改或者确定称号同步
	optional enFamilyActiviyProcess process	  = 7[default=EN_FAMILY_PROCESS_INVITING];	// 仪式进度
	optional uint64 process_time			  = 8;
	optional FamilyRoleEnterMap role_enter	  = 9;
	optional string no_apply_str			  = 10;  // 不同意老大选票的飘字提示
	optional FamilyPayFailedRole pay_failed   = 11; // 支付失败
	optional FamilyApplyBoss apply_boss		  = 12; // 重复确认是否选他为老大
	optional uint64 cdd_role				  = 13;	// 契约画押的玩家
	optional FamilyRoleMemoChange role_memo	  = 14;	// 同步给所有人他的字号修改
}

// 举行仪式
message Proto_CSFamilyStartActivityReq
{
}
message Proto_SCFamilyStartActivityRsp
{
}

// 取消仪式
message Proto_CSFamilyCancelActivityReq
{
}

// 通知离开家族地图
message Proto_SCFamilyLeaveMapNtf
{

}

// 请求支付
message Proto_CSFamilyPayMoneyReq
{
	optional bool is_ok					= 1;
}
message Proto_SCFamilyPayMoneyRsp
{
}

// 催促
message Proto_CSFamilyHurryReq
{
}

// 吃菜
message Proto_CSFamilyEatFoodReq
{
	
}

// 换菜
message Proto_CSFamilyChangeFoodReq
{
}

// 请求排辈投票
message Proto_CSFamilyVoteRankReq
{
	optional uint64 role_id				= 1;	// 投的人的id
}

// 请求再次确认投票
message Proto_CSFamilyVoteAgainReq
{
	optional bool is_ok					= 1;
}

// 请求同步称号
message Proto_CSFamilySynTitleReq
{
	optional RoleFamilyTitle title		 = 1;
}

// 确定修改称号
message Proto_CSFamilyTitleOKReq
{
	optional RoleFamilyTitle title		 = 1;
}

// 确定修改字号
message Proto_CSFamilyMemoOKReq
{
	optional string memo_name		    	= 1; // 字号
}

message Proto_SCFamilyMemoOKRsp
{
	optional string memo_name		    	= 1; // 字号
}

// 同步契约画押
message Proto_CSFamilyCDDReq
{
	optional uint64 role_id				= 1;	// 画押的人的id
}

// 发起投票
message Proto_CSFamilyAddEventReq
{
	optional enFamilyEventType type			= 1[default=EN_FAMILY_EVENT_MODIFY_TITLE];
	optional ModifyFamilyTitle title        = 2;	// 修改称号
	optional AddFamilyMember add_role		= 3;	// 接纳新人
	optional FireFamilyMember fire_role		= 4;	// 请离旧人
}

// 取消投票
message Proto_CSFamilyDelEventReq
{}

// 确认执行
message Proto_CSFamilyActEventReq
{}

// 投票是否接受
message Proto_CSFamilyEventAcceptReq
{
	optional bool is_accept					= 1;	// 是否接受，true为接受
}

// 事件同步来源
enum enFamilyEventSrc
{
	EN_FAMILY_EVENT_SRC_ADD					= 0;	// 发起投票
	EN_FAMILY_EVENT_SRC_DEL					= 1;	// 取消投票
	EN_FAMILY_EVENT_SRC_ACT					= 2;	// 确认执行
	EN_FAMILY_EVENT_SRC_ACCEPT				= 3;	// 投票
	EN_FAMILY_EVENT_SRC_TIMEOUT				= 4;	// 超时
}

// 同步事件投票信息(发起投票，取消投票，确认执行，投票都会同步)
message Proto_SCFamilyEventInfoNtf
{
	optional enFamilyEventSrc type			= 1[default=EN_FAMILY_EVENT_SRC_ADD];	// 同步来源类型
	optional FamilyEventInfo event_info		= 2;	// 家族事件投票
}

enum enCityStateNtfType
{
    EN_CITY_STATE_NTF_TYPE_NONE   = 0;
    EN_CITY_STATE_NTF_TYPE_ADD    = 1;
	EN_CITY_STATE_NTF_TYPE_DELETE = 2;
	EN_CITY_STATE_NTF_TYPE_ALL    = 3;
}

message Proto_CSCityStateNtf
{
	repeated CityStateInfo      state_info  = 1 [(yd_fieldoptions.field_arysize) = 8];
	optional enCityStateNtfType ntf_type    = 2 [default = EN_CITY_STATE_NTF_TYPE_NONE];
}

message ArenaLevelPair
{
    optional int32 min_lv = 1;
	optional int32 max_lv = 2;
}
message Proto_CSGetArenaPlayerListReq
{
    optional bool             is_team = 1;
	repeated enProfessionType job     = 2;
	repeated ArenaLevelPair   level   = 3;
}

message ArenaPlayerInfo
{
    optional uint64           role_id    = 1;
	optional string           name       = 2;
	optional int32            player_num = 3;
	optional enProfessionType job        = 4 [default = EN_PROFESSION_NONE];
	optional int32            level      = 5;
}

message Proto_CSGetArenaPlayerListRsp
{
    optional bool             is_team     = 1;
	repeated ArenaPlayerInfo  player_info = 2;  
	repeated enProfessionType job         = 3;
	repeated ArenaLevelPair   level       = 4;
}

message Proto_CSArenaFightReq
{
    optional bool   is_team = 1;
	optional uint64 role_id = 2;
}

message Proto_CSArenaFightRsp
{
    
}

message Proto_CSControlActorNtf
{
    optional int32  new_obj_id = 1; //现在控制的对象ID
	optional int32  old_obj_id = 2; //原来控制的对象ID 
	optional uint64 role_id    = 3; //拥有控制权的玩家role id
}


enum ECityBuffOP
{
	EN_CITYBUFF_OP_ADD = 1;  // 添加buff
	EN_CITYBUFF_OP_DEL = 2;  //移除buff
	EN_CITYBUFF_OP_OVERLAY = 3; //覆盖buff
	EN_CITYBUFF_OP_TIME_REFRESH = 4; //时间刷新
	EN_CITYBUFF_OP_FROZEN = 5;  //冻结
	EN_CITYBUFF_OP_UNFROZEN = 6;  //解冻结
}

message Proto_CSCityBuffOPNtf
{
	optional uint64 role_id = 3;          //角色id
	optional ECityBuffOP buff_op = 1;     //操作类型
	optional CityBuffOneCS buff = 2;      //buff信息
	optional int32 obj_id = 4;			  //角色对象id
}

message Proto_CSCityBuffOPReq
{
	optional ECityBuffOP buff_op = 1;     //操作类型
	optional int32 buff_id = 2;           //操作的buff-id
}

message Proto_CSEnterDungeonReq
{
    optional int32 dungeon_id = 1;
}

message Proto_CSEnterDungeonRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
}

message Proto_CSGetDungeonAwardReq
{
    optional int32 award_idx = 1;
}

message Proto_CSGetDungeonAwardRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
}

message DungeonAwardInfo
{
    optional bool             is_get    = 1;
    optional Item             item      = 2;
	optional uint64           role_id   = 3;
	optional string           role_name = 4;
	optional enProfessionType job       = 5[default = EN_PROFESSION_NONE]; 
}

message Proto_CSDungeonAwardNtf
{
    optional int32            score    = 1;
    repeated DungeonAwardInfo awards   = 2;
	optional uint64           end_time = 3;
	optional bool             all_get  = 4;
}

message Proto_CSTriggerDungeonEventNtf
{
    optional int32 event_id = 1;
}

message Proto_SCTssSdkSendDataNtf
{
	optional bytes anti_data			= 1;
}

message Proto_CSTssSdkSendDataReq
{
	optional bytes anti_data			= 1;
}

message Proto_CSSyncRandSeedNtf
{
    optional int32  obj_id   = 1;
	optional uint64 main_id  = 2;
	optional uint64 rand_num = 3;
}

message Proto_CSStateLeaveReq
{
	optional bool state_leave = 1;   //是否离开状态
}


message Proto_CSStateLeaveRsp
{
	optional bool state_leave = 1;   //是否离开状态
}

//--连战 start--
message Proto_CSEnterMultiLevelReq
{
    optional int32 level_id = 1;
}

message Proto_CSEnterMultiLevelRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
}

message Proto_CSNextMultiLevelConfirmReq
{
    optional bool confirm = 1;
}

message Proto_CSNextMultiLevelConfirmRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
}

message Proto_CSMultiLevelInfoNtf
{
    optional RoleMultiLevelData multi_level_data = 1;
}

message Proto_CSMultiLevelSelectNextLevelReq
{
    optional int32 level_id = 1;
}

message Proto_CSMultiLevelSelectNextLevelRsp
{
    optional int32 level_id = 1;    
}

message Proto_CSMultiLevelSelectNtf
{
    repeated SelectMultiLevelInfo level_info = 1;
}
//--连战 end--

message ClientQuestionnaireData
{
	optional SingleQuestionaireData question_data = 1;
	optional bool has_questionnaire = 2;
}
message Proto_CSQuestionnaireDataNtf
{
	repeated ClientQuestionnaireData data = 1;
}

message Proto_CSQuestionnaireReq
{
	optional uint64 id			= 1;
}
message Proto_CSQuestionnaireRsp
{
	optional uint64 id			= 1;
}

// 设置私密设置
message Proto_CSRoleSecretSetModifyReq
{
	optional RoleSecretSetData secret_set				= 1;
}

message Proto_SCRoleSecretSetModifyRsp
{
	optional RoleSecretSetData secret_set				= 1;
}


message Proto_CSLoginNoticeNtf
{
	repeated SingleLoginData data	= 1;
}

message Proto_CSBindPhoneStatusNtf
{
	optional string activity_title = 1[(yd_fieldoptions.field_bufsize)=32, (yd_fieldoptions.field_string_len)=32];
	optional bool bind_phone_status = 2;
}

message Proto_CSBindPhoneAuthenCodeReq
{
	optional int64 phone_num = 1;
}
message Proto_CSBindPhoneAuthenCodeRsp
{
}
message Proto_CSBindPhoneReq
{
	optional int32 authen_code = 1;
}
message Proto_CSBindPhoneRsp
{
}

//--捉拿悬赏 start--
enum enWantedDataNtfType
{
    EN_WANTED_DATA_NTF_TYPE_SELF    = 0;
	EN_WANTED_DATA_NTF_TYPE_TEAM    = 1;
	EN_WANTED_DATA_NTF_TYPE_CURRENT = 2;
}


message Proto_CSWantedDataNtf
{
    repeated WantedOne           wanted_list  = 1;
	repeated WantedReward        reward_list  = 2;
	optional enWantedDataNtfType type         = 3 [default = EN_WANTED_DATA_NTF_TYPE_SELF];
	optional int32               new_item_num = 4;
}

message Proto_CSGetWantedDataReq
{
	optional enWantedDataNtfType type     = 1 [default = EN_WANTED_DATA_NTF_TYPE_SELF];
    optional bool                get_item = 2;
}

message Proto_CSGetWantedDataRsp
{
    optional Proto_CS_ErrorCode    ret = 1 [default = ERR_CODE_OK]; //结果
	optional Proto_CSWantedDataNtf ntf = 2;
}

message Proto_CSWantedChallengeNtf
{
    optional int32                  wanted_id  = 1;
	repeated int32                  param_list = 2;
	optional enWantedChallengeState state      = 3 [default = EN_WANTED_CHALLENGE_STATE_NONE];
}

message Proto_CSWatchWantedRewardReq
{
}
message Proto_CSWatchWantedRewardRsp
{
    optional Proto_CS_ErrorCode    ret = 1 [default = ERR_CODE_OK]; //结果
}

enum enTrainingConfigDifficulty
{
	E_TRAINING_CONFIG_DIFFICULTY_NORMAL = 0; //普通
	E_TRAINING_CONFIG_DIFFICULTY_ELITE = 1; //精英
	E_TRAINING_CONFIG_DIFFICULTY_BOSS = 2; //首领
}

message TrainingConfig
{
	optional enTrainingConfigDifficulty difficulty = 1[default=E_TRAINING_CONFIG_DIFFICULTY_NORMAL]; //难度
	optional int32 num = 2; //数量
	optional int32 level = 3; //等级
	optional bool deathless = 4; //是否不死，默认死亡 
}

message Proto_CSSetTrainingConfigReq
{
	optional TrainingConfig config = 1;
}

message Proto_CSSetTrainingConfigRsp
{
	optional TrainingConfig config = 1;
}

message Proto_CSResetTrainingLevelReq
{
}

//--捉拿悬赏 end--


message Proto_CSSkillPointAssignReq
{
	optional int32 id = 1;
	optional int32 branch = 2;
	optional int32 layer = 3;
	optional int32 pos = 4;
}

message Proto_CSSkillPointAssignRsp
{
	optional HeroSkillData skill_data = 1;
}

message Proto_CSSkillPointResetReq
{
	optional bool is_reset_level = 1;  //是否重置主动天赋等级
}

message Proto_CSSkillPointResetRsp
{
	optional HeroSkillData skill_data = 1;
}

message Proto_CSPlayTalkNtf
{
    optional int32 id       = 1;
	optional int32 duration = 2;
	optional int32 obj_id   = 3;
}

message Proto_CSTrainingGuideMsg
{
    required int32 id = 1;
    optional int32 guide_step = 2;
    optional int32 guide_step_times = 3;
}

enum enPrintUnityMsgType
{
    EN_PRINT_UNITY_MSG_TYPE_DEFAULT = 0;
    EN_PRINT_UNITY_MSG_TYPE_DEBUG   = 1;
	EN_PRINT_UNITY_MSG_TYPE_WARNING = 2;
	EN_PRINT_UNITY_MSG_TYPE_ERROR   = 3;
}

message Proto_CSPrintUnityMsgNtf
{
    optional enPrintUnityMsgType eType = 1 [default = EN_PRINT_UNITY_MSG_TYPE_DEFAULT];
	optional string              msg   = 2;
}

message Proto_CSFanTypeReportReq
{
	optional EFanType type = 1 [default = GAME_FAN_TYPE_UNKNOW];
}

message GiftMessageOne
{
    optional uint64             uid              = 1;                                     
    optional uint64             create_time      = 2;                                     
	optional string             comment          = 4;                                    
	repeated OneGift            gift_info        = 5;
    optional GiftClientRoleInfo my_role_info     = 6;                                     
	optional GiftClientRoleInfo target_role_info = 7;                                
    optional enGiftListType     type             = 8 [default = EN_GIFT_LIST_TYPE_ALL];  
    optional enGiftMessageType  message_type     = 9 [default = EN_GIFT_MESSAGE_TYPE_UPDATE]; 
    optional bool               is_read          = 10;
    optional bool               is_recv          = 11;
}

message Proto_CSGetGiftListReq
{
    optional enGiftListType type = 1 [default = EN_GIFT_LIST_TYPE_ALL];
}

message Proto_CSGetGiftListRsp
{
    optional enGiftListType type      = 1 [default = EN_GIFT_LIST_TYPE_ALL];
	repeated GiftMessageOne gift_list = 2;
}

message Proto_CSGiftNtf
{
    repeated GiftMessageOne gift_list = 1;
}

message Proto_CSAddGiftReq
{
    optional uint64        target_role_id   = 1;
    repeated OneGift       gift_info        = 2 [(yd_fieldoptions.field_arysize) = 8];
	optional string        comment          = 3 [(yd_fieldoptions.field_bufsize) = 256];
	optional enGiftAddType type             = 4 [default = EN_GIFT_ADD_TYPE_NONE];
	optional bool          anonymous        = 5;
}

message Proto_CSAddGiftRsp
{
    optional uint64             target_role_id   = 1;
    optional enGiftAddType      type             = 2 [default = EN_GIFT_ADD_TYPE_NONE];
    optional Proto_CS_ErrorCode ret              = 3 [default = ERR_CODE_OK]; //结果
}

message Proto_CSGiftOpReq
{
    optional uint64       uid     = 1;
	optional enGiftOpType op      = 2 [default = EN_GIFT_OP_TYPE_NONE];
    optional bool         accept  = 3;
    optional string       comment = 4;
}

message Proto_CSGiftOpRsp
{
    optional uint64             uid = 1;
	optional enGiftOpType       op  = 2 [default = EN_GIFT_OP_TYPE_NONE];
    optional Proto_CS_ErrorCode ret = 3 [default = ERR_CODE_OK]; //结果
}


message Proto_CSBarrageSendReq
{
	required int32 anime_id =1;
	required BarrageInfo barrage_info = 2;
}


message Proto_CSBarrageGetReq
{
	required int32 anime_id = 1;
}

message Proto_CSBarrageGetRsp
{
	required BarrageListInAnime list_in_anime = 1;
}

message Proto_CSHLicenseExamData
{
    repeated int32 first_exam_data = 1; // 考试数据
    repeated int32 acquired_exam_reward = 2;
}
message Proto_CSHLicenseSTData
{
    optional int32 lincese_id            = 10; // 
    optional int32 lincese_score         = 11; // 
    repeated int32 acquired_lincese_reward = 12; // 已获取的执照宝箱

    // 第一阶段·特训
    repeated int32 special_training_data = 21;

    // 第二阶段·特训
    repeated int32 special_training_random_list = 24; //随机特训id
    repeated int32 special_training_random_data = 25; //随机特训data
    repeated int32 acquired_special_training_reward = 26;
    optional int32 finished_special_training_day    = 27; // 本周已完成的特训天数
    //optional uint32 st_reset_week_time        = 26; 
    //optional uint32 st_reset_day_time = 27;
}

message Proto_CSLevelTransNtf
{
    optional int32  id         = 1;
	optional int32  time       = 2;
	optional uint64 start_time = 3;
}

message Proto_CSOnlineRewardRandReq
{
	optional int32 reserve = 1;
}

message Proto_CSOnlineRewardGetReq
{
	optional int32 reserve = 1;
}

message Proto_CSOnlineRewardDataNtf
{
	optional RoleOnlineRewardData online_reward_data = 1;
	optional int32 next_reward_time = 2;
}

enum enHealthGameRemindType
{
	EN_REMIND_TYPE_MESSAGE 			= 0;//提醒
	EN_REMIND_TYPE_ACCU_MESSAGE 	= 1;//累计提醒
	EN_REMIND_TYPE_FORCE_REST 		= 2;//强制下线  
	EN_REMIND_TYPE_ACCU_FORCE_REST 	= 3;//累计强制下线
}

message Proto_CSHealthGameGetInfoReq//登录后发送一次，获取提示时间和下线时间
{
	optional string open_id = 1;				//可能需要带openid
	optional string access_token = 2;		//可能需要accesstoke
}

message Proto_CSHealthGameDoneRemindReq//弃用：客户端执行提醒或下线操作后发送一次
{
	required enHealthGameRemindType remind_type = 1;//区分是提醒还是强制下线操作
	required uint32 remind_time = 2;//客户端执行操作的时间
}

message Proto_SCHealthGameForbidLoginNtf//登录时，服务器禁止登录，此时会发送一个禁止登录的消息包
{
	required uint32 sealed_time = 1;//时间，该时间以前均无法登录
	optional string sealed_reason = 2; //禁止登录的原因，预留
}

message Proto_SCHealthGameRemindInfoNtf//提示客户端做相应操作
{
	required HealthGameRemindInfo remind_info = 1; 
}

message Proto_SCHealthGameForceRestNtf//弃用：强制下线NTF
{
	optional uint32 force_rest_time = 1;//强制下线/封号时间
	optional uint32 unsealed_time = 2;//解封时间
}

message ActivityEightSingleData
{
	optional int32 id	= 1;			// 表格的编号
	optional int32 count = 2;			// 当前达到的数目	
	optional bool is_get_rwd = 3;		// 是否领取了奖励
}

//成长守护平台
message Proto_SCGuardianKickInfoNtf
{
    optional uint32 start_time = 1;
    optional uint32 end_time = 2;
    optional string reason = 3;
}

message Proto_SCGuardianGuardedInfoNtf
{
    optional uint32 start_time = 1;
    optional uint32 end_time = 2;
    optional string reason = 3;
}

// 获取所有数据
message Proto_CSActivityGetAllDataReq
{
}
message Proto_SCActivityGetAllDataRsp
{
	repeated ActivityEightSingleData data			= 1;
	repeated int32 score_rwd						= 2;	// 领取过的积分兑换编号id
	optional int32 cur_score						= 3;	// 当前的积分
}

// 获得奖励
message Proto_CSActivityGetRewardReq
{
	optional bool is_get_score					= 1;	// 是否是获得积分奖励，true为积分，false为目标奖励
	optional int32 id							= 2;	// 编号（积分编号或者完成目标的编号）
}

message Proto_SCActivityGetRewardRsp
{
	optional bool is_get_score					= 1;	// 是否是获得积分奖励，true为积分，false为目标奖励
	optional int32 id							= 2;	// 编号（积分编号或者完成目标的编号）
}

// 达成推送给前端
message Proto_SCActivityCanGetRwdNtf
{
	optional ActivityEightSingleData is_full	= 1;
}

message Proto_CSGuildDanceInfoNtf
{
	optional bool is_begin = 1;     //行会跳舞是否开始
	optional int32 npc_id = 2;      //跳舞npc
	optional Proto_Vector3 npc_pos = 3;   //npc位置
}

message Proto_CSBoxAwardNtf
{
	optional uint64 uuid = 1;     //单号
	optional int32 box_id = 2;    //宝箱id
	optional int32 left_time = 3;  //宝箱领取剩余时间
}

message Proto_CSBoxAwardGetReq
{
	optional uint64 uuid = 1;     //单号
	optional int32 box_id = 2;    //宝箱id
}

enum GuildQuestionPlayerNtfType
{
	EN_GUILD_PLAYER_NTF_ALL			= 1;	// 推送所有的
	EN_GUILD_PLAYER_NTF_JOIN		= 2;	// 玩家进入的
	EN_GUILD_PLAYER_NTF_LEAVE		= 3;	// 玩家离开
}

// 主动给玩家推送行会答题或者你被请出房间
// EN_GUILD_PLAYER_NTF_ALL 会推送所有玩家信息，且没有排序
// EN_GUILD_PLAYER_NTF_JOIN 只有加入的玩家信息
// EN_GUILD_PLAYER_NTF_LEAVE 只有离开的玩家信息，收到自己离开，就得删除房间
message Proto_SCGuildQuestionDataNtf
{
	optional GuildQuestionPlayerNtfType type	 = 1;
	repeated GuildQuestionPlayerData player_data = 2;	// 玩家信息
}

// 请求加入行会答题房间
message Proto_CSGuildQuestionJoinReq
{
}
message Proto_SCGuildQuestionJoinRsp
{
}

// 发送聊天到行会答题聊天室
message Proto_CSGuildQuestionSendMsgReq
{
	required string text = 1 [(yd_fieldoptions.field_bufsize)=512]; //文本内容，必填，即使是语音，也要翻译成中文
	optional bytes voice = 2 [(yd_fieldoptions.field_bufsize)=512]; //语音内容
	optional int32 voice_duration = 3; //语音时长
}

// 广播聊天
message Proto_SCGuildQuestionSendMsgNtf
{
	required string text = 1 [(yd_fieldoptions.field_bufsize)=512]; //文本内容，必填，即使是语音，也要翻译成中文
	optional bytes voice = 2 [(yd_fieldoptions.field_bufsize)=512]; //语音内容
	optional int32 voice_duration = 3; //语音时长
	optional ChatPlayerInfo player_info = 4; //玩家信息
	optional bool is_correct = 5;	// 答案是否正确
	optional int32 reward = 6;	// 奖励的贡献
	optional bool is_first = 7;	// 是否是第一个答对
	optional int32 score = 8;	// 获取到的积分
	optional string answer = 9;	// 答案
}

// 通知进度变化(玩家新进房间和阶段变化都会推送)
message Proto_SCGuildQuestionChangeNtf
{
	optional ENGuildQuestionProcessType process  = 1[default=EN_GUILD_QUESTION_NULL];	// 现在在什么阶段
	optional int32 question_index				 = 2;	// 题目序号，0表示没有出题，真正的题目序号是1开始的
	optional int32 process_time					 = 3;	// 阶段开始时间
	optional int32 question_id					 = 4;	// 题目的id
}

//----------------------------------------------------------------------------------------------------------------------------

message Proto_CSInstanceChallengeNtf
{
    optional InstanceChallenge challenge = 1;
}

message Proto_CSRushGetScoreRewardReq
{
    optional int32 index      = 1; //配置表中的第几个奖励(从0开始)
    optional int32 chapter    = 2; //章节
}

message Proto_CSStartTransferBattleReq
{
	optional int32 transfer_id = 1; //转职ID
}

message Proto_CSPlayerGiftDataNtf
{
    optional RoleGiftData gift_data = 1;
}

message Proto_CSPlayerCEDataNtf
{
    optional RoleCEData ce_data = 1;
}

message Proto_CSGetCERewardReq
{
    optional int32 reward_idx = 1;
}

message Proto_CSGetCERewardRsp
{
    optional int32              reward_idx = 1;
    optional Proto_CS_ErrorCode ret        = 2 [default = ERR_CODE_OK]; 
}

enum enGuildGroupReqType
{
    EN_GUILD_QQGROUP_CREATEBIND = 1;
    EN_GUILD_QQGROUP_UNLINK     = 2;
    EN_GUILD_QQGROUP_REMIND     = 3;
    EN_GUILD_QQGROUP_JOIN       = 4;
    EN_GUILD_QQGROUP_GETLIST    = 5;
    EN_GUILD_QQGROUP_GETGROUPINFO = 6;
}

message Proto_CSGuildGroupReq
{
    optional enGuildGroupReqType type = 1;    
}

message Proto_CSGuildGroupNtf
{
    optional int32 ret = 1;
    optional string msg = 2;
    optional QQGroupInfo group = 3;
    optional int32 relation = 4;
}

message Proto_CSAutoRecoverNtf
{
    optional RoleAutoRecoverData auto_recover_data = 1; 
}

message Proto_CSRisingPurchaseNtf
{
    optional RoleRisingPurchaseData rising_purchase_data = 1;
}

message Proto_CSRisingPurchaseBuyReq
{
    optional int32 group = 1;
    optional int32 num   = 2;
}

message Proto_CSRisingPurchaseBuyRsp
{
    optional int32              group = 1;
    optional int32              num   = 2;
    optional Proto_CS_ErrorCode ret   = 3 [default = ERR_CODE_OK]; 
}

message Proto_CSFlashUINtf
{
    optional int32 id         = 1;
    optional int32 param      = 2;
    repeated int32 param_more = 3;
}

// 安全信用分提示
message Proto_SCSafeScoreErrorNtf
{
	optional int32 score	= 1;
	optional int32 level  	= 2;
	optional int32 msg_id	= 3;	// 0为同步数据给前端，其他为错误提示
}

// 发送给客户端弹窗提示消息
message Proto_SCMsgSendMsgWindowNtf
{
	optional string msg_content			= 1;
}

enum enNotifyDataToClientType
{
	EN_NTF_DATA_TO_CLIENT_FORBIDDEN_CHAT_TYPE		= 1;
	EN_NTF_DATA_TO_CLIENT_FORBIDDEN_OBJ_TYPE		= 2;
	EN_NTF_DATA_TO_CLIENT_FORBIDDEN_TRADE_TYPE		= 3;
	EN_NTF_DATA_TO_CLIENT_FORBIDDEN_FRIEND_TYPE		= 4;
	EN_NTF_DATA_TO_CLIENT_FORBIDDEN_RENAME_TYPE		= 5;
	EN_NTF_DATA_TO_CLIENT_CREATE_BOX_TYPE			= 6;	// 打开福袋，返回的转发url
	EN_NTF_DATA_TO_CLIENT_GAME_PHOTO_GACE_TYPE		= 7;
}

message NotifyPlayerRenameData
{
	optional string name 	= 1;
	optional string reason 	= 2;
}

message NotifyBlessBoxShareUrl
{
	optional string url		= 1;
}

// 同步数据给前端
message Proto_SCNotifyDataToClientNtf
{
	optional IDIPForbiddenChatData ban_chat = 1;				// idip 的禁言
	optional enNotifyDataToClientType type	= 2;
	optional IDIPForbiddenData idip_forbidden = 3;				// idip封禁数据
	optional IDIPForbiddenTradeData forbidden_trade = 4; 		// idip的禁止交易
	optional IDIPForbiddenFriendData forbidden_friend = 5;		// idip的禁止添加好友
	optional NotifyPlayerRenameData rename_data = 6;			// 重置名字
	optional NotifyBlessBoxShareUrl share_url = 7;				// 福袋分享链接	
	optional IDIPGamePhotoFaceData game_photo_face	= 8;		// 游戏内拍脸图
}

message Proto_CSSelectLevelBlessReq
{
    optional SelectLevelBlessData bless = 1;
}

message Proto_CSSelectLevelBlessRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
}

message Proto_CSActiveLevelBlessReq
{
    optional enLevelBlessType type      = 1 [default=EN_LEVEL_BLESS_TYPE_NONE];
    optional bool             is_active = 2;
}

message Proto_CSActiveLevelBlessRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
}

message Proto_CSLevelBlessDataNtf
{
    repeated SelectLevelBlessData blesses = 1;
}

message Proto_CSActiveDoubleRewardReq
{
    optional bool is_active = 1;
}

message Proto_CSActiveDoubleRewardRsp
{
    optional Proto_CS_ErrorCode ret = 1 [default = ERR_CODE_OK]; //结果
}

// 获取活动任务奖励
message Proto_CSActivityQuestGetRwdReq
{
	optional int32 id				= 1;
}

// 推送活动任务变化
message Proto_SCActivityQuestChangeNtf
{
	optional ActivityQuestFinish act_data		= 1;
}

enum enEndMoveType
{
    EN_END_MOVE_TYPE_NONE  = 0;
    EN_END_MOVE_TYPE_REACH = 1;
    EN_END_MOVE_TYPE_BREAK = 2;
}

enum enAIMoveType
{
    EN_AI_MOVE_TYPE_NONE        = 0;
    EN_AI_MOVE_TYPE_RANDOM_MOVE = 1;
    EN_AI_MOVE_TYPE_TARGET_POS  = 2;
}

message Proto_CSEndMoveReq
{
    optional int32         obj_id     = 1;
    optional enEndMoveType type       = 2 [default = EN_END_MOVE_TYPE_NONE];
    optional enAIMoveType  move_type  = 3 [default = EN_AI_MOVE_TYPE_NONE];
    optional int32         move_id    = 4;
}

//------------------------------------------------------------------------------------------------------------------------------
//---------新伙伴系统-----------------------------------------------------------------------------------------------------------

enum EPartnerAssistOPType
{
	EN_ASSIST_FIGHT = 1;  //出战
	EN_ASSIST_REST = 2;   //休息
}

message Proto_CSPartnerAssistOPReq
{
	optional EPartnerAssistOPType type = 1 [default = EN_ASSIST_FIGHT];     //操作类型, 上阵下阵
	optional int32 index = 2;    //位置
	optional int32 id = 3;       //伙伴id
}

message Proto_CSPartnerAssistOPRsp
{
	optional EPartnerAssistOPType type = 1 [default = EN_ASSIST_FIGHT];     //操作类型, 上阵下阵
	optional int32 index = 2;    //位置
	optional int32 id = 3;       //伙伴id
	optional RolePartnerData partner_data = 4;    //伙伴全量信息
}

message Proto_CSPartnerSkillActiveReq
{
	optional int32 id = 1;           //伙伴id
	optional int32 skill_index = 2;  //技能索引
}

message Proto_CSPartnerSkillActiveRsp
{
	optional int32 id = 1;           //伙伴id
	optional int32 skill_index = 2;  //技能索引
	optional PartnerOne partner = 3; //伙伴信息
}

enum EPartnerRenewType
{
	EN_PARTNER_RENEW_10 = 0;  //续期10天
	EN_PARTNER_RENEW_30 = 1;  //续期30天
}

message Proto_CSPartnerRenewReq
{
	optional int32 id = 1;           //伙伴id
	optional EPartnerRenewType type = 2 [default = EN_PARTNER_RENEW_10];
}

message Proto_CSPartnerRenewRsp
{
	optional int32 id = 1;           //伙伴id
	optional EPartnerRenewType type = 2 [default = EN_PARTNER_RENEW_10];
	optional PartnerOne partner = 3; //伙伴信息
}

enum EPartnerTrainingType
{
	EN_PARTNER_TRAINING_BY_GOLD = 0;        //金币训练
	EN_PARTNER_TRAINING_BY_PINK_DIAMOND = 1;//粉钻训练 
}

message Proto_CSPartnerTrainingReq
{
	optional int32 id = 1;           //伙伴id
	optional EPartnerTrainingType type = 2[default = EN_PARTNER_TRAINING_BY_GOLD];
}

message Proto_CSPartnerTrainingRsp
{
	optional int32 id = 1;           //伙伴id
	optional EPartnerTrainingType type = 2[default = EN_PARTNER_TRAINING_BY_GOLD];
	optional PartnerOne partner = 3; //伙伴信息
	optional bool is_critical = 4;   //是否暴击
}

message Proto_CSPartnerFeedReq
{
	optional int32 id = 1;           //伙伴id
}

message Proto_CSPartnerFeedRsp
{
	optional int32 id = 1;           //伙伴id
	optional PartnerOne partner = 2; //伙伴信息
}

message Proto_CSPartnerAutoFeedReq
{
	optional int32 id = 1;           //伙伴id
	optional bool auto_feed = 2;          //自动喂食
}

message Proto_CSPartnerAutoFeedRsp
{
	optional int32 id = 1;           //伙伴id
	optional PartnerOne partner = 2; //伙伴信息
}

message Proto_CSPartnerFollowReq
{
	optional int32 id = 1;           //伙伴id
	optional bool is_follow = 2;     //是否跟随
}

message Proto_CSPartnerFollowRsp
{
	optional int32 id = 1;           //伙伴id
	optional bool is_follow = 2;     //是否跟随
	optional RolePartnerData partner_data = 3;    //伙伴全量信息
}

message Proto_CSPartnerDataNtf
{
	optional RolePartnerData data = 1;    //伙伴信息
}

enum enPartnerChgReason
{
	EN_PARTNER_CHG_NEW = 1;    //获得新伙伴
	EN_PARTNER_ATTR_CHG = 2;   //伙伴属性更新
}

message Proto_CSPartnerOneNtf
{
	optional PartnerOne partner = 1;  //伙伴
	optional enPartnerChgReason reason = 2; 
	repeated Item ex_item = 3;        //伙伴转换物品信息
}

message Proto_CSPartnerAISetReq
{
	optional enPartnerAIType type = 1[default = EN_PARTNER_AI_ATTACK];
}

message Proto_CSPartnerAISetRsp
{
	optional enPartnerAIType type = 1[default = EN_PARTNER_AI_ATTACK];
}

message Proto_CSPartnerBreakThroughReq
{
	optional int32 partner_id = 1;   //伙伴ID
}

message Proto_CSPartnerBreakThroughRsp
{
	optional PartnerOne partner = 1;  //伙伴
}

message Proto_CSPartnerSetGroupReq
{
	optional int32 group_id = 1;   //羁绊id
}

message Proto_CSPartnerSetGroupRsp
{
	optional int32 group_id = 1;    //羁绊id
	optional int32 group_star = 2;  //羁绊星级
}

message Proto_CSPartnerGroupNtf
{
	repeated PartnerGroupOne group_list = 1;
}


message Proto_CSEntranceActionFinishReq
{
    optional int32 obj_id = 1;
}

message Proto_CSBattleDrugCDNtf
{
	repeated DrugCDInfo drug_cd_info = 1 [(yd_fieldoptions.field_arysize) = 10];
}

message Proto_CSTormentTowerInfoReq
{

}

message Proto_CSTormentTowerInfoRsp
{
	optional RoleTormentTowerData data = 1;   //试炼塔数据
	optional TormentTowerRecord record = 2;   //服务器最高纪录
}

message Proto_CSTormentTowerAwardGetReq
{
	optional int32 id = 1;                   //大层，对应TormentTower 表中的ID
}

message Proto_CSTormentTowerAwardGetRsp
{
	optional int32 id = 1;                    //对应TormentTower 表中的ID
	optional RoleTormentTowerData data = 2;   //试炼塔数据
}

message Proto_CSTormentTowerSweepReq
{
	optional int32 reserve = 1;
}

message Proto_CSTormentTowerSweepRsp
{
	optional RoleTormentTowerData data = 1;   //试炼塔数据
}

message Proto_CSTormentTowerSweepAwardReq
{
	optional int32 reserve = 1;
}

message Proto_CSTormentTowerSweepAwardRsp
{
	optional RoleTormentTowerData data = 1;   //试炼塔数据
}

message Proto_CSTormentTowerResetReq
{

}

message Proto_CSTormentTowerResetRsp
{
	optional RoleTormentTowerData data = 1;   //试炼塔数据
}

message Proto_CSTormentTowerBattleReq
{
	optional int32 id = 1;    //大层id
}

message Proto_CSTormentTowerSweepSpeedReq
{

}

message Proto_CSTormentTowerSweepSpeedRsp
{
	optional RoleTormentTowerData data = 1;   //试炼塔数据
}

message Proto_CSTormentTowerDataNtf
{
	optional RoleTormentTowerData data = 1;   //试炼塔数据
}

message Proto_CSLegendRoadDataNtf
{
	optional LegendRoadData data = 1;
}

enum enLuckDrawType
{
	EN_LUCK_DRAW_TYPE_ONE = 1;	// 单抽
	EN_LUCK_DRAW_TYPE_FIVE = 5;	// 五连抽
}

// 转圈抽奖
message Proto_CSActivityLuckDrawReq
{
	optional enLuckDrawType type = 1;
}

message Proto_SCActivityLuckDrawRsp
{
	repeated int32 id = 1;
	optional ActivityLuckDrawData data	 = 2;	// 转盘数据
}

// 好友分享完成同步一条消息给后端
message Proto_CSRoleInfoFriendSharedReq
{
}

//--------------------------------------------------------------------------------------------------------------------------------
message Proto_CSReq
{
	optional int64                                         timeStamp                                  = 1; 
	optional Proto_CSLoginReq 		                       login                                      = 2;              //E_CS_LOGIN_REQ
	optional Proto_CSGetRoleReq		                       get_role                                   = 3;              //E_CS_GETROLE_REQ //E_CS_ACHIEVE_QUERY_REQ
	optional Proto_CSGmReq			                       gm                                         = 4;              //E_CS_GM_REQ
	optional Proto_CSHeroFormationReq                      formation                                  = 5;              //E_CS_HERO_FORMATION_REQ
	optional Proto_CSBattleSvrLoginReq                     battle_svr_login                           = 6;              //E_CS_BATTLESVR_LOGIN_REQ
	optional Proto_CSPvpFight                              pvp                                        = 100;            //E_CS_PVP_FIGHT
	optional Proto_CSChangeAvatarReq                       change_avatar                              = 7;              //E_CS_CHANGE_AVATAR_REQ
	optional Proto_CSDeleteRoleReq	                       del_role_req                               = 8;              //E_CS_DELETE_ROLE_REQ
	optional Proto_CSRoomCreateReq                         room_create                                = 9;              //E_CS_ROOM_CREATE_REQ
	optional Proto_CSRoomQueryListReq                      room_query_list                            = 10;             //E_CS_ROOM_QUERY_LIST_REQ
	optional Proto_CSRoomEnterReq                          room_enter                                 = 11;             //E_CS_ROOM_ENTER_REQ
	optional Proto_CSRoomLeaveReq                          room_leave                                 = 12;             //E_CS_ROOM_LEAVE_REQ
	optional Proto_CSRoomStartBattleReq                    room_start_battle                          = 13;             //E_CS_ROOM_START_BATTLE_REQ
	optional Proto_CSRoomChangeCampReq                     room_change_camp                           = 14;             //
	optional Proto_CSLoadingStatusReq                      loading_status                             = 15;             //E_CS_LOADING_STATUS_REQ
	optional Proto_CSBattleEnterReq                        enter_battle                               = 16;             //E_CS_ENTER_BATTLE_REQ
	optional Proto_FightPkg                                fight                                      = 17;             //E_CS_FIGHT_PKG
	optional Proto_CSBattleSituationReq                    battle_sit_rpt                             = 18;             //E_CS_BATTLE_SITUATION_REQ
	optional Proto_CSBattleRltReq                          battle_rlt_req                             = 19;             //E_CS_BATTLE_RESULT_REQ
	optional Proto_CSBattleActorDropReq                    battle_drop_req                            = 20;             //E_CS_BATTLE_DROP_REQ
	optional Proto_CSBattleRotateReq                       rotate_req                                 = 21;             //E_CS_BATTLE_Rotate_REQ
	optional Proto_CSActorPosReq                           actor_pos_req                              = 22;             //E_CS_ACTOR_POS_REQ
	optional Proto_CSRoomQueryReq                          room_query                                 = 23;             //E_CS_ROOM_QUERY_REQ
	optional Proto_CSMechStatusReq                         mech_req                                   = 24;             //E_CS_BATTLE_MECH_REQ
	optional Proto_CSBattleDriveMechReq                    drive_mech_req                             = 25;             //E_CS_BATTLE_DRIVEMECH_REQ
	optional Proto_CSActorPlatformReq                      actor_platform_req                         = 26;	 	        //E_CS_ACTOR_PLATFORM_REQ	
	optional Proto_CSEquipDressMsg                         equip_dress_req                            = 27;			    //E_CS_EQUIP_DRESS_REQ
	optional Proto_CSObjectBuffOPReq                       obj_buff_op_req                            = 28;             //E_CS_BUFF_OP_REQ
	optional Proto_CSHeartBeatReq 	                       heart_beat                                 = 29;             //E_CS_HEARTBEAT_REQ
	optional Proto_CSSetHeroDebut                          set_hero_debut_req                         = 35;             //E_CS_SET_DEBUT_SKILL_REQ
	optional Proto_CSRTTSetClockReq                        rtt_set_clock_req                          = 36;             //E_CS_BATTLESVR_RTT_REQ
	optional Proto_CSItemUseSet                            item_use_set                               = 37;		        //E_CS_ITEM_USE_SET
	optional Proto_CSSetSkin                               set_hero_skin_req                          = 38;             //E_CS_HERO_SET_SKIN_REQ
	optional Proto_CSBuySkin                               buy_hero_skin_req                          = 39;             //E_CS_HERO_BUY_SKIN_REQ
	optional Proto_CSRoomLookReq                           room_look_req                              = 40;	            //E_CS_ROOM_LOOK_REQ 
	optional Proto_CSRoomLookOutReq                        room_look_out_req                          = 41;
	optional Proto_CSRoomInfoChangeReq                     room_info_change_req                       = 42;             //E_CS_ROOM_INFO_CHANGE_REQ
	optional Proto_CSBattleSceneTriggerReq                 battle_scene_trigger_req                   = 43;             //E_CS_SCENE_TRIGGER_REQ 
	optional Proto_CSProgress                              progress_req                               = 44;             //E_CS_BATTLE_PROGRESS_REQ 
	optional Proto_CSMallListReq                           mall_list_req                              = 45;             //E_CS_MALL_LIST_REQ
	optional Proto_CSMallBuyReq                            mall_buy_req                               = 46;             //E_CS_MALL_BUY_REQ
	optional Proto_CSActorSetPosReq                        set_pos_req                                = 47;             //E_CS_ACTOR_SETPOS_REQ
	optional Proto_CSWatchBattleReq                        watch_battle_req                           = 49;             //E_CS_WATCH_BATTLE_REQ
	optional Proto_CSBattleWantFightReq                    want_fight_req                             = 50;             //E_CS_BATTLE_WANT_FIGHT_REQ
	optional Proto_CSChatSendReq                           chat_send_req                              = 51;             //E_CS_CHAT_REQ
	optional Proto_CSSecChatSendReq                        sec_chat_send_req                          = 57;             //E_CS_SEC_CHAT_VOICE_REQ
	optional Proto_CSSetObserver                           set_observer_req                           = 52;
	optional Proto_CSRoleRuneOPReq                         role_rune_op_req                           = 53;             //E_CS_ROLE_RUNE_OP_REQ
	optional Proto_CSRuneMakeReq                           rune_make_req                              = 54;             //E_CS_RUNE_MAKE_REQ
	optional Proto_CSRunePlateReq                          rune_plate_req                             = 55;             //E_CS_RUNE_PLATE_REQ
	optional Proto_CSRuneMergeReq                          rune_merge_req                             = 56;             //E_CS_RUNE_MERGE_REQ
	
	optional Proto_CSSetSkillTalentReq                     set_skill_talent_req                       = 58;             //E_CS_SETUP_SKILL_TALENT_REQ
	optional Proto_CSChangeHeroJobReq                      change_hero_job_req                        = 59;             //E_CS_CHANGE_HERO_JOB_REQ
	optional Proto_CSResetHeroJobReq                       reset_hero_job_req                         = 60;             //E_CS_RESET_HERO_JOB_REQ
	optional Proto_CSBoxExecReq                            box_exec_req                               = 61;             //E_CS_TREE_BOX_EXEC_REQ
	optional Proto_CSStartLevelReq                         start_level_req                            = 62;             //E_CS_START_LEVEL_REQ
	
	optional Proto_CSEquipMsg                              equip_req                                  = 63;             //E_CS_EQUIP_RESET_REQ 
                                                                                                                        //E_CS_EQUIP_STRENGTH_REQ //E_CS_EQUIP_INHERIT_REQ
																										
	optional Proto_CSBattleDiscardReq                      battle_discard_req                         = 65;             //E_CS_BATTLE_DISCARD_REQ
	optional Proto_CSBattleRevivalReq                      battle_revival_req                         = 66;             //E_CS_BATTLE_REVIVAL_REQ

	optional Proto_CSActionStateSyncReq                    action_state_sync_req                      = 67;             //E_CS_ACTION_STATE_SYNC_REQ
	optional Proto_CSSoulBoxReq                            soulbox_req                                = 68;         // E_CS_SOULBOX_PICK_REQ  E_CS_SOULBOX_TEAM_DROP_REQUIRE_REQ
	optional Proto_CSRuneActivatePlateReq                  rune_activate_plate_req                    = 69;             //E_CS_RUNE_ACTIVATE_PLATE_REQ
	optional Proto_CSLevelConditionCheckReq                level_condition_check_req                  = 71;             //E_CS_LEVEL_CONDITION_CHECK_REQ
	optional Proto_CSFriendApplyReq                        friend_apply_req                           = 72;             //E_CS_SNS_FRIEND_APPLY_REQ
	optional Proto_CSFriendQueryRoleReq                    friend_query_role_req                      = 73;             //E_CS_FRIEND_QUERY_ROLE_REQ
	optional Proto_CSFriendOperateReq                      friend_operate_req                         = 74;             //E_CS_SNS_FRIEND_OPERATE_REQ
	optional Proto_CSAIEndMacroReq                         ai_end_macro_req                           = 75;             //E_CS_AI_END_MACRO_REQ
	//optional Proto_CSParagonUsePointReq                    paragon_req                                = 76;             //E_CS_USE_PARAGON_POINT_REQ 
	optional Proto_CSFinishLoadingReq                      finish_loading                             = 77;             //E_CS_BATTLE_FINISH_LOADING_REQ
	optional Proto_CSActorMoveResultReq                    move_result_req                            = 78;             //E_CS_ACTOR_MOVE_RESULT_REQ
	optional Proto_CSQuickMatchReq                            quick_match_req                            = 79;             //E_CS_QUICK_MATCH_REQ
	optional Proto_CSBuyBagGridInfo                        buy_bag_grid_req                           = 80;             //E_CS_BUY_BAG_GRID_REQ
	optional Proto_CSBattlePauseReq                        battle_pause_req                           = 81;             //E_CS_BATTLE_PAUSE_REQ
	optional Proto_CSBattleContinueReq                     battle_continue_req                        = 82;             //E_CS_BATTLE_CONTINUE_REQ
	optional Proto_CSBattleSettingReq                      battle_setting_req                         = 83;             //E_CS_BATTLE_SETTING_REQ
	optional Proto_CSFriendRecommendReq                    friend_recommend_req                       = 84;             //E_CS_SNS_FRIEND_RECOMMEND_REQ
	optional Proto_CSSnsQueryRoleReq                       query_role_req                             = 85;             //E_CS_SNS_QUERY_ROLE_REQ
	optional Proto_CSFriendQueryReq                        friend_query_req                           = 86;             //E_CS_SNS_FRIEND_QUERY_REQ
	optional Proto_CSQueryRoleDetailReq                    query_role_detail_req                      = 87;             //E_CS_QUERY_ROLE_DETAIL_REQ

	optional Proto_CSMsgSendReq                            msg_send_req                               = 88;             //E_CS_SNS_MSG_SEND_REQ
	optional Proto_CSMsgHeadReq                            msg_head_req                               = 89;             //E_CS_SNS_MSG_HEAD_REQ
	optional Proto_CSMsgQueryReq                           msg_query_req                              = 90;             //E_CS_SNS_MSG_QUERY_REQ
	
	optional Proto_CSMailListReq                           mail_list_req                              = 91;             //E_CS_SNS_MAIL_LIST_REQ
	optional Proto_CSMailReadReq                           mail_read_req                              = 92;             //E_CS_SNS_MAIL_READ_REQ
	optional Proto_CSMailDelReq                            mail_del_req                               = 93;             //E_CS_SNS_MAIL_DEL_REQ

	optional Proto_CSGetRankReq                            get_rank_req                               = 94;             //E_CS_GET_EXP_RANK_REQ E_CS_GET_GS_RANK_REQ E_CS_GET_SKYAREMA_RANK_REQ
																														//E_CS_GET_MAGIC_RANK_REQ
	optional Proto_CSGuildListReq                          guild_list_req                             = 96;             //E_CS_GUILD_LIST_REQ
	optional Proto_CSGuildQueryReq                         guild_query_req                            = 97;             //E_CS_GUILD_QUERY_REQ
	optional Proto_CSGuildCreateReq                        guild_create_req                           = 98;             //E_CS_GUILD_CREATE_REQ
	optional Proto_CSGuildSetReq                           guild_set_req                              = 99;             //E_CS_GUILD_SET_REQ
	optional Proto_CSGuildApplyReq                         guild_apply_req                            = 101;            //E_CS_GUILD_APPLY_REQ
	optional Proto_CSGuildInviteReq                        guild_invite_req 					      = 102;            //E_CS_GUILD_INVITE_REQ
	optional Proto_CSGuildApproveApplyReq                  guild_approve_apply_req                    = 103;            //E_CS_GUILD_APPROVE_APPLY_REQ
	optional Proto_CSGuildAcceptInviteReq                  guild_accept_invite_req                    = 104;            //E_CS_GUILD_ACCEPT_INVITE_REQ
	optional Proto_CSGuildQuitReq                          guild_quit_req 						      = 105;            //E_CS_GUILD_QUIT_REQ
	optional Proto_CSGuildPromoteReq                       guild_promote_req                          = 106;            //E_CS_GUILD_PROMOTE_REQ
	optional Proto_CSGuildUpgrateReq                       guild_upgrate_req                          = 107;            //E_CS_GUILD_UPGRATE_REQ
	optional Proto_CSGuildShopListReq                      guild_shop_list_req 			              = 108;            //E_CS_GUILD_SHOP_LIST_REQ
	optional Proto_CSGuildShopBuyReq                       guild_shop_buy_req 				          = 109;            //E_CS_GUILD_SHOP_BUY_REQ
	optional Proto_CSGuildTechResearchReq                  guild_tech_research_req                    = 110;            //E_CS_GUILD_TECH_RESEARCH_REQ
	optional Proto_CSGuildTechLearnReq                     guild_tech_learn_req                       = 111;            //E_CS_GUILD_TECH_LEARN_REQ
	
	optional Proto_CSQuestAcceptReq                        quest_accept_req                           = 112;            //E_CS_ACCEPT_QUEST_REQ
	optional Proto_CSQuestCompleteReq                      quest_complete_req                         = 113;            //E_CS_COMPLETE_QUEST_REQ
	
	optional Proto_CSGuildGetSysRecommadReq                guild_get_sys_recommand_req                = 114;            //E_CS_GUILD_GET_SYSTEM_RECOMMAND_REQ
	optional Proto_CSGuildResearchReq         		       guild_research_req         			      = 115;            //E_CS_GUILD_RESEARCH_REQ
	optional Proto_CSGuildMergeWithOtherReq    		       guild_merge_req         			          = 116;            //E_CS_GUILD_MERGE_WITH_OTHER_REQ
	optional Proto_CSGuildOperateMergeListReq  		       guild_merge_list_op_req        		      = 117;            //E_CS_GUILD_MERGE_LIST_OPERATE_REQ
	optional Proto_CSGuildGetBonusReq  				       guild_get_bonus_req        			      = 118;            //E_CS_GUILD_GET_MY_BONUS_REQ
	
    optional enBagPageType                                 page_type                                  = 120;            //E_CS_ARRANGE_BAG_REQ

    optional int32  achieve_id  = 159; //E_CS_ACHIEVE_GET_REWARD_REQ E_CS_ACHIEVE_FINISH_REQ
	optional Proto_CSQuestLoopAcceptReq                    quest_accept_loop_req                      = 169;            //E_CS_ACCEPT_QUEST_LOOP_REQ

	optional Proto_CSOpenBoxReq                            open_box_req                               = 170;            //E_CS_OPEN_BOX_REQ;
	optional Proto_CSUseItemReq                            use_item_req                               = 171;            //E_CS_ITEM_USE_REQ 
	optional Proto_CSGemstoneDressMsg                      gemstone_dress_req                         = 172;            //E_CS_GEMSTONE_DRESS_REQ
	
	optional Proto_CSRoomInviteFriendReq                   room_invite_friend_req                     = 174;            //E_CS_ROOM_INVITE_FRIEND_REQ
	optional Proto_CSRoomGuildInviteReq                    room_guild_invite_req                      = 175;            //E_CS_ROOM_GUILD_INVITE_REQ
	optional Proto_CSRoomGuildApplyReq                     room_guild_apply_req                       = 176;            //E_CS_ROOM_GUILD_APPLY_REQ
	optional Proto_CSRoomAgreeReq                          room_agree_req                             = 177;            //E_CS_ROOM_AGREE_REQ

	//optional Proto_CSBattleScoreInvite                   battle_friend_invite                       = 181;            //E_CS_BATTLE_SCORE_FRIEND_INVITE_REQ
	optional Proto_CSBattleScoreConfimReq                  battle_score_confim                        = 182;            //E_CS_BATTLE_SCORE_CONFIM_REQ
	
	optional Proto_CSRedEnvelopesSendReq                   red_envelopes_send                         = 183;            //E_CS_RED_ENVELOPES_SEND_REQ
	optional Proto_CSRedEnvelopesObtainReq                 red_envelopes_obtain                       = 184;            //E_CS_RED_ENVELOPES_OBTAIN_REQ
	optional Proto_CSRedEnvelopesOpenReq                   red_envelopes_open                         = 185;            //E_CS_RED_ENVELOPES_OPEN_REQ	
	optional Proto_CSRedEnvelopesGuildAllReq               red_envelopes_list                         = 186;            //E_CS_RED_ENVELOPES_GUILD_ALL_REQ
	
	optional Proto_CSGuildWarScheduleListReq               guildwar_schedule_list_req                 = 189;            //E_CS_GUILDWAR_SCHEDULE_LIST_REQ
	optional Proto_CSGuildWarRankListReq                   guildwar_rank_list_req                     = 190;            //E_CS_GUILDWAR_RANK_LIST_REQ
	optional Proto_CSGuildWarChampionListReq               guildwar_champion_list_req                 = 191;            //E_CS_GUILDWAR_CHAMPION_LIST_REQ
	optional Proto_CSGuildWarJoinReq                       guildwar_join_req                          = 192;            //E_CS_GUILDWAR_JOIN_REQ
	optional Proto_CSGuildWarSetTeamReq                    guildwar_set_team_req                      = 193;            //E_CS_GUILDWAR_SET_TEAM_REQ
	optional Proto_CSGuildWarSetHeroReq                    guildwar_set_hero_req                      = 194;            //E_CS_GUILDWAR_SET_HERO_REQ	
	
	optional Proto_CSGuildWarConfirmReq                    guildwar_confirm_req                       = 196;            //E_CS_GUILDWAR_CONFIRM_REQ
	optional Proto_CSGuildWarRoomEnterReq                  guildwar_room_enter_req                    = 197;            //E_CS_GUILDWAR_ROOM_ENTER_REQ
	
	optional Proto_CSOBWatchMsg                            watch_battle_msg                           = 198;            //E_CS_OB_MSG_REQ
	optional Proto_CSGuildWarQueryReq                      guildwar_query_req                         = 199;            //E_CS_GUILDWAR_QUERY_REQ
	optional Proto_CSSnsSetSignatureReq                    set_signature_req                          = 201;            //E_CS_SNS_SET_SIGNATURE_REQ
   
	optional Proto_CSItemDecomposReq                       decompos_item_req                          = 202;            //E_CS_ITEM_DECOMPOS_REQ 
	optional Proto_CSSubstitutionReq                       substitution_req                           = 203;            //E_CS_BATTLE_SUBSTITUTION_REQ
	optional Proto_CSCurrencyExchangeReq                   currency_exchange_req                      = 204;            //E_CS_CURRENCY_EXCHANGE_REQ
	optional Proto_CSClientSysState                        client_sys_state_req                       = 205;            //E_CS_CLIENT_SYSTEM_STATE
	optional Proto_CS1v1InviteReq                          one_v_one_invite_req                       = 207;            //E_CS_ROOM_1V1_INVITE_REQ    
	optional Proto_CS1v1InviteOPReq                        one_v_one_invite_op_req                    = 208;            //E_CS_ROOM_1V1_INVITE_OP_REQ        

    optional enMatchGameType match_game_type  = 210[default=EN_MATCH_GAME_TYPE_NONE]; // E_CS_START_MATCH_REQ E_CS_CANCLE_MATCH_REQ E_CS_CONFIRM_MATCH_REQ E_CS_START_TEAM_MATCH_REQ
    
    optional int32           skyarena_award_index = 212; //E_CS_SKYARENA_GET_AWARD_REQ 

    optional int32           player_level   = 215; // E_CS_GET_LEVEL_BOUNS_REQ

	optional Proto_CSPickSceneDropObjReq              pick_scene_drop_obj_req               = 218;          //E_CS_BATTLE_PICK_DROP_OBJ_REQ 
	//optional RoleNoviceGuide                        novice_guide_get_req                  = 219;          //E_CS_NOVICE_GUIDE_GET_REQ
	optional RoleNoviceGuide                          novice_guide_set_req                  = 220;	        //E_CS_NOVICE_GUIDE_SET_REQ
	optional Proto_CSCommentDataReq                   comment_data_req                      = 221;          //E_CS_HERO_COMMENT_DATA_REQ 
	optional Proto_CSBangCommentReq                   bang_comment_req                      = 222;          //E_CS_HERO_BANG_COMMENT_REQ
	optional Proto_CCommentHeroReq                    comment_hero_req                      = 223;          //E_CS_HERO_COMMENT_HERO_REQ
	optional Proto_CSRiftDataReq                      rift_data_req                         = 225;          //E_CS_RIFTDATA_REQ
	optional Proto_CSRiftFloorBonusesReq              rift_floor_bonuses_req                = 226;          //E_CS_RIIT_FLOOR_BONUSES_REQ
	optional Proto_CSMPveBounsReq                     mpve_bouns_req                        = 227;          //
	
	optional Proto_CSGuildActivityDonateReq                guild_activity_donate_req                  = 230;            //E_CS_GUILDACTIVITY_DONATE_TICKET_REQ
	optional Proto_CSGuildActivityStartReq                 guild_activity_start_req                   = 231;            //E_CS_GUILDACTIVITY_START_REQ
	optional Proto_CSGuildActivityChallengeReq             guild_activity_challenge_req               = 232;            //E_CS_GUILDACTIVITY_CHALLENGE_REQ

	optional Proto_CSQuerySupportListReq                   query_support_list_req                     = 241;            //E_CS_QUERY_SUPPORT_LIST_REQ
	optional Proto_CSCallSupportReq                        call_support_req                           = 242;            //E_CS_CALL_SUPPORT_REQ
	optional CSSupportInviteFriend                         support_invite_friend                      = 243;            //E_CS_MSGID_SUPPORT_INVITE_FRIEND_REQ
	optional CSSupportReplyInvite                          support_invite_reply                       = 244;            //E_CS_MSGID_SUPPORT_REPLY_INVITE_REQ

	optional uint32                                        server_seq                                 = 250; 		    //E_CS_RELAY_REQ E_CS_BATTLE_RELAY_REQ
	optional Proto_CSExtShopItemReq                	       ext_shop_item_req                  	      = 251;            //E_CS_RIIT_SHOP_ITEM_REQ
	optional Proto_CSExtShopBuyItemReq             	       ext_shop_buy_item_req              	      = 252;            //E_CS_RIIT_SHOP_BUY_ITEM_REQ
	optional Proto_CSRoomReadyReq                          room_ready_req                             = 253;            //E_CS_ROOM_READY_REQ 

	optional Proto_CSMPveCharpterInfoReq                   mpve_charpter_info_req                     = 254;            //E_CS_MPVE_CHARPTER_REQ

	optional CSTeamCreate                             team_create                           = 255;          //E_CS_MSGID_TEAM_CREATE_TEAM_REQ
	optional CSTeamInviteFriend						  leader_invite_friend				    = 256;			//E_CS_MSGID_TEAM_LEADER_INVITE_FRIEND_REQ
	optional CSTeamInviteFriend                       invite_friend                         = 257;          //E_CS_MSGID_TEAM_INVITE_FRIEND_REQ
	optional CSTeamInviteLeaderReply				  leader_reply_invite_friend			= 258; 			//E_CS_MSGID_TEAM_INVITE_FRIEND_LEADER_REPLY_REQ
	optional CSTeamReplyInvite                        invite_reply                          = 259;          //E_CS_MSGID_TEAM_REPLY_INVITE_REQ
	optional CSTeamQuit                               team_quit                             = 260;          //E_CS_MSGID_TEAM_QUIT_REQ
	optional CSTeamApply                              team_apply                            = 261;          //E_CS_MSGID_TEAM_APPLY_REQ
	optional CSTeamApplyReply                         team_apply_reply                      = 262;          //E_CS_MSGID_TEAM_APPLY_REPLY_REQ
	optional CSTeamQueryList                          team_query_list_req                   = 263;          //E_CS_MSGID_TEAM_QUERY_LIST_REQ
	optional CSTeamStartBattleReq                     team_start_battle_req                 = 264;          //E_CS_MSGID_TEAM_START_BATTLE_REQ
	optional CSTeamChangeSettingsReq				  team_change_setting_req				= 265;			//E_CS_MSGID_TEAM_CHANGE_SETTINGS_REQ
	optional CSTeamStartBattleConfirmReq			  team_start_battle_confirm_req		    = 266; 			//E_CS_MSGID_TEAM_START_BATTLE_CONFIRM_REQ
	optional CSTeamSetPlayerStateReq				  team_set_player_state_req			    = 267;			//E_CS_MSGID_TEAM_SET_PLAYER_STATE_REQ
	optional CSTeamKickReq							  team_kick_req						    = 268; 			//E_CS_MSGID_TEAM_KICK_REQ
	optional CSTeamAppointLeaderReq					  team_appoint_leader_req				= 269;			//E_CS_MSGID_TEAM_APPOINT_LEADER_REQ
	optional CSTeamApplyLeaderReq					  team_apply_leader_req				    = 270;			//E_CS_MSGID_TEAM_APPLY_LEADER_REQ
	optional CSTeamReplyApplyLeaderReq				  team_apply_leader_reply_req			= 271;			//E_CS_MSGID_TEAM_APPLY_LEADER_REPLY_REQ
	optional CSTeamRecallReq						  team_recall_req						= 272;			//E_CS_MSGID_TEAM_RECALL_REQ
	optional CSTeamReplyRecallReq					  team_reply_recall_req				    = 273;			//E_CS_MSGID_TEAM_REPLY_RECALL_REQ
    optional CSTeamAutoMatchReq                       team_auto_match_req   = 275;          //E_CS_MSGID_TEAM_AUTO_MATCH_REQ
	optional CSTeamReplyHalfwayJoinBattleInviteReq 	  team_reply_halfway_join_invite_req	= 276;			//E_CS_MSGID_TEAM_REPLY_HALFWAY_JOIN_INVITE_REQ
	
	optional Proto_CSSelectHeroReq                         select_hero_req                            = 281;
	
    optional Proto_CSBattleEndSecReportReq       battle_end_sec_report            = 282; //E_CS_SEC_BATTLE_END_REPORT_REQ

	
	optional Proto_CSLineUpCancelReq                       lineup_cancel_req                          = 291;            //E_CS_LINEUP_CANCEL_REQ
	optional Proto_CSQuestLoopResetReq                     reset_quest_loop_req                       = 300;            //E_CS_QUEST_LOOP_RESET_REQ

	optional Proto_CSBattleInitiateSurrenderReq            initiate_surrender_req                     = 301;            //E_CS_BATTLE_INITIATE_SURRENDER_REQ
	optional Proto_CSBattleSurrenderReq                    surrender_req                              = 302;            //E_CS_BATTLE_SURRENDER_REQ

	optional Proto_CSMainCityFriendInfoReq                 main_city_friend_info		              = 303;            //E_CS_MAIN_CITY_FRIEND_INFO_REQ  请求主城好友信息 
	optional Proto_CSMainCityChangeHeroReq                 main_city_change_hero		              = 304;            //E_CS_MAIN_CITY_CHANGE_HERO_REQ  主城请求切换英雄 
	optional Proto_CSFriend1v1InviteReq           	       friend_1v1_invite_req                      = 305;            //E_CS_FRIEND_1V1_INVITE_REQ
	optional Proto_CSFriendNotRecommand           	       friend_not_recommand_req                   = 306;            //E_CS_FRIEND_NOT_RECOMMAND_REQ

	optional Proto_CSQuestionReq                           question_req                               = 311;            //E_CS_QUESTION_REQ
	optional Proto_CSAnswerReq                             answer_req                                 = 312;            //E_CS_ANSWER_REQ 
	//optional Proto_CSAnswerWrongReq                      answer_wrong_req                           = 313;            //E_CS_ANSWER_WRONG_REQ 
	optional Proto_CSHelpQuestionReq                       help_question_req                          = 314;            //E_CS_QUESTION_HELP_REQ
	optional Proto_CSHelpQuestionAnswerReq                 help_question_answer_req                   = 315;            //E_CS_QUESTION_HELP_ANSWER_REQ
	optional Proto_CSAwardQuestionRewardReq                award_question_reward_req                  = 316;            //E_CS_AWARD_QUESTION_REWARD_REQ 
	optional Proto_CSRecvQuestionStartNtfReq               recv_question_startntf_req                 = 317;            //E_CS_QUESTION_STARTNTF_REQ
	optional Proto_CSQuestionStartReq                      question_start_req                         = 318;            //E_CS_QUESTION_START_REQ

	optional Proto_CSHeroRankUpReq                         hero_rank_up_req                           = 321;            //E_CS_HERO_RANK_UP_REQ

	optional Proto_CSPlayerAutoFightReq                    player_auto_fight_req                      = 331;            //E_CS_PLAYER_AUTO_FIGHT_REQ

	optional Proto_CSGetPlayerCreditDataReq                get_player_credit_data_req                 = 341;            //E_CS_GET_PLAYER_CREDIT_DATA_REQ
	optional Proto_CSCreditReportPlayerReq                 credit_report_player_req                   = 342;            //E_CS_CREDIT_REPORT_PLAYER_REQ

	optional Proto_GachaPonReq                             gachapon_req                               = 355;            //E_CS_GACHAPON_REQ
	optional Proto_CSDrawReq                               draw_req                                   = 356;            //E_CS_DRAW_REQ 
	optional Proto_CSSynthesisReq                          synthesis_req                              = 357;            //E_CS_SYNTHESIS_REQ

	optional Proto_CSHeroComposeReq                        hero_compose_req                           = 358;            //E_CS_HERO_COMPOSE_REQ
	optional Proto_CSHeroPieceExchangeReq                  hero_piece_exchange_req                    = 359;            //E_CS_HERO_PIECE_EXCHANGE_REQ
	
	optional Proto_CSNianPracticeChallengeReq              nian_practice_challenge_req                = 362;            //E_CS_NIAN_PRACTICE_CHALLENGE_REQ
	optional Proto_CSNianPracticeReq                       nian_practice_req                          = 363;            //E_CS_NIAN_PRACTICE_REQ
	
	optional Proto_CSClientBackgroundReq                   client_background_req                      = 370;            //E_CS_CLIENT_BACKGROUND_REQ
	optional Proto_CSClientForegroundReq                   client_foreground_req                      = 371;            //E_CS_CLIENT_FOREGROUND_REQ
    optional int32  client_log_check_point_req  = 372; // E_CS_LOG_CHECK_POINT_REQ

	optional Proto_CSMapEnterReq                           map_enter_req                              = 384;            //E_CS_MAP_ENTER_REQ 进入地图请求
	optional Proto_CSMapLeaveReq                           map_leave_req                              = 385;            //E_CS_MAP_LEAVE_REQ 地图传送
	optional Proto_CSMapPosReq                             map_pos_req                                = 386;            //E_CS_MAP_POS_REQ 同步位置
	optional Proto_CSMapActionReq                          map_action_req                             = 387;            //E_CS_MAP_ACTION_REQ 同步action
	optional Proto_CSMapSvrLoginReq                        mapsvr_login_req                           = 388;            //E_CS_MAPSVR_LOGIN_REQ 登录地图服务器
	optional Proto_CSMapQueryReq                           map_query_req                              = 389;            //E_CS_MAP_QUERY_REQ 查询地图的服务器地址
	optional Proto_CSMapCollectReq                         map_collect_req                            = 390;            //E_CS_MAP_COLLECT_REQ 采集
	
	optional int32                                         quest_giveup_req                           = 420;            //E_CS_GIVE_UP_QUEST_REQ   

	optional Proto_CSEscortAcceptReq                       escort_accept_req                          = 421;            //E_CS_ESCORT_ACCEPT_REQ
	optional Proto_CSEscortCompleteReq                     escort_complete_req                        = 422;            //E_CS_ESCORT_COMPLETE_REQ
	
	optional Proto_CSActivityDegreeGetAllReq 		       activity_degree_get_all_req  		      = 423;            //E_CS_ACTIVITY_DEGREE_GET_ALL_REQ   
	optional Proto_CSActivityDegreeGetRewardReq 	       activity_degree_get_reward_req  	          = 424;            //E_CS_ACTIVITY_DEGREE_GET_REWARD_REQ   

	optional Proto_CSEscortQueryReq                        escort_query_req                           = 425;            //E_CS_ESCORT_QUERY_REQ

	optional int32                                         storage_index                              = 430;            //E_CS_ARRANGE_STORAGE_REQ 
	optional Proto_CSStorageMoveReq                        storage_move_pick_req                      = 431;            //E_CS_STORAGE_SAVE_REQ //E_CS_STORAGE_PICK_REQ


	optional Proto_CSModifyRoleInfoReq                     modify_role_info_req	                      = 433;            // E_CS_ROLE_INFO_MODIFY_REQ

	optional Proto_CSGetLifeSkillDataReq                   get_life_skill_data_req                    = 440;            //E_CS_LIFE_SKILL_GET_DATA_REQ
	optional Proto_CSLifeSkillLevelUpReq                   life_skill_level_up_req                    = 441;            //E_CS_LIFE_SKILL_LEVEL_UP_REQ
	optional Proto_CSUseLifeSkillReq                       use_life_skill_req                         = 442;            //E_CS_LIFE_SKILL_USE_REQ
   
	optional Proto_CSZoneBaseInfoReq                       zone_base_info_req                         = 443;            //E_CS_ROLE_ZONE_GET_ROLE_INFO_REQ
	optional Proto_CSZoneFriendStatusReq                   zone_friend_status_req                     = 444;            //E_CS_ROLE_ZONE_GET_FRIEND_STATUS_REQ
	optional Proto_CSZoneRoleStatusReq                     zone_role_status_req                       = 445;            //E_CS_ROLE_ZONE_GET_ROLE_STATUS_REQ
	optional Proto_CSZonePublishStatusReq                  zone_publish_status_req                    = 446;            //E_CS_ROLE_ZONE_PUBLISH_STATUS_REQ
	optional Proto_CSZoneStatusDetailReq                   zone_status_detail_req                     = 447;            //E_CS_ROLE_ZONE_STATUS_DETAIL_REQ
	optional Proto_CSZoneStatusUpInfoReq                   zone_status_up_info_req                    = 448;            //E_CS_ROLE_ZONE_STATUS_UP_INFO_REQ
	optional Proto_CSZoneStatusNotesInfoReq                zone_status_notes_info_req                 = 449;            //E_CS_ROLE_ZONE_STATUS_NOTES_INFO_REQ
	optional Proto_CSZoneNoteStatusReq                     zone_note_status_req                       = 450;            //E_CS_ROLE_ZONE_NOTE_STATUS_REQ
	optional Proto_CSZoneDeleteNoteReq                     zone_delete_notes_req                      = 451;            //E_CS_ROLE_ZONE_DELETE_NOTES_REQ
	optional Proto_CSZoneDeleteStatusReq                   zone_delete_status_req                     = 452;            //E_CS_ROLE_ZONE_DELETE_STATUS_REQ
	optional Proto_CSZoneMessageBoardReq                   zone_message_board_req                     = 453;            //E_CS_ROLE_ZONE_MESSAGE_BOARD_REQ
	optional Proto_CSZoneStepOnReq                         zone_step_on_req                           = 454;            //E_CS_ROLE_ZONE_STEP_ON_REQ
	optional Proto_CSZoneSetGiftReq                        zone_set_gift_req                          = 455;            //E_CS_ROLE_ZONE_SET_GIFT_REQ
	optional Proto_CSZonePublishMessageReq                 zone_publish_message_req                   = 456;            //E_CS_ROLE_ZONE_PUBLISH_MESSAGE_REQ
	optional Proto_CSZoneDeleteMessageReq                  zone_delete_message_req                    = 457;            //E_CS_ROLE_ZONE_DELETE_MESSAGE_REQ
	
	optional Proto_CSUseTreasureMapReq                     use_treasuremap_req                        = 460;            //E_CS_USE_TREASUREMAP_REQ
	
	optional Proto_CSSkillLevelUpReq                       skill_levelup_req                          = 461;            //E_CS_SKILL_LEVELUP_REQ
	optional Proto_CSSkillAwakeResetReq                    skill_awake_reset_req                      = 462;            //E_CS_SKILL_AWAKE_RESET_REQ
	optional Proto_CSSkillSelectTalentReq                  skill_select_talent_req                    = 463;            //E_CS_SKILL_SELECT_TALENT_REQ
	optional Proto_CSSkillAttachReq                        skill_attach_req                           = 464;            //E_CS_SKILL_ATTACH_REQ
	optional Proto_CSSkillAwakeReq                         skill_awake_req                            = 465;            //E_CS_SKILL_AWAKE_REQ
	optional Proto_CSSkillReadReq                          skill_read_req                             = 466;            //E_CS_SKILL_READ_REQ
	
	optional Proto_CSRiftLevelFastDataReq                  rift_level_fast_data_req                   = 470;			//E_CS_RIFT_LEVEL_FAST_DATA_REQ
	optional Proto_CSRiftLevelAwardReq                     rift_level_award_req                       = 471;			//E_CS_RIFT_LEVEL_AWARD_REQ
	//optional Proto_CSResetRiftReq                        reset_rift_req                             = 472;			//E_CS_RESET_RIFT_REQ 
	optional Proto_CSFPOperateReq                          fp_operate_req                             = 473;            //E_CS_ATTR_FP_OPERATE_REQ

	optional Proto_RiftChaptersReq	                       rift_chapters_req                          = 474;			//E_CS_RIFT_CHAPTERS_REQ	
	
	optional Proto_CSShopItemReq                           shop_item_req                              = 475;            //E_CS_SHOP_ITEM_REQ
	optional Proto_CSItemExchangeReq                       item_exchange_req                          = 476;            //E_CS_ITEM_EXCHANGE_REQ
	optional Proto_CSCreateRoleReq                         create_role_req                            = 479;            //E_CS_CREATE_ROLE_REQ
	optional Proto_CSStorageThrowMsg                       storage_throwaway_req                      = 490;            //E_CS_STORAGE_THROWAWAY_REQ

	optional Proto_CSGetTrapTowerBuffReq                   traptower_buff_req                         = 491;			//E_CS_GET_TRAPTOWER_BUFF_REQ
	optional Proto_CSTrapTowerScoreAwardReq                traptower_score_award_req                  = 492;			//E_CS_TRAPTOWER_SCORE_AWARD_REQ

	optional bool                                          is_click_quit_req                          = 493;			//E_CS_BATTLESVR_QUIT_REQ
	
    optional Proto_CSGetActivityRankListReq                get_activity_rank_list_req                 = 500;            //E_CS_GET_ACTIVITY_RANK_LIST_REQ
    optional Proto_CSGetSixExperimentScoreRewardReq        get_six_experiment_score_reward_req        = 501;            //E_CS_GET_SIX_EXPERIMENT_SOCRE_REWARD_REQ
    optional int32                                         quest_exp_chain_index                      = 502;            //E_CS_QEC_QUICK_FIN_REQ
    optional Proto_CSDailogWithNpcReq                      dailog_with_npc_req                        = 503;            //E_CS_QEC_DAILOG_REQ
    optional Proto_CSQECHelpMsg                            quest_exp_chain_help_req                   = 504;            //E_CS_QEC_HELP_REQ
    optional Proto_CSWelfareGetExpReq                      welfare_get_exp_req                        = 505;            //E_CS_GUILD_ACTIVITY_TRANSPORT_GOODS_REQ
	optional Proto_CSChamberListReq                        chamber_list_req                           = 506;            //E_CS_CHAMBER_LIST_REQ
	optional Proto_CSChamberBuyReq                         chamber_buy_req                            = 507;            //E_CS_CHAMBER_BUY_REQ
	optional Proto_CSChamberSellReq                        chamber_sell_req                           = 508;            //E_CS_CHAMBER_SELL_REQ
	optional Proto_CSChamberSellListReq                    chamber_sell_list_req                      = 509;            //E_CS_CHAMBER_SELL_LIST_REQ
    optional Proto_CSQECFinishWithItemReq                  qec_finish_with_item_req                   = 510 ;           //E_CS_QEC_FINISH_WITH_ITEM_REQ

	optional Proto_CSMarketListReq                         market_list_req                            = 511;            //E_CS_MARKET_LIST_REQ
	optional Proto_CSMarketBuyReq                          market_buy_req                             = 512;            //E_CS_MARKET_BUY_REQ
	optional Proto_CSMarketSellReq                         market_sell_req                            = 513;            //E_CS_MARKET_SELL_REQ
	optional Proto_CSMarketSellListReq                     market_sell_list_req                       = 514;            //E_CS_MARKET_SELL_LIST_REQ
	optional Proto_CSMarketPriceReq                        market_price_req                           = 515;            //E_CS_MARKET_PRICE_REQ
	optional Proto_CSMarketSellCancelReq                   market_sell_cancel_req                     = 516;            //E_CS_MARKET_SELL_CANCEL_REQ
	optional Proto_CSMarketFocusReq                        market_focus_req                           = 517;            //E_CS_MARKET_FOCUS_REQ
	optional Proto_CSMarketFocusCancelReq                  market_focus_cancel_req                    = 518;            //E_CS_MARKET_FOCUS_CANCEL_REQ
	optional Proto_CSMarketQueryReq                        market_query_req                           = 519;            //E_CS_MARKET_QUERY_REQ
	optional Proto_CSMarketResellReq                       market_resell_req                          = 520;            //E_CS_MARKET_RESELL_REQ
	optional Proto_CSReleaseTrapTowerBuffReq               release_traptower_buff_req                 = 521;		    //E_CS_RELEASE_TRAPTOWER_BUFF_REQ 	
	optional Proto_CSRoleTrapTowerDataReq                  role_traptower_data_req                    = 522;		    //E_CS_ROLE_TRAPTOWER_DATA_REQ	

	optional Proto_CSSeaDiscoveryGetRewardReq		       sea_discovery_get_reward_req		          = 523;		    //E_CS_SEA_DISCOVERY_GET_REWARD_REQ	
	optional Proto_CSTrapTowerQuestAwardReq                traptower_quest_award_req			      = 531;			//E_CS_TRAPTOWER_QUEST_AWARD_REQ
	optional Proto_CSMarketRecordReq                       market_record_req                          = 532;            //E_CS_MARKET_RECORD_REQ

    optional Proto_CSSetMilitantMatchBattleInfoReq         set_militant_match_battle_info_req         = 540;            //E_CS_MILITANT_MATCH_SET_BATTLE_INFO_REQ
    optional Proto_CSGetMilitantMatchPlayerDataReq         get_militant_match_player_data_req         = 541;            //E_CS_MILITANT_MATCH_GET_PLAYER_DATA_REQ
    optional Proto_CSGetMilitantMatchGlobalDataReq         get_militant_match_global_data_req         = 542;            //E_CS_MILITANT_MATCH_GET_GLOBAL_DATA_REQ
    optional Proto_CSGetMilitantMatchRewardReq             get_militant_match_reward_req              = 543;            //E_CS_MILITANT_MATCH_GET_REWARD_REQ
    optional Proto_CSMilitantMatchEnterMapReq              militant_match_enter_map_req               = 544;            //E_CS_MILITANT_MATCH_ENTER_MAP_REQ
	optional Proto_CSSetBattleDrugReq				       set_battle_drug_req					      = 550;			//E_CS_MSGID_SET_BATTLE_DRUG_REQ
	
	optional Proto_CSMoneyExchangeReq                      money_exchange_req                         = 551;            //E_CS_MONEY_EXCHANGRE_REQ
	optional Proto_CSZoneGetGiftRecordReq			       zone_get_gift_record_req                   = 552;            //E_CS_ROLE_ZONE_GET_GIFT_RECORD_REQ
	optional Proto_CSZoneAddHotRecordReq			       zone_add_gift_record_req                   = 553;            //E_CS_ROLE_ZONE_ADD_HOT_RECORD_REQ
	optional Proto_CSZoneDeleteGiftRecordReq		       zone_delete_gift_record_req                = 554;            //E_CS_ROLE_ZONE_DELETE_GIFT_RECORD_REQ
	optional Proto_CSZoneGetNoReadRecordReq			       zone_get_no_read_record_req                = 555;            //E_CS_ROLE_ZONE_GET_NO_READ_RECORD_REQ
	optional Proto_CSRoleGetAllTitleReq				       role_get_all_title_req         		      = 556;            //E_CS_ROLE_TITLE_GET_ALL_REQ
	optional Proto_CSRoleSetTitleReq				       role_set_title_req         			      = 557;            //E_CS_ROLE_TITLE_SET_VALUE_REQ
	optional Proto_CSRoleIsShowReq					       role_set_show_req         			      = 558;            //E_CS_ROLE_TITLE_SET_SHOW_REQ
	optional Proto_CSMailGetItemReq					       mail_get_item_req         			      = 559;            //E_CS_MAIL_GET_ITEM_REQ

	optional Proto_CSGetOpenServerDaysReq                  get_open_server_days_req                   = 560;            //E_CS_GET_OPEN_SERVER_DAYS_REQ
	optional Proto_CSGetFashionDataReq                     get_fashion_data_req                       = 561;            //E_CS_FASHION_GET_DATA_REQ
	optional Proto_CSGetFashionBagReq                      get_fashion_bag_req                        = 562;            //E_CS_FASHION_GET_BAG_REQ
	optional Proto_CSGetFashionSlotReq                     get_fashion_slot_req                       = 563;            //E_CS_FASHION_GET_SLOT_REQ
	optional Proto_CSSaveFashionSlotReq                    save_fashion_slot_req                      = 564;            //E_CS_FASHION_SAVE_SLOT_REQ
	optional Proto_CSBuyFashionReq                         buy_fashion_req                            = 565;            //E_CS_FASHION_BUY_REQ
	optional Proto_CSSelectFashionSlotReq                  select_fashion_slot_req                    = 566;            //E_CS_FASHION_SELECT_SLOT_REQ
    optional Proto_CSMallPriceReq                          mall_price_req                             = 568;            //E_CS_MALL_PRICE_REQ

	optional Proto_CSPacketPieceToSvrReq                   packet_piece_to_svr_req                    = 570;            //E_CS_PACKET_PIECE_TO_SVR_REQ


	optional Proto_CSZoneUploadPhotosReq                   zone_upload_photos_req                     = 571;            //E_CS_ZONE_STATUS_UPLOAD_PHOTOS_REQ
	optional Proto_CSZoneStatusGetPhotosReq			       zone_get_photo_req           		      = 573;            //E_CS_ZONE_STATUS_GET_PHOTOS_REQ

	optional Proto_CSSnsGroupListReq                       sns_group_list_req                         = 574;            //E_CS_SNS_GROUP_LIST_REQ
	optional Proto_CSSnsGroupCreateReq                     sns_group_create_req                       = 575;            //E_CS_SNS_GROUP_CREATE_REQ
	optional Proto_CSSnsGroupDismissReq                    sns_group_dismiss_req                      = 576;            //E_CS_SNS_GROUP_DISMISS_REQ
	optional Proto_CSSnsGroupModAnnounceReq                sns_group_mod_announce_req                 = 577;            //E_CS_SNS_GROUP_MOD_ANNOUNCE_REQ
	optional Proto_CSSnsGroupInviteReq                     sns_group_invite_req                       = 578;            //E_CS_SNS_GROUP_INVITE_REQ
	optional Proto_CSSnsGroupKickReq                       sns_group_kick_req                         = 579;            //E_CS_SNS_GROUP_KICK_REQ
	optional Proto_CSSnsGroupModSettingReq                 sns_group_mod_setting_req                  = 580;            //E_CS_SNS_GROUP_MOD_SETTING_REQ
	optional Proto_CSSnsGroupGetMsgReq                     sns_group_get_msg_req                      = 581;            //E_CS_SNS_GROUP_GET_MSG_REQ
	optional Proto_CSSnsGroupSendMsgReq                    sns_group_send_msg_req                     = 582;            //E_CS_SNS_GROUP_SEND_MSG_REQ
	optional Proto_CSSnsGroupChgNameReq                    sns_group_chg_name_req                     = 583;            //E_CS_SNS_GROUP_CHG_NAME_REQ
	optional Proto_CSSnsGroupQuitReq                       sns_group_quit_req                         = 584;            //E_CS_SNS_GROUP_QUIT_REQ
	optional Proto_CSSnsGroupMemberReq                     sns_group_member_req                       = 585;            //E_CS_SNS_GROUP_MEMBER_REQ
	optional Proto_CSSnsGroupClearMsgReq                   sns_group_clear_msg_req                    = 586;            //E_CS_SNS_GROUP_CLEAR_MSG_REQ
	
	optional Proto_CSRegisterGuildCompetitionReq           register_guild_competition_req             = 590;            //E_CS_GUILD_COMPETITION_REGISTER_REQ
	optional Proto_CSGuildCompetitionEnterMapReq           guild_competition_enter_map_req            = 591;            //E_CS_GUILD_COMPETITION_ENTER_MAP_REQ
	optional Proto_CSGetGuildCompetitionPlayerDataReq      get_guild_competition_player_data_req      = 592;            //E_CS_GUILD_COMPETITION_GET_PLAYER_DATA_REQ
	optional Proto_CSGetGuildCompetitionRoundInfoReq       get_guild_competition_round_info_req       = 593;            //E_CS_GUILD_COMPETITION_GET_ROUND_INFO_REQ
	optional Proto_CSGetGuildCompetitionGlobalDataReq      get_guild_competition_global_data_req      = 594;            //E_CS_GUILD_COMEPTITION_GET_GLOBAL_DATA_REQ
	optional Proto_CSGuildCompetitionAttackReq             guild_competition_attack_req               = 595;            //E_CS_GUILD_COMPETITION_ATTACK_REQ
	optional Proto_CSGetGuildBattleVensusInfoReq           get_guild_battle_vensus_info_req           = 596;            //E_CS_GUILD_BATTLE_GET_VENSUS_INFO_REQ

	optional Proto_CSMasterLoopQuestAcceptReq              master_loop_quest_accept_req               = 600;            //E_CS_MASTER_LOOP_QUEST_ACCEPT_REQ
	optional Proto_CSMasterQuestGiveupReq                  master_quest_giveup_req                    = 601;            //E_CS_MASTER_QUEST_GIVEUP_REQ
	optional Proto_CSMasterQuestSubmitItemReq              submit_item_req                            = 602;            //E_CS_MASTER_QUEST_SUBMIT_ITEM_REQ
	optional Proto_CSMasterQuestQuestionReq                mq_question_req                            = 603;            //E_CS_MASTER_QUEST_QUESTION_REQ
	optional Proto_CSMasterQuestQuestionAnswerReq          mq_answer_req                              = 604;            //E_CS_MASTER_QUEST_QUESTION_ANSWER_REQ

	optional Proto_CSCorpsCreateReq                        corps_create_req                           = 610;            //E_CS_BATTLE_CORPS_CREATE_REQ
	optional Proto_CSCorpsDismissReq                       corps_dismiss_req                          = 611;            //E_CS_BATTLE_CORPS_DISMISS_REQ
	optional Proto_CSCorpsApplyReq                         corps_apply_req                            = 612;            //E_CS_BATTLE_CORPS_APPLY_REQ
	optional Proto_CSCorpsApplyListReq                     corps_apply_list_req                       = 613;            //E_CS_BATTLE_CORPS_APPLY_LIST_REQ
	optional Proto_CSCorpsApplyAgreeReq                    corps_apply_agree_req                      = 614;            //E_CS_BATTLE_CORPS_APPLY_AGREE_REQ
	optional Proto_CSCorpsApplyClearReq                    corps_apply_clear_req                      = 615;            //E_CS_BATTLE_CORPS_APPLY_CLEAR_REQ
	optional Proto_CSCorpsInfoReq                          corps_info_req                             = 616;            //E_CS_BATTLE_CORPS_INFO_REQ
	optional Proto_CSCorpsQuitReq                          corps_quit_req                             = 617;            //E_CS_BATTLE_CORPS_QUIT_REQ
	optional Proto_CSCorpsKickReq                          corps_kick_req                             = 618;            //E_CS_BATTLE_CORPS_KICK_REQ
	optional Proto_CSCorpsModSettingReq                    corps_mod_setting_req                      = 619;            //E_CS_BATTLE_CORPS_MOD_SETTING_REQ
	optional Proto_CSCorpsInviteReq                        corps_invite_req                           = 620;            //E_CS_BATTLE_CORPS_INVITE_REQ
	optional Proto_CSCorpsLeaderConfirmReq                 corps_leader_confirm_req                   = 621;            //E_CS_BATTLE_CORPS_LEADER_CONFIRM_REQ
	optional Proto_CSCorpsInviteeConfirmReq                corps_invitee_confirm_req                  = 622;            //E_CS_BATTLE_CORPS_INVITEE_CONFIRM_REQ
	
	optional Proto_CSBattleChatInfoReq                     battle_chat_info_req                       = 629;            //E_CS_BATTLE_CHAT_INFO_REQ
	optional Proto_CSSetFightPartnerReq                    set_fight_partner_req                      = 630;            //E_CS_SET_FIGHT_PARTNER_REQ
	optional Proto_CSGetFightPartnerInfoReq                get_fight_partner_info_req                 = 631;            //E_CS_GET_FIGHT_PARTNER_INFO_REQ
	optional Proto_CSSwitchFightPartnerReq                 switch_fight_partner_req                   = 632;            //E_CS_SWITCH_FIGHT_PARTNER_REQ
	optional Proto_CSConfirmFightPartnerReq                confirm_fight_partner_req                  = 633;            //E_CS_CONFIRM_FIGHT_PARTNER_REQ
	optional Proto_CSAuctionCompetitionSingleMatchReq      auction_competition_single_match_req       = 634;            //E_CS_AUCTION_COMPETITION_SINGLE_MATCH_REQ
	optional Proto_CSAuctionCompetitionTeamMatchReq        auction_competition_team_match_req         = 635;            //E_CS_AUCTION_COMPETITION_TEAM_MATCH_REQ
	optional Proto_CSConfirmTeamMatchReq                   confirm_team_match_req                     = 636;            //E_CS_TEAM_MATCH_CONFIRM_REQ
	optional Proto_CSAuctionCompetitionReportReq           auction_competition_report_req             = 637;            //E_CS_AUTCION_COMPETITION_REPORT_REQ
	optional Proto_CSGetAuctionCompetitionDataReq          get_auction_competition_data_req           = 638;            //E_CS_AUCTION_COMPETITION_GET_DATA_REQ
	optional Proto_CSGetAuctionCompetitionDailyRewardReq   get_auction_competition_daily_reward_req   = 639;            //E_CS_AUCTION_COMPETITION_GET_DAILY_REWARD_REQ

	optional Proto_CSMasterGetTeachTaskReq        	       master_get_teach_task_req         	      = 645;  		    //E_CS_MASTER_GET_TEACH_TASK_REQ
	optional Proto_CSMasterSetTaskReq        	  	       master_set_teach_task_req         	      = 646;  		    //E_CS_MASTER_SET_TEACH_TASK_REQ
	optional Proto_CSMasterUpTaskReq        	  	       master_up_teach_task_req         		  = 647;  		    //E_CS_MASTER_UP_TEACH_TASK_REQ
	optional Proto_CSMasterGetTeachRewardReq               master_get_teach_reward_req         	      = 648;  		    //E_CS_MASTER_GET_TEACH_REWARD_REQ
	optional Proto_CSMasterGetTeachResultReq               master_get_teach_result_req         	      = 649;  		    //E_CS_MASTER_GET_TEACH_RESULT_REQ
	optional Proto_CSMasterGetResultRewardReq              master_get_result_reward_req               = 650;  		    //E_CS_MASTER_GET_RESULT_REWARD_REQ
	optional Proto_CSMasterGetTeachScoreReq                master_get_teach_score_req         	      = 651;  		    //E_CS_MASTER_GET_TEACH_SCORE_REQ
	optional Proto_CSMasterJudgeReq           		       master_judge_req         				  = 652;  		    //E_CS_MASTER_JUDGE_REQ
	optional Proto_CSMasterFinishStudyReq                  master_finish_study_req         		      = 653;  		    //E_CS_MASTER_FINISH_STUDY_REQ
	optional Proto_CSMasterLeaveReq             	       master_leave_req         				  = 654;  		    //E_CS_MASTER_LEAVE_REQ
	
	optional Proto_CSLicenseBlockOpenReq                   license_block_open_req                     = 656;            //E_CS_LICENSE_BLOCK_OPEN_REQ
	optional Proto_CSLicenseSlotUnlockReq                  license_slot_unlock_req                    = 657;            //E_CS_LICENSE_SLOT_UNLOCK_REQ
	optional Proto_CSLicenseSlotSetReq                     license_slot_set_req                       = 658;            //E_CS_LICENSE_SLOT_SET_REQ
	optional Proto_CSLicenseLPExchangeReq                  license_lp_exchange_req                    = 659;            //E_CS_LICENSE_LP_EXCHANGE_REQ

    optional int32 hlicense_index_req   = 660; // E_CS_HLICENSE_EXAM_GET_AWARD_REQ // E_CS_HLICENSE_ST_GET_AWARD_REQ // E_CS_HLICENSE_GET_AWARD_REQ

    optional Proto_CSTrainingGuideMsg                      training_guide_req                         = 666; // E_CS_START_TRAINING_GUIDE_BATTLE_REQ
    
	optional Proto_CSRoleInfoReq						   role_info_req							  = 670;			//E_CS_ROLE_INFO_REQ
	optional Proto_CSRoleInfoRightReq					   role_info_right_req						  = 671;			//E_CS_ROLE_INFO_RIGHT_REQ
	optional Proto_CSRoleSnsInfoReq						   role_sns_info_req						  = 672;			//E_CS_ROLE_SNS_INFO_REQ
	optional Proto_CSRoleScoreReq						   role_score_req							  = 673;			//E_CS_ROLE_SCORE_REQ

	optional Proto_CSPointShopListReq					   point_shop_list_req						  = 680;			//E_CS_POINT_SHOP_LIST_REQ
	optional Proto_CSPointShopBuyReq					   point_shop_buy_req						  = 681;			//E_CS_POINT_SHOP_BUY_REQ

	optional Proto_CSFieldBoxInfoReq					   fieldbox_info_req						  = 690;			//E_CS_FIELDBOX_INFO_REQ
	optional Proto_CSOpenFieldBoxReq					   open_fieldbox_req						  = 691;			//E_CS_OPEN_FIELDBOX_REQ
	optional Proto_CSLuckyExchangeReq					   lucky_exchange_req						  = 692;			//E_CS_LUCKY_EXCHANGE_REQ
	
	
	optional Proto_CSFamilyCreateReq					   family_create_req						  = 695;			//E_CS_FAMILY_CREATE_REQ
	optional Proto_CSFamilyDetailInfoReq				   family_detail_info_req					  = 696;			//E_CS_FAMILY_DETAIL_INFO_REQ
	optional Proto_CSFamilyModifySignatureReq			   family_mod_sign_req						  = 697;			//E_CS_FAMILY_MODIFY_SIGN_REQ
	optional Proto_CSFamilyModifyMemoNameReq			   family_mod_memoname_req					  = 698;			//E_CS_FAMILY_MODIFY_MEMO_NAME_REQ
	optional Proto_CSFamilyAddEventReq			   		   family_add_event_req						  = 699;			//E_CS_FAMILY_ADD_EVENT_REQ
	optional Proto_CSFamilyDelEventReq			   		   family_del_event_req						  = 700;			//E_CS_FAMILY_DEL_EVENT_REQ
	optional Proto_CSFamilyActEventReq			   		   family_act_event_req						  = 701;			//E_CS_FAMILY_ACT_EVENT_REQ
	optional Proto_CSFamilyEventAcceptReq			       family_event_accept_req					  = 702;			//E_CS_FAMILY_EVENT_ACCEPT_REQ
	optional proto_CSFamilyInviteReq			       	   family_invite_req					  	  = 703;			//E_CS_FAMILY_INVITE_REQ
	optional Proto_CSFamilyAcceptInvitedReq			       family_accept_invite_req					  = 704;			//E_CS_FAMILY_ACCEPT_INVITE_REQ
	optional Proto_CSFamilyLeaveInviteListReq			   family_leave_invite_req					  = 705;			//E_CS_FAMILY_LEAVE_INVITE_REQ
	optional Proto_CSFamilyFireInviteListReq			   family_fire_invite_req					  = 706;			//E_CS_FAMILY_FIRE_INVITE_REQ

	optional Proto_CSZoneDesignAddReq					   zone_design_add_req						  = 712;			//E_CS_ZONE_DESIGN_ADD_REQ
	optional Proto_CSMallItemReq                           mall_item_req                              = 715;            //E_CS_MALL_ITEM_REQ

	optional Proto_CSGetArenaPlayerListReq                 get_arena_player_list_req                  = 720;            //E_CS_ARENA_GET_PLAYER_LIST_REQ
	optional Proto_CSArenaFightReq                         arena_fight_req                            = 721;            //E_CS_ARENA_FIGHT_REQ
	optional Proto_CSGuildGetEventReq                      guild_get_event_req                        = 722;            //E_CS_GUILD_GET_EVENT_REQ
	optional Proto_CSFamilyCreateInviteListReq             family_create_invite_req                   = 723;            //E_CS_FAMILY_CREATE_INVITE_LIST_REQ
	optional Proto_CSFamilyCallActivityReq             	   family_call_activity_req                   = 724;            //E_CS_FAMILY_CALL_ACTIVITY_REQ
	optional Proto_CSFamilyStartActivityReq                family_start_activity_req                  = 725;            //E_CS_FAMILY_START_ACTIVITY_REQ
	optional Proto_CSFamilyHurryReq                		   family_hurry_req                  		  = 726;            //E_CS_FAMILY_HURRY_REQ
	optional Proto_CSFamilyChangeFoodReq                   family_change_food_req                  	  = 727;            //E_CS_FAMILY_CHANGE_FOOD_REQ
	optional Proto_CSFamilyVoteRankReq                     family_vote_rank_req                  	  = 728;            //E_CS_FAMILY_VOTE_RANK_REQ
	optional Proto_CSFamilySynTitleReq                     family_syn_title_req                  	  = 729;            //E_CS_FAMILY_SYN_TITLE_REQ
	optional Proto_CSFamilyTitleOKReq                      family_ok_title_req                  	  = 730;            //E_CS_FAMILY_OK_TITLE_REQ
	optional Proto_CSFamilyMemoOKReq                       family_ok_memo_req                  	  	  = 731;            //E_CS_FAMILY_OK_MEMO_REQ
	optional Proto_CSFamilyCDDReq                          family_compact_req                  	  	  = 732;            //E_CS_FAMILY_COMPACT_REQ
	optional Proto_CSFamilyPayMoneyReq                     family_pay_money_req                  	  = 733;            //E_CS_FAMILY_PAY_MONEY_REQ
	optional Proto_CSFamilyCancelActivityReq               family_cancel_activity_req                 = 734;            //E_CS_FAMILY_CANCEL_ACTIVITY_REQ
	optional Proto_CSFamilyVoteAgainReq               	   family_vote_again_req                 	  = 735;            //E_CS_FAMILY_VOTE_AGAIN_REQ
	optional Proto_CSCityBuffOPReq                         city_buff_op_req                           = 736;            //E_CS_CITYBUFF_OP_NTF
	optional Proto_CSLoginFastRoleReq                      login_fast_role_req                        = 737;            //E_CS_LOGIN_FAST_ROLE_REQ
	optional Proto_CSSignInReq                             sign_in_req                                = 738;            //E_CS_SIGN_IN_REQ
	optional Proto_CSSignInMonthlyReq                      sign_in_monthly_req                        = 739;            //E_CS_SIGN_IN_MONTHLY_REQ

	optional Proto_CSEnterDungeonReq                       enter_dungeon_req                          = 750;            //E_CS_DUNGEON_ENTER_REQ
	optional Proto_CSGetDungeonAwardReq                    get_dungeon_award_req                      = 751;            //E_CS_DUNGEON_GET_AWARD_REQ
	optional Proto_CSTssSdkSendDataReq                     tss_sdk_send_data_req                      = 752;            //E_CS_TSS_SDK_SEND_DATA_REQ
	optional Proto_CSCheatReportReq                        cheat_report_req                           = 755;            //E_CS_CHEAT_REPORT_REQ
	optional Proto_CSFamilyEatFoodReq                      family_eat_food_req                        = 756;            //E_CS_FAMILY_EAT_FOOD_REQ
	optional Proto_CSStateLeaveReq                         state_leave_req                            = 757;            //E_CS_STATE_LEAVE_REQ

    optional Proto_CSMultiLevelSelectNextLevelReq          multi_level_select_next_level_req          = 758;            //E_CS_MULTI_LEVEL_SELECT_NEXT_LEVEL_REQ
	optional Proto_CSNextMultiLevelConfirmReq              next_multi_level_confirm_req               = 759;            //E_CS_MULTI_LEVEL_NEXT_CONFIRM_REQ
	optional Proto_CSEnterMultiLevelReq                    enter_multi_level_req                      = 760;            //E_CS_MULTI_LEVEL_ENTER_REQ
	optional Proto_CSFriendSetSwitchReq                    friend_set_switch_req                      = 761;            //E_CS_FRIEND_SET_SWITCH_REQ

	optional Proto_CSQuestionnaireReq 					   questionnaire_req 						  = 762;			//E_CS_QUESTIONNAIRE_REQ
	optional Proto_CSRoleSecretSetModifyReq 			   role_secret_set_req 						  = 763;			//E_CS_ROLE_SECRET_SET_REQ
	optional Proto_CSJoinVoiceRoomReq 					   join_voice_room_req 						  = 764;			//E_CS_QUIT_VOICE_ROOM_REQ
	optional Proto_CSQuitVoiceRoomReq 					   quit_voice_room_req 						  = 765;			//E_CS_QUIT_VOICE_ROOM_REQ
	optional Proto_CSBindPhoneReq 						   bind_phone_req 							  = 766;   			//E_CS_BIND_PHONE_REQ

	optional Proto_CSGetWantedDataReq                      get_wanted_data_req                        = 767;            //E_CS_WANTED_GET_DATA_REQ
	optional Proto_CSChgVoiceStateReq 					   chg_voice_state_req 						  = 768;			//E_CS_CHG_VOICE_STATE_REQ
    optional int32                                         title2_desc_id                             = 769;            //E_CS_TITLE2_PROMOTION_REQ
	optional Proto_CSWatchWantedRewardReq                  watch_wanted_reward_req                    = 770;            //E_CS_WANTED_WATCH_REWARD_REQ

	optional Proto_CSMsdkRefreshReq                        msdk_refresh_req                           = 771;            //E_CS_MSDK_REFRESH_REQ
	optional Proto_CSMidasPayReq                           midas_pay_req                              = 772;            //E_CS_MIDAS_PAY_REQ
	optional Proto_CSGuildSoulboxContributeReq             guild_box_contribute_req                   = 773;            //E_CS_GUILD_SOULBOX_CONTRIBUTE_REQ
	optional Proto_CSGuildGetFightValueRankReq             guild_get_fight_rank_req                   = 774;            //E_CS_GUILD_GET_FIGHT_VALUE_RANK_REQ
	optional Proto_CSSetTrainingConfigReq				   set_training_config_req					  = 775;			//E_CS_SET_TRAINING_CONFIG_REQ
	optional Proto_CSResetTrainingLevelReq				   reset_training_level_req				  	  = 776;			//E_CS_RESET_TRAINING_LEVEL_REQ
	optional Proto_CSBindPhoneAuthenCodeReq 			   bind_phone_authen_code_req				  = 777;			//E_CS_BIND_PHONE_AUTHEN_CODE_REQ
	
	optional Proto_CSSkillPointAssignReq                   skill_point_assign_req                     = 782;            //E_CS_SKILL_POINT_ASSIGN_REQ
	optional Proto_CSSkillPointResetReq                    skill_point_reset_req                      = 783;            //E_CS_SKILL_POINT_RESET_REQ
	optional Proto_CSFanTypeReportReq                      fan_type_report_req                        = 784;            //E_CS_FAN_TYPE_REPORT_REQ
	optional Proto_CSGetGiftListReq                        get_gift_list_req                          = 790;            //E_CS_GIFT_GET_LIST_REQ
	optional Proto_CSAddGiftReq                            add_gift_req                               = 791;            //E_CS_GIFT_ADD_REQ
	optional Proto_CSGiftOpReq                             gift_op_req                                = 792;            //E_CS_GIFT_OP_REQ

	optional Proto_CSHunterProfDataReq                     hunter_prof_data_req                       = 795;            //E_CS_ROLE_HUNTER_PROF_DATA_REQ
	optional Proto_CSHunterProfSelectReq                   hunter_prof_select_req                     = 796;            //E_CS_ROLE_HUNTER_PROF_SELECT_REQ
	optional Proto_CSGuildSkillResearchReq                 guild_skill_research_req                   = 797;            //E_CS_GUILD_SKILL_RESEARCH_REQ
	optional Proto_CSGuildHouseValueExchangeReq            guild_arc_value_exchange_req               = 798;            //E_CS_GUILD_HOUSE_VALUE_EXCHANGE_REQ

	optional Proto_CSBarrageSendReq						   barrage_send_req                           = 810;            //E_CS_BARRAGE_SEND_REQ
	optional Proto_CSBarrageGetReq                         barrage_get_req                            = 811;            //E_CS_BARRAGE_GET_REQ
	
	optional Proto_CSMarketListNumReq                      market_list_num_req                        = 812;            //E_CS_MARKET_LIST_NUM_REQ
	optional CSTeamSnsInviteReplyReq                       team_sns_invite_reply_req                  = 813;            //E_CS_TEAM_SNS_INVITE_REPLY_REQ
	optional Proto_CSOnlineRewardRandReq                   online_reward_rand_req                     = 814;            //E_CS_ONLINE_REWARD_RAND_REQ
	optional Proto_CSOnlineRewardGetReq                    online_reward_get_req                      = 815;            //E_CS_ONLINE_REWARD_GET_REQ

	optional Proto_CSHealthGameGetInfoReq				   healthgame_get_info_req					  = 816;			//E_CS_HEALTH_GET_INFO_REQ	
	optional Proto_CSHealthGameDoneRemindReq			   healthgame_done_remind_req				  = 817;			//E_CS_HEALTH_DONE_REMIND_REQ
	optional Proto_CSActivityGetAllDataReq			       activity_eight_get_data_req   			  = 818;			//E_CS_ACTIVITY_EIGHT_GET_DATE_REQ
	optional Proto_CSActivityGetRewardReq			       activity_eight_get_rwd_req				  = 819;			//E_CS_ACTIVITY_EIGHT_GET_RWD_REQ
	optional Proto_CSBoxAwardGetReq                        box_award_get_req                          = 820;            //E_CS_BOX_AWARD_GET_REQ
	optional Proto_CSGuildQuestionJoinReq                  guild_question_join_req                    = 821;            //E_CS_GUILD_QUESTION_JOIN_REQ
	optional Proto_CSGuildQuestionSendMsgReq               guild_question_send_req                    = 822;            //E_CS_GUILD_QUESTION_SEND_MSG_REQ
	optional Proto_CSFirstPayAwardGetReq                   first_pay_award_get_req                    = 823;            //E_CS_FIRST_PAY_AWARD_GET_REQ
	optional Proto_CSMasterGetNeededPlayerReq              master_get_player_req                      = 826;            //E_CS_MASTER_GET_NEEDED_PLAYER_REQ
	optional Proto_CSMasterGetApplyListReq                 master_get_apply_req                       = 827;            //E_CS_MASTER_GET_APPLY_LIST_REQ
	optional Proto_CSMasterClearApplyListReq               master_clear_apply_list_req                = 828;            //E_CS_MASTER_CLEAR_APPLY_LIST_REQ
	optional Proto_CSMasterOperateApplyReq                 master_operate_apply_list_req              = 829;            //E_CS_MASTER_OPERATE_APPLY_REQ
	optional Proto_CSMasterApplyReq		                   master_apply_req              			  = 830;            //E_CS_MASTER_APPLY_REQ
	optional Proto_CSMasterModifyReq		               master_modify_req              			  = 831;            //E_CS_MASTER_MODIFY_REQ
	optional Proto_CSRushGetScoreRewardReq                 rush_get_score_reward_req                  = 832;            //E_CS_RUSH_GET_SCORE_REWARD_REQ     
	optional Proto_CSSkillSetUseReq                        skill_set_use_req                          = 834;            //E_CS_SKILL_SET_USE_REQ        
	optional Proto_CSBattleVoiceStateSetReq                voice_state_set_req                        = 836;            //E_CS_BATTLE_VOICE_STATE_SET_REQ
	optional Proto_CSRoomMovePlaceReq					   room_move_place_req						  = 840;			//E_CS_ROOM_MOVE_PLACE_REQ 
	optional Proto_CSRoomClosePlaceReq					   room_close_place_req						  = 841;			//E_CS_ROOM_CLOSE_PLACE_REQ  
	optional Proto_CSRoomInviteReq						   room_invite_req 							  = 842;			//E_CS_ROOM_INVITE_REQ  
	optional Proto_CSRoomInviteResultReq				   room_invite_result_req					  = 843;			//E_CS_ROOM_INVITE_RESULT_REQ 
	optional Proto_CSHallPlayerListReq					   hall_player_list_req						  = 844;			//E_CS_HALL_PLAYER_LIST_REQ  
	optional Proto_CSHallSetInviteReq					   hall_set_invite_req						  = 845;			//E_CS_HALL_SET_INVITE_REQ  
	optional Proto_CSGuildGetTransportListReq			   guild_get_transport_list_req				  = 846;			//E_CS_GUILD_GET_TRANSPORT_LIST_REQ  
	optional Proto_CSGuildTransportExpReq			   	   guild_transport_exp_req				  	  = 847;			//E_CS_GUILD_TRANSPORT_EXP_REQ    
	optional Proto_CSGuildReplyTransExpReq			   	   guild_reply_trans_exp_req				  = 848;			//E_CS_GUILD_REPLY_TRANS_EXP_REQ  
	optional Proto_CSGuildTransExpResumeReq			   	   guild_trans_exp_resume_req				  = 849;			//E_CS_GUILD_TRANSPORT_EXP_RESUME_REQ
	optional Proto_CSGuildTransExpEndReq			   	   guild_trans_exp_end_req				  	  = 850;			//E_CS_GUILD_TRANSPORT_EXP_END_REQ  
	optional Proto_CSQuickMatchCancelReq			   	   room_quick_match_cancel_req				  = 852;			//E_CS_QUICK_MATCH_CANCEL_REQ
	optional Proto_CSRoomQuerySingleReq				   	   room_query_single_req					  = 853;			//E_CS_ROOM_QUERY_SINGLE_REQ  	

	optional Proto_CSGetCERewardReq                        get_ce_reward_req                          = 854;            //E_CS_CE_GET_REWARD_REQ
	optional Proto_CSRoomKiciOffPlayerReq				   room_kici_off_player_req					  = 855;			//E_CS_ROOM_KICI_OFF_PLAYER_REQ
	optional Proto_CSRoomTransferRoomOwnerReq			   room_transfer_room_owner_req				  = 856;			//E_CS_ROOM_TRANSFER_ROOM_OWNER_REQ
	optional Proto_CSGuildRebateGetRewardReq               guild_rebate_get_rwd_req                   = 857;            //E_CS_GUILD_REBATE_GET_REWARD_REQ
    optional Proto_CSGuildGroupReq                         guild_group_req                            = 858;            //E_CS_GUILD_GROUP_REQ
	optional Proto_CSRoomPlayerEmojiReq					   room_player_emoji_req					  = 859;			//E_CS_ROOM_PLAYER_EMOJI_REQ
	optional Proto_CSGuildTransportExtBeginReq			   guild_trans_exp_begin_req			      = 860;			//E_CS_GUILD_TRANS_EXP_BEGIN_REQ

    optional Proto_CSRisingPurchaseBuyReq                  rising_purchase_buy_req                    = 861;            //E_CS_RISING_PURCHASE_BUY_REQ
	optional Proto_CSPayAwardGetReq                        pay_award_get_req                          = 862;            //E_CS_PAY_AWARD_GET_REQ
	optional Proto_CSWeekConsumeAwardReq                   week_consume_award_req                     = 863;            //E_CS_WEEK_CONSUME_AWARD_REQ
	optional Proto_CSWeekConsumeLotteryReq                 week_consume_lottery_req                   = 864;            //E_CS_WEEK_CONSUME_LOTTERY_REQ
	optional Proto_CSPayAwardInfoReq                       pay_award_info_req                         = 865;            //E_CS_PAY_AWARD_INFO_REQ
	optional Proto_CSWeekConsumeInfoReq                    week_consume_info_req                      = 866;            //E_CS_WEEK_CONSUME_INFO_REQ
	optional Proto_CSMidasBuyGoodsReq                      midas_buygoods_req                         = 867;            //E_CS_MIDAS_BUY_GOODS_REQ
	optional Proto_CSGrowUpFundsGetAwardReq                growup_funds_get_award_req                 = 868;            //E_CS_GROWUP_FUNDS_GET_AWARD_REQ
	optional Proto_CSLuckBagInfoReq                        luck_bag_info_req                          = 869;            //E_CS_LUCK_BAG_INFO_REQ
	
	optional Proto_CSRoleSkillUpgradeReq                   role_skill_upgrade_req                     = 870;            //E_CS_ROLE_SKILL_UPGRADE_REQ
	optional Proto_CSRoleSkillRecommondReq                 role_skill_recommond_req                   = 871;            //E_CS_ROLE_SKILL_RECOMMOND_REQ
	optional Proto_CSRoleSkillSetReq                       role_skill_set_req                         = 872;            //E_CS_ROLE_SKILL_SET_REQ
	optional Proto_CSRoleSkillSwitchSetReq                 role_skill_switch_set_req                  = 873;            //E_CS_ROLE_SKILL_SWITCH_SET_REQ
	optional Proto_CSRoleSkillResetReq                     role_skill_reset_req                       = 874;            //E_CS_ROLE_SKILL_RESET_REQ
	optional Proto_CSRoleSkillTransferReq                  role_skill_transfer_req                    = 875;            //E_CS_ROLE_SKILL_TRANSFER_REQ

    optional Proto_CSSelectLevelBlessReq                   select_level_bless_req                     = 880;            //E_CS_LEVEL_BLESS_SELECT_REQ
    optional Proto_CSActiveLevelBlessReq                   active_level_bless_req                     = 881;            //E_CS_LEVEL_BLESS_ACTIVE_REQ
    optional Proto_CSActiveDoubleRewardReq                 active_double_reward_req                   = 882;            //E_CS_DOUBLE_REWARD_ACTIVE_REQ
	optional Proto_CSStartTransferBattleReq                start_transfer_battle_req                  = 883;            //E_CS_START_TRANSFER_BATTLE_REQ
	optional Proto_CSActivityQuestGetRwdReq                act_quest_get_rwd_req                  	  = 884;            //E_CS_ACTIVITY_QUEST_GET_RWD_REQ

    optional Proto_CSEndMoveReq                            end_move_req                               = 885;            //E_CS_END_MOVE_REQ
	optional Proto_CSGemstoneComposeReq                    gemstone_compose_req                       = 886;             //E_CS_GEMSTONE_COMPOSE_REQ
	optional Proto_CSGemstoneExchangeReq                   gemstone_exchange_req                      = 887;             //E_CS_GEMSTONE_EXCHANGE_REQ
    optional Proto_CSEquipMagicCardReq                     equip_magic_card_req                       = 888;            //E_CS_EQUIP_MAGIC_CARD_REQ
	
	optional Proto_CSPartnerAssistOPReq                    partner_assist_op_req                      = 889;            //E_CS_PARTNER_ASSIST_OP_REQ
	optional Proto_CSPartnerSkillActiveReq                 partner_skill_active_req                   = 890;            //E_CS_PARTNER_SKILL_ACTIVE_REQ
	optional Proto_CSPartnerRenewReq                       partner_renew_req                          = 891;            //E_CS_PARTNER_RENEW_REQ
	optional Proto_CSPartnerFeedReq                        partner_feed_req                           = 892;            //E_CS_PARTNER_FEED_REQ
	optional Proto_CSPartnerTrainingReq                    partner_training_req                       = 893;            //E_CS_PARTNER_TRAINING_REQ
	optional Proto_CSPartnerAutoFeedReq                    partner_auto_feed_req                      = 894;            //E_CS_PARTNER_AUTO_FEED_REQ
	optional Proto_CSPartnerFollowReq                      partner_follow_req                         = 895;            //E_CS_PARTNER_FOLLOW_REQ
    optional Proto_CSEquipMagicCardComposeReq              equip_magic_compose_req                    = 896;            //E_CS_EQUIP_MAGIC_CARD_COMPOSE_REQ
	optional Proto_CSPartnerAISetReq                       partner_ai_set_req                         = 897;            //E_CS_PARTNER_AI_SET_REQ

    optional Proto_CSEntranceActionFinishReq               entrance_action_finish_req                 = 898;            //E_CS_ENTRANCE_ACTION_FINISH_REQ
    optional Proto_CSFashionDressReq              		   fashion_dress_req                    	  = 899;            //E_CS_FASHION_DRESS_REQ
    optional Proto_CSFashionComposeReq              	   fashion_compose_req                    	  = 900;            //E_CS_FASHION_COMPOSE_REQ
    optional Proto_CSFashionSelectAttrReq              	   fashion_select_attr_req                    = 901;            //E_CS_FASHION_SELECT_ATTR_REQ
	optional Proto_CSTormentTowerAwardGetReq               torment_tower_award_get_req                = 902;            //E_CS_TORMENT_TOWER_AWARD_GET_REQ
	optional Proto_CSTormentTowerResetReq                  torment_tower_reset_req                    = 903;            //E_CS_TORMENT_TOWER_RESET_REQ
	optional Proto_CSTormentTowerSweepReq                  torment_tower_sweep_req                    = 904;            //E_CS_TORMENT_TOWER_SWEEP_REQ
	optional Proto_CSTormentTowerSweepAwardReq             torment_tower_sweep_award_req              = 905;            //E_CS_TORMENT_TOWER_SWEEP_AWARD_REQ
	optional Proto_CSTormentTowerBattleReq                 torment_tower_battle_req                   = 906;            //E_CS_TORMENT_TOWER_BATTLE_REQ
	optional Proto_CSTormentTowerSweepSpeedReq             torment_tower_sweep_speed_req              = 907;            //E_CS_TORMENT_TOWER_SWEEP_SPEED_REQ
	optional Proto_CSTormentTowerInfoReq                   torment_tower_info_req                     = 908;            //E_CS_TORMENT_TOWER_INFO_REQ
	optional Proto_CSPartnerBreakThroughReq                partner_break_through_req                  = 909;            //E_CS_PARTNER_BREAK_THROUGH_REQ
	optional Proto_CSPartnerSetGroupReq                    partner_set_group_req                      = 910;            //E_CS_PARTNER_SET_GROUP_REQ
	optional Proto_CSPvPTaskAwardReq                       pvp_task_award_req                         = 911;            //E_CS_PVP_1V1_TASK_AWARD_REQ
	optional Proto_CSActivityLuckDrawReq                   act_luck_draw_req                          = 912;            //E_CS_ACTIVITY_LUCK_DRAW_REQ
	optional Proto_CSExpRetriveReq                         exp_retrive_req                            = 913;            //E_CS_EXP_RETRIVE_REQ
	optional Proto_CSAwardRetriveReq                       award_retrive_req                          = 914;            //E_CS_AWARD_RETRIVE_REQ
	optional Proto_CSGachaBuyReq                           gacha_buy_req                              = 915;            //E_CS_GACHA_BUY_REQ
	optional Proto_CSGachaRecordReq                        gacha_record_req                           = 916;            //E_CS_GACHA_RECORD_REQ
	optional Proto_CSMonthCardAwardReq                     month_card_award_req                       = 917;            //E_CS_MONTH_CARD_AWARD_REQ
	optional Proto_CSSupperCardAwardReq                    supper_card_award_req                      = 918;            //E_CS_SUPPER_CARD_AWARD_REQ
	optional Proto_CSRoleInfoFriendSharedReq               role_friend_shared_req                     = 919;            //E_CS_ROLE_INFO_FRIEND_SHARED
}
	
message Proto_CSRsp
{
	optional int64                                         timeStamp                                       = 1;
	optional Proto_CSLoginRes 		                       login                                           = 2;             //E_CS_LOGIN_RES
	optional Proto_CSErrorRsp		                       error                                           = 3;             //E_CS_ERROR
	optional Proto_CSGetRoleRsp		                       get_role                                        = 4;             //E_CS_GETROLE_RSP
	optional Proto_CSAttrList 		                       hero_attr_list                                  = 5;             //E_CS_HERO_ATTR_NTF
	optional Proto_CSRoleAttrList 	                       role_attr_ntf                                   = 6;             //E_CS_ROLE_ATTR_NTF
	optional Proto_CSHeartBeatRsp 	                       heart_beat                                      = 7;             //E_CS_HEARTBEAT_RSP
	optional Proto_CSKickOff		                       kick_off                                        = 8;             //E_CS_KICKOFF_NTF
	optional Proto_CSGmRsp			                       gm                                              = 9;
	optional Proto_CSHeroNtf		                       hero_ntf                                        = 10;            //E_CS_HERO_NTF
	optional Proto_CSHeroFormationRsp                      formation                                       = 11;            //E_CS_HERO_FORMATION_RSP
	optional Proto_SCPvpFight                              pvp                                             = 100;           //E_CS_PVP_FIGHT
	optional Proto_CSBattleSvrLoginRsp                     battle_svr_login                                = 12;            //E_CS_BATTLESVR_LOGIN_RSP
	optional Proto_CSBattleStartNtf                        start_battle_ntf                                = 13;            //E_CS_START_BATTLE_NTF
	optional Proto_CSChangeAvatarRsp                       change_avatar                                   = 14;            //E_CS_CHANGE_AVATAR_RSP
	optional Proto_CSDeleteRoleRsp	                       del_role_rsp                                    = 15;            //E_CS_DELETE_ROLE_RSP
	optional Proto_CSRoomCreateRsp                         room_create                                     = 16;            //E_CS_ROOM_CREATE_RSP
	optional Proto_CSRoomQueryListRsp                      room_query_list                                 = 17;            //E_CS_ROOM_QUERY_LIST_RSP
	optional Proto_CSRoomEnterRsp                          room_enter                                      = 18;            //E_CS_ROOM_ENTER_RSP
	optional Proto_CSRoomEnterNtf                          room_enter_ntf                                  = 19;            //E_CS_ROOM_ENTER_NTF
	optional Proto_CSRoomLeaveNtf                          room_leave_ntf                                  = 20;            //E_CS_ROOM_LEAVE_NTF
	optional Proto_CSRoomChangeCampNtf                     room_change_camp                                = 21;            //E_CS_ROOM_CHANGE_CAMP_NTF
	optional Proto_CSBattleSvrAttrChangeNtf                attr_change_ntf                                 = 22;            //E_CS_BATTLESVR_ATTR_CHANGE_NTF
	optional Proto_CSObjectBuffOPNtf                       obj_buff_op_ntf                                 = 23;            //E_CS_OBJ_BUFF_OP_NTF
	optional Proto_CSEffectNtf                             effect_ntf                                      = 24;            //E_CS_EFFECT_NTF
	optional Proto_CSEnterViewNtf                          enter_view_ntf                                  = 25;            //E_CS_ENTER_VIEW_NTF
	optional Proto_CSLeaveViewNtf                          leave_view_ntf                                  = 26;            //E_CS_LEAVE_VIEW_NTF
	optional Proto_CSLoadingStatusNtf                      loading_status                                  = 27;	        //E_CS_LOADING_STATUS_NTF
	optional Proto_CSBattleEnterRsp                        enter_battle                                    = 28;            //E_CS_ENTER_BATTLE_RSP
	optional Proto_CSBattleInfo                            battle_info_ntf                                 = 29;            //E_CS_BATTLE_INFO_NTF
	optional Proto_FightPkg                                fight                                           = 30;            //E_CS_FIGHT_PKG
	optional Proto_CSStateNtf                              state_ntf                                       = 31;            //E_CS_STATE_NTF
	optional Proto_CSRoomDestroyNtf                        room_destroy_ntf                                = 32;	        //E_CS_ROOM_DESTROY_NTF
	optional Proto_CSBatlleSituationNtf	                   battle_situation_ntf                            = 33;	        //E_CS_BATTLE_SITUATION_NTF	
	optional Proto_CSBattleRltNtf                          battle_rlt_ntf                                  = 34;            //E_CS_BATTLE_RESULT_NTF
	optional Proto_CSCombosTotalHurtNtf					   combos_total_hurt_ntf						   = 35;			//E_CS_COMBOS_TOTAL_HURT_NTF
	optional Proto_CSTransMapNtf						   transmap_ntf									   = 36;			//E_CS_BATTLE_TRANSMAP_NTF
	optional Proto_CSMapStateInfoNtf                       map_state_info_ntf                              = 37;            //E_CS_MAP_STATE_INFO_NTF

	optional Proto_CSBattleFinalReportNtf                  battle_final_report_ntf                         = 39;            //E_CS_BATTLE_FINAL_REPORT_NTF

	optional Proto_CSRoundStateChange                      round_state_change                              = 40;            //E_CS_BATTLE_ROUND_CHANGE
	optional Proto_CSRoundRlt                              round_result                                    = 41;            //E_CS_BATTLE_ROUND_RESULT_NTF
	optional Proto_CSBattleStatisticsNtf                   battle_statistics_ntf                           = 42;          	//E_CS_BATTLE_STATISTICS_NTF
	optional Proto_CSMainIDNtf                             mainid_ntf                                      = 43;            //E_CS_BATTLE_MAINID_NTF
	optional Proto_CSBattleStrongholdNtf 	               strong_hold_ntf                                 = 44;            //E_CS_BATTLE_STRONGHOLD_NTF
	optional Proto_CSBattleNpcAttackNtf 	               npc_attack                                      = 45;            //E_CS_NPC_ATTACK
	optional Proto_CSBattleRotateRsq                       rotate_rsp                                      = 46;            //E_CS_BATTLE_Rotate_RSQ
	optional Proto_CSRevivalCDNtf                          revival_cd_ntf                                  = 47;            //E_CS_HERO_REVIVAL_CD_NTF
	optional Proto_CSSituationAccountNtf                   situation_account_ntf                           = 48;            //E_CS_SITUATION_ACCOUNT_NTF
	optional Proto_CSActorMoveTargetPos                    actor_move_pos                                  = 49;	        //E_CS_Actor_MOVE_TARGETPOS	
	optional Proto_CSPlatformPosRsq                        platform_pos_rsq                                = 50;	        //E_CS_PLATFORM_POS_RSQ
	optional Proto_CSBroadMsg                              broad_msg_ntf                                   = 51;	        //E_CS_BROAD_MESSAGE_NTF
	optional Proto_CSRoomQueryRsp                          room_query                                      = 52;            //E_CS_ROOM_QUERY_RSP
	optional Proto_CSBattleNpcNtf 	                       npc_ntf                                         = 53;            //E_CS_BATTLE_NPC_NTF	
	optional Proto_CSBattleSwitchActiveNtf 	               switch_active_ntf                               = 54;            //E_CS_BATTLE_SWITCH_ACTIVE_NTF	
	optional Proto_CSRoleItemNtf                           role_item_ntf                                   = 55;            //E_CS_ROLE_ITEM_NTF //E_CS_ITEM_DECOMPOS_RSP 
        // E_CS_CURRENCY_EXCHANGE_RSP // E_CS_ACCOUNT_STORAGE_NTF
	optional Proto_CSEquipDressMsg                         equip_dress_rsp                                 = 56;            //E_CS_EQUIP_DRESS_RSP
	optional Proto_CSBattlePlayerRemoveNtf			       battle_player_remove_ntf			               = 57;			//E_CS_BATTLE_PLAYER_REMOVE_NTF
	optional Proto_CSMoneyNtf                              money_ntf                                       = 58;            //E_CS_MONEY_NTF
	optional Proto_CSWeatherNtf                            weather_ntf                                     = 63;	        //E_CS_BATTLE_WEATHER_NTF
	optional Proto_CSSetHeroDebut                          set_hero_debut_rsp                              = 64;            //E_CS_SET_DEBUT_SKILL_RSP
	//optional Proto_CSBattleAward                           battle_award                                    = 65;            //E_CS_BATTLE_END_AWARD

	optional Proto_CSSetSkin                               set_hero_skin_rsp                               = 66;            //E_CS_HERO_SET_SKIN_RSP
	optional Proto_CSBuySkin                               buy_hero_skin_rsp                               = 67;            //E_CS_HERO_BUY_SKIN_RSP

	optional Proto_CSRTTSetClockRsp                        rtt_set_clock_rsp                               = 68;            //E_CS_BATTLESVR_RTT_RSP
	optional Proto_CSRTTAdjustNtf                          rtt_adjust_ntf                                  = 69;            //E_CS_BATTLESVR_RTT_NTF
	optional Proto_CSRoomLookRsp                           room_look_rsp                                   = 70;	        //E_CS_ROOM_LOOK_RSP
	optional Proto_CSAbsorbDmgNtf                          absorb_dmg_ntf                                  = 71;            //E_CS_ABSORB_DMG_NTF
	optional Proto_CSBattleQuitNtf                         battle_quit_ntf                                 = 72;            //E_CS_BATTLESVR_QUIT_RSP    
	optional Proto_CSRoomLookOutRsp                        room_look_out_rsp                               = 73;
	optional Proto_CSRoomInfoChangeNtf                     room_info_change_ntf                            = 74;            //E_CS_ROOM_INFO_CHANGE_NTF
	optional Proto_CSBattleObjCampNtf                      battle_obj_camp_ntf                             = 75;            //E_CS_BATTTLE_OBJ_CAMP_NTF = 141
	optional Proto_CSProgress                              progress_ntf                                    = 76;            //E_CS_BATTLE_PROGRESS_NTF
	optional Proto_CSMallListRsp                           mall_list_rsp                                   = 77;            //E_CS_MALL_LIST_RSP
	optional Proto_CSMallBuyRsp                            mall_buy_rsp                                    = 78;            //E_CS_MALL_BUY_RSP
	
	optional Proto_CSRoleSkinNtf                           role_skin_ntf                                   = 79;            //E_CS_ROLE_SKIN_NTF
	optional Proto_CSPackDataListNtf                       packdata_list_ntf                               = 80;            //E_CS_PACKDATA_LIST		= 77; //礼包信息
	optional Proto_CSSysMsgNtf                             sysmsg_ntf                                      = 81;            //E_CS_SYSMSG_NTF
	optional Proto_CSActorSetPosRsq                        set_pos_rsq                                     = 82;            //E_CS_ACTOR_SETPOS_RSQ  直接将actor拉到某个位置
	
	optional Proto_CSObserverLog                           observer_ntf                                    = 84;            //E_CS_OB_LOG_NTF

	optional Proto_CSWatchBattleRsp                        watch_battle_rsp                                = 86;            //E_CS_WATCH_BATTLE_RSP
	optional Proto_CSBattleWantFightNtf	                   want_fight_ntf                                  = 87;            //E_CS_BATTLE_WANT_FIGHT_NTF
	optional Proto_CSBattleWillFightNtf	                   will_fight_ntf                                  = 88;            //E_CS_BATTLE_WILL_FIGHT_NTF
	optional Proto_CSChatRecvNtf                           chat_recv_ntf                                   = 89;            //E_CS_CHAT_NTF
	optional Proto_CSSetObserver                           set_observer_rsp                                = 90;            //E_CS_SET_BATTLE_OBSERVER_NTF
	
	optional Proto_CSRoleRuneOPRsp                         role_rune_op_rsp                                = 91;            //E_CS_ROLE_RUNE_OP_RSP
	optional Proto_CSRuneMakeRsp                           rune_make_rsp                                   = 92;            //E_CS_RUNE_MAKE_RSP
	optional Proto_CSRunePlateRsp                          rune_plate_rsp                                  = 93;            //E_CS_RUNE_PLATE_RSP
	optional Proto_CSRuneMergeRsp                          rune_merge_rsp                                  = 94;            //E_CS_RUNE_MERGE_RSP
	
	optional Proto_CSSetSkillTalentRsp                     set_skill_talent_rsp                            = 96;            //E_CS_SETUP_SKILL_TALENT_RSP
	optional Proto_CSChangeHeroJobRsp                      change_hero_job_rsp                             = 97;            //E_CS_CHANGE_HERO_JOB_RSP
	optional Proto_CSResetHeroJobRsp                       reset_hero_job_rsp                              = 98;            //E_CS_RESET_HERO_JOB_RSP

	optional Proto_CSBoxExecNtf                            box_exec_ntf                                    = 99;            //E_CS_TREE_BOX_EXEC_NTF
	optional Proto_CSBoxListNtf                            box_list_ntf                                    = 101;           //E_CS_TREE_BOX_LIST_NTF

	optional Proto_CSEquipMsg                              equip_rsp                                       = 102;           // E_CS_AFFIX_RESET_SAVE_RSP E_CS_AFFIX_RESET_CANCLE_RSP
	                                                                                                                        // E_CS_EQUIP_SAVE_BUFF_RSP E_CS_BUFF_RESET_CANCLE_RSP
                                                                                                                            //E_CS_EQUIP_STRENGTH_AFFIX_RSP E_CS_EQUIP_INHERIT_RSP
                                                                                                                            //E_CS_EQUIP_INDENT_RSP

	optional Proto_CSBattleRevivalRsp                      revival_rsp                                     = 104;           //E_CS_BATTLE_REVIVAL_RSP
	optional Proto_CSBattleDiscardNtf                      battle_discard_ntf                              = 105;           //E_CS_BATTLE_DISCARD_NTF
	
	optional Proto_CSPlayerStatisticNtf                    player_statistic_ntf                            = 106;           //E_CS_PLAYER_STATISTIC_NTF
	optional Proto_CSLevelCompleteNtf                      level_complete_ntf                              = 107;           //E_CS_LEVEL_COMPLETE_NTF
	optional Proto_CSRuneActivatePlateRsp                  rune_activate_plate_rsp                         = 108;           //E_CS_RUNE_ACTIVATE_PLATE_RSP    
	
	optional Proto_CSLevelConditionCheckRsp                level_condition_check_rsp                       = 110;           //E_CS_LEVEL_CONDITION_CHECK_RSP
	
	optional Proto_CSFriendApplyRsp                        friend_apply_rsp                                = 111;           //E_CS_SNS_APPLY_FRIEND_RSP
	optional Proto_CSFriendQueryRoleRsp                    friend_query_role_rsp                           = 112;           //E_CS_FRIEND_QUERY_ROLE_RSP
	optional Proto_CSFriendOperateRsp                      friend_operate_rsp                              = 113;           //E_CS_SNS_FRIEND_OPERATE_RSP
	
	optional Proto_CSPlayerOnOffNtf                        player_onoff_ntf                                = 114;           //E_CS_PLAYER_ONOFF_NTF
	optional Proto_CSAIExecMacroNtf                        ai_exec_macro_ntf                               = 115;           //E_CS_AI_EXEC_MACRO_NTF
	optional Proto_CSAITerminalMacroNtf                    ai_terminal_macro_ntf                           = 116;           //E_CS_AI_TERMINAL_MACRO_NTF

	optional Proto_CSSoulBoxInfo                           soulbox                                         = 118;           //E_CS_SOULBOX_PICK_RSP E_CS_SOULBOX_DROP_NTF 
                //  E_CS_SOULBOX_TEAM_DROP_REQUIRE_NTF E_CS_SOULBOX_TEAM_DROP_INFO E_CS_SOULBOX_TEAM_DROP_NTF
	
	optional Proto_CSActorMoveRandom                       actor_move_random                               = 119;	        //E_CS_Actor_MOVE_RANDOM	
	optional Proto_CSFinishLoadingNtf                      finish_loading                                  = 120;           //E_CS_BATTLE_FINISH_LOADING_NTF
	optional Proto_CSBuyBagGridInfo                        buy_bag_grid_rsp                                = 121;           //E_CS_BUY_BAG_GRID_RSP
	optional Proto_CSBagGridArrangeRsp                     arrange_rsp                                     = 122;           //E_CS_ARRANGE_BAG_RSP 
	optional Proto_CSBattlePauseRsp                        battle_pause_rsp                                = 123;           //E_CS_BATTLE_PAUSE_RSP
	optional Proto_CSBattleContinueRsp                     battle_continue_rsp                             = 124;           //E_CS_BATTLE_CONTINUE_RSP
	optional Proto_CSBattleSettingRsp                      battle_setting_rsp                              = 125;           //E_CS_BATTLE_SETTING_RSP
	
	optional Proto_CSFriendRecommendRsp                    friend_recommend_rsp                            = 127;           //E_CS_SNS_FRIEND_RECOMMEND_RSP
	optional Proto_CSSnsQueryRoleRsp                       query_role_rsp                                  = 128;           //E_CS_SNS_QUERY_ROLE_RSP
	optional Proto_CSRoleNtf                               role_ntf                                        = 129;           //E_CS_ROLE_NTF
	optional Proto_CSFriendQueryRsp                        friend_query_rsp                                = 130;           //E_CS_SNS_FRIEND_QUERY_RSP
	optional Proto_GCFriendRecommandNtf                    friend_recommand_ntf                            = 131;           //E_CS_SNS_FRIEND_RECOMMAND_NTF
	optional Proto_CSAddFriendReportTargetNtf		       add_friend_report_ntf                           = 132;           //E_CS_FRIEND_REPORT_TARGET_ADD_FRIEND_NTF
	optional Proto_SCQueryRoleDetailRsp                    query_role_detail_rsp                           = 133;           //E_SC_QUERY_ROLE_DETAIL_RSP

	optional Proto_CSMsgSendRsp                            msg_send_rsp                                    = 134;           //E_CS_SNS_MSG_SEND_RSP
	optional Proto_CSMsgHeadRsp                            msg_head_rsp                                    = 135;           //E_CS_SNS_MSG_HEAD_RSP
	optional Proto_CSMsgHeadNtf                            msg_head_ntf                                    = 136;           //E_CS_SNS_MSG_HEAD_NTF
	optional Proto_CSMsgQueryRsp                           msg_query_rsp                                   = 137;           //E_CS_SNS_MSG_QUERY_RSP
	
	optional Proto_CSMailListRsp                           mail_list_rsp                                   = 138;           //E_CS_SNS_MAIL_LIST_RSP
	optional Proto_CSMailReadRsp                           mail_read_rsp                                   = 139;           //E_CS_SNS_MAIL_READ_RSP
	optional Proto_CSMailDelRsp                            mail_del_rsp                                    = 140;           //E_CS_SNS_MAIL_DEL_RSP
	optional Proto_CSMailNtf                               mail_ntf                                        = 141;           //E_CS_SNS_MAIL_NTF
	optional Proto_CSLoginNtf                              login_ntf                                       = 142;           //E_CS_SNS_LOGIN_NTF
	optional Proto_CSLogoutNtf                             logout_ntf                                      = 143;           //E_CS_SNS_LOGOUT_NTF
	optional Proto_CSGetRankRsp                            rank_rsp                                        = 144;           //E_CS_GET_EXP_RANK_RSP E_CS_GET_GS_RANK_RSP E_CS_GET_SKYAREMA_RANK_RSP
																															//E_CS_GET_MAGIC_RANK_RSP
	optional Proto_CSGuildNtf                         guild_ntf                             = 145;          //E_CS_GUILD_NTF
	optional Proto_CSGuildListRsp                     guild_list_rsp                        = 146;          //E_CS_GUILD_LIST_RSP
	optional Proto_CSGuildQueryRsp                    guild_query_rsp                       = 147;          //E_CS_GUILD_QUERY_RSP
	optional Proto_CSGuildCreateRsp                   guild_create_rsp                      = 148;          //E_CS_GUILD_CREATE_RSP
	optional Proto_CSGuildSetRsp                      guild_set_rsp                         = 149;          //E_CS_GUILD_SET_RSP
	optional Proto_CSGuildApplyRsp                    guild_Apply_rsp                       = 150;          //E_CS_GUILD_APPLY_RSP
	optional Proto_CSGuildInviteRsp                   guild_invite_rsp                      = 151;          //E_CS_GUILD_INVITE_RSP
	optional Proto_CSGuildApproveApplyRsp             guild_approve_apply_rsp               = 152;          //E_CS_GUILD_APPROVE_APPLY_RSP
	optional Proto_CSGuildAcceptInviteRsp             guild_accept_invite_rsp               = 153;          //E_CS_GUILD_ACCEPT_INVITE_RSP
	optional Proto_CSGuildQuitRsp                     guild_quit_rsp                        = 154;          //E_CS_GUILD_QUIT_RSP
	optional Proto_CSGuildPromoteRsp                  guild_promote_rsp                     = 155;          //E_CS_GUILD_PROMOTE_RSP
	optional Proto_CSGuildUpgrateRsp                  guild_upgrate_rsp                     = 156;          //E_CS_GUILD_UPGRATE_RSP
	optional Proto_CSGuildShopListRsp                 guild_shop_list_rsp                   = 157;          //E_CS_GUILD_SHOP_LIST_RSP
	optional Proto_CSGuildShopBuyRsp                  guild_shop_buy_rsp                    = 158;          //E_CS_GUILD_SHOP_BUY_RSP
	optional Proto_CSGuildTechResearchRsp             guild_tech_research_rsp               = 159;          //E_CS_GUILD_TECH_RESEARCH_RSP
	optional Proto_CSGuildTechLearnRsp                guild_tech_learn_rsp                  = 160;          //E_CS_GUILD_TECH_LEARN_RSP
	optional Proto_CSAvatarAddNtf                     avatar_add_ntf                        = 161;          //E_CS_ADD_AVATAR_NTF
	optional Proto_CSObjectSceneTriggerOPNtf          object_scene_trigger_op_ntf           = 162;          //E_CS_BATTLE_OBJ_SCENE_TRIGGER_OP_NTF
	optional Proto_CSQuestNodeNtf                     quest_ntf                             = 163;          //E_CS_QUEST_NODE_NOTIFY E_CS_QUEST_DAILY_NTF
	optional Proto_CSQuestAcceptRsp                   quest_accept_rsp                      = 164;
	optional Proto_CSQuestCompleteRsp                 quest_complete_rsp                    = 165;
	optional Proto_CSLevelEventNtf                    level_event_ntf                       = 166;          //E_CS_LEVEL_EVENT_NTF

	optional Proto_CSSnsLoginDataNtf                  sns_login_data_ntf                    = 169;          //E_CS_SNS_LOGIN_DATA_NTF      
	optional Proto_CSQuestLoopAcceptRsp               quest_accept_loop_rsp                 = 170;          //E_CS_ACCEPT_QUEST_LOOP_RSP
	optional Proto_CSQuestLoopAcceptNtf               quest_loop_ntf                        = 171;          //E_CS_QUEST_LOOP_NTF
	optional Proto_CSOpenBoxRsp                       open_box_rsp                          = 172;          //E_CS_OPEN_BOX_RSP;
	optional Proto_CSUseItemRsp                       use_item_rsp                          = 174;          //E_CS_ITEM_USE_RSP
	optional Proto_CSRoomInviteFriendRsp              room_invite_friend_rsp                = 175;          //E_CS_ROOM_INVITE_FRIEND_RSP
	optional Proto_CSRoomGuildInviteNtf               room_guild_invite_ntf                 = 176;          //E_CS_ROOM_GUILD_INVITE_NTF
	optional Proto_CSRoomGuildApplyRsp                room_guild_apply_rsp                  = 177;          //E_CS_ROOM_GUILD_APPLY_RSP
	optional Proto_CSBattleScoreNtf                   battle_score_ntf                      = 181;          //E_CS_BATTLE_SCORE_NTF
	//optional Proto_CSBattleScoreInvite              battle_friend_invite_rsp              = 182;          //E_CS_BATTLE_SCORE_FRIEND_INVITE_RSP
	optional Proto_CSRedEnvelopesNtf                  red_envelopes_send_ntf                = 185;          //E_CS_RED_ENVELOPES_NTF
	optional Proto_CSRedEnvelopesObtainRsp            red_envelopes_obtain_rsp              = 186;          //E_CS_RED_ENVELOPES_OBTAIN_RSP
	optional Proto_CSRedEnvelopesOpenRsp              red_envelopes_open_rsp                = 187;          //E_CS_RED_ENVELOPES_OPEN_RSP
	optional Proto_CSRedEnvelopesGuildAllRsp          red_envelopes_list_rsp                = 188;          //E_CS_RED_ENVELOPES_GUILD_ALL_RSP
	
	optional Proto_CSGuildWarScheduleListRsp               guildwar_schedule_list_rsp                      = 189;           //E_CS_GUILDWAR_SCHEDULE_LIST_RSP
	optional Proto_CSGuildWarRankListRsp                   guildwar_rank_list_rsp                          = 190;           //E_CS_GUILDWAR_RANK_LIST_RSP
	optional Proto_CSGuildWarChampionListRsp               guildwar_champion_list_rsp                      = 191;           //E_CS_GUILDWAR_CHAMPION_LIST_RSP
	optional Proto_CSGuildWarJoinRsp                       guildwar_join_rsp                               = 192;           //E_CS_GUILDWAR_JOIN_RSP
	optional Proto_CSGuildWarSetTeamRsp                    guildwar_set_team_rsp                           = 193;           //E_CS_GUILDWAR_SET_TEAM_RSP
	optional Proto_CSGuildWarSetHeroRsp                    guildwar_set_hero_rsp                           = 194;           //E_CS_GUILDWAR_SET_HERO_RSP

	optional Proto_CSGuildWarConfirmRsp                    guildwar_confirm_rsp                            = 196;           //E_CS_GUILDWAR_CONFIRM_RSP
	optional Proto_CSGuildWarRoomNtf                       guildwar_room_ntf                               = 197;           //E_CS_GUILDWAR_ROOM_NTF
	
	optional Proto_CSOBWatchMsg                            watch_battle_msg                                = 198;           //E_CS_OB_MSG_NTF
	optional Proto_CSGuildWarNtf                           guildwar_ntf                                    = 199;           //E_CS_GUILDWAR_NTF
	
	optional int32                                         tourament_waitting_sec                          = 200;           //E_CS_START_TOURNAMENT_RSP
	optional Proto_CSSnsSetSignatureRsp                    set_signature_rsp                               = 201;           //E_CS_SNS_SET_SIGNATURE_RSP    
	optional Proto_CSSubstitutionRsp                       substitution_rsp                                = 202;           //E_CS_BATTLE_SUBSTITUTION_RSP
	optional Proto_CSSubstitutionCDInfoNtf                 substitution_cd_ntf                             = 203;           //E_CS_BATTLE_SUBSTITUTION_CD_NTF
	optional Proto_CSCurrencyExchangeRsp                   currency_exchange_rsp                           = 204;           //E_CS_CURRENCY_EXCHANGE_RSP
	optional Proto_CSActorMoveReset                        actor_move_reset                                = 205;           //E_CS_MOVE_RESET
	optional Proto_CS1v1InviteNtf                          one_v_one_invite_ntf                            = 207;           //E_CS_ROOM_1V1_INVITE_NTF
	optional Proto_CS1v1InviteOPNtf                        one_v_one_invite_op_ntf                         = 208;           //E_CS_ROOM_1V1_INVITE_OP_NTF

	optional BattleChallengeInfoNtf                        battle_challenge_info_ntf                       = 209;           //E_CS_BATTLE_CHALLENGE_INFO_NTF
    
    optional Proto_CSMatchNtf match_ntf = 211; //E_CS_MATCH_NTF
    optional Proto_CSSkyArenaData get_skyarena_rsp = 213; //E_CS_GET_SKYAREMADATA_RSP E_CS_GET_SKYAREMADATA_NTF

    optional Proto_CS1v1MatchDataNtf player_1v1_match_data_ntf = 214; // E_CS_PVP_1V1_DATA_NTF

    optional int32   player_level  = 215; // E_CS_GET_LEVEL_BOUNS_RSP 

	optional Proto_CSSkillExtraInfoNtf                skill_extra_info_ntf                  = 220;          //E_CS_SKILL_EXTRA_INFO_NTF
	
	optional Proto_CSPhantomTroupeDataNtf             phantom_troupe_data_ntf               = 221;          //E_CS_PHANTOM_TROUPE_DATA_NTF
	optional Proto_CSRoleRiftDataNtf                  rift_data_ntf                         = 223;          //E_CS_RIFTDATA_NTF
	optional Proto_CSPickSceneDropObjRsp              pick_scene_drop_obj_rsp               = 224;          //E_CS_BATTLE_PICK_DROP_OBJ_RSP	
	optional RoleNoviceGuide                          novice_guide_get_rsp                  = 225;          //E_CS_NOVICE_GUIDE_GET_RSP
	optional RoleNoviceGuide                          novice_guide_set_rsp                  = 226;	        //E_CS_NOVICE_GUIDE_SET_RSP
	optional Proto_CSActorAINtf                       ai_ntf                                = 227;          //E_CS_BATTLE_ACTOR_AI_NTF
	optional Proto_CSCommentDataNtf                   comment_data_ntf                      = 228;          //E_CS_HERO_COMMENT_DATA_NTF

    optional int32           skyarena_award_index = 229; //E_CS_SKYARENA_GET_AWARD_RSP 
	optional Proto_CSBangCommentRsp                   bang_comment_rsp                      = 230;          //
	optional Proto_CSSkillInfoNtf                     skill_info_ntf                        = 231;          //E_CS_SKILL_INFO_NTF
	optional Proto_CSBattleEnergyNtf                  energy_ntf                            = 232;          //E_CS_BATTLE_ENERGY_NTF
	optional Proto_CSRiftFloorBonusesRsp              rift_floor_bonuses_rsp                = 233;          //E_CS_RIIT_FLOOR_BONUSES_RSP
	optional Proto_CSMPveBounsRsp                     mpve_bouns_rsp                        = 234;     
	optional Proto_CSSkillFeatureChangeNtf			  skill_feature_change_ntf			    = 235;			//E_CS_SKILL_FEATURE_CHANGE_NTF
	optional Proto_CSSkillReplacementNtf			  skill_replacement_ntf			    	= 236;			//E_CS_SKILL_REPLACEMENT_NTF
	
	optional Proto_CSGuildActivityDonateRsp                guild_activity_donate_rsp                       = 240;           //E_CS_GUILDACTIVITY_DONATE_TICKET_RSP
	optional Proto_CSGuildActivityStartRsp                 guild_activity_start_rsp                        = 241;           //E_CS_GUILDACTIVITY_START_RSP
	optional Proto_CSGuildActivityChallengeNtf             guild_activity_challenge_ntf                    = 242;           //E_CS_GUILDACTIVITY_CHALLENGE_NTF

	optional Proto_CSSkillChargeInfoNtf                    skill_charge_info_ntf                           = 250;           //E_CS_SKILL_CHARGE_INFO_NTF
	optional Proto_CSQuerySupportListRsp                   query_support_list_rsp                          = 251;           //E_CS_QUERY_SUPPORT_LIST_RSP = 901;//查询战斗内援助列表
	optional Proto_CSCallSupportNtf                        call_support_ntf                                = 252;           //E_CS_CALL_SUPPORT_NTF
	optional CSSupportInviteFriendRsp                      support_invite_friend_rsp                       = 253;           //E_CS_MSGID_SUPPORT_INVITE_FRIEND_RSP
	optional CSSupportReplyInviteRsp                       support_reply_invite_rsp                        = 254;           //E_CS_MSGID_SUPPORT_REPLY_INVITE_RSP
	optional CSSupportInviteNotify                         support_invite_notify                           = 255;           //E_CS_MSGID_SUPPORT_INVITE_NOTIFY
	
	optional Proto_CSExtShopItemRsp                	       ext_shop_item_rsp         		               = 261;           //E_CS_RIIT_SHOP_ITEM_RSP
	optional Proto_CSExtShopBuyItemRsp             	       ext_shop_buy_item_rsp            	           = 262;           //E_CS_RIIT_SHOP_BUY_ITEM_RSP

	optional Proto_CSRoomReadyNtf                          room_ready_ntf                                  = 263;           //E_CS_ROOM_READY_RSP
	optional Proto_CSMPveCharpterInfoRsp                   mpve_charpter_info_rsp                          = 264;           //E_CS_MPVE_CHARPTER_RSP 
	optional Proto_CSRoleMPveDataNtf                       mpve_data_ntf                                   = 265;           //E_CS_ROLEMPVEDATANTF
	
	optional CSTeamCreateRsp                               team_create_rsp                                 = 266;           //E_CS_MSGID_TEAM_CREATE_TEAM_RSP
	optional CSTeamInviteFriendRsp                         team_invite_friend_rsp                          = 267;           //E_CS_MSGID_TEAM_INVITE_FRIEND_RSP
	optional CSTeamQuitNtf                                 team_quit_ntf                                   = 268;           //E_CS_MSGID_TEAM_QUIT_NTF
	optional CSTeamReplyInviteRsp                          team_reply_invite_rsp                           = 269;           //E_CS_MSGID_TEAM_REPLY_INVITE_RSP
	optional CSTeamApplyRsp                                team_apply_rsp                                  = 270;           //E_CS_MSGID_TEAM_APPLY_RSP
	optional CSTeamInfoNotify                              team_info_notify                                = 271;           //E_CS_MSGID_TEAM_INFO_NOTIFY
	optional CSTeamInviteNotify                            team_invite_notify                              = 272;           //E_CS_MSGID_TEAM_INVITE_NOTIFY
	optional CSTeamApplyNotify                             team_apply_notify                               = 273;           //E_CS_MSGID_TEAM_APPLY_NOTIFY
	optional CSTeamQueryListRsp                            team_query_list_rsp                             = 274;           //E_CS_MSGID_TEAM_QUERY_LIST_RSP
	optional CSTeamChangeSettingsNtf				       team_change_settings_ntf			               = 275;			//E_CS_MSGID_TEAM_CHANGE_SETTINGS_NTF
	optional CSTeamStartBattleNtf					       team_start_battle_ntf				           = 276;			//E_CS_MSGID_TEAM_START_BATTLE_NTF
	optional CSTeamStartBattleConfirmNtf			       team_start_battle_confirm_ntf		           = 277; 			//E_CS_MSGID_TEAM_START_BATTLE_CONFIRM_NTF
	optional CSTeamSetPlayerStateNtf				       team_set_player_state_ntf			           = 278;			//E_CS_MSGID_TEAM_SET_PLAYER_STATE_NTF
	optional CSTeamKickNtf							       team_kick_ntf						           = 279;			//E_CS_MSGID_TEAM_KICK_NTF
	optional CSTeamLeaderChangedNtf					       team_leader_changed_ntf				           = 280;			//E_CS_MSGID_TEAM_LEADER_CHANGE_NTF
	optional CSTeamApplyLeaderNtf					       team_apply_leader_ntf				           = 281;			//E_CS_MSGID_TEAM_APPLY_LEADER_NTF
	optional CSTeamApplyLeaderResultNtf				       team_apply_leader_result_ntf		               = 282;			//E_CS_MSGID_TEAM_APPLY_LEADER_RESULT_NTF
	optional CSTeamInviteLeaderNtf 					       team_invite_leader_ntf				           = 283;			//E_CS_MSGID_TEAM_INVITE_FRIEND_LEADER_NTF
	optional CSTeamLeaderRefuseInviteNtf			       team_leader_refuse_invite_ntf		           = 284;			//E_CS_MSGID_TEAM_INVITE_FRIEND_LEADER_REFUSE_NTF
	optional CSTeamStartBattleFailedNtf				       team_start_battle_failed_ntf		               = 285;			//E_CS_MSGID_TEAM_START_BATTLE_FAILED_NTF
	optional CSTeamApplyReplyRsp					       team_apply_reply_rsp				               = 286; 			//E_CS_MSGID_TEAM_APPLY_REPLY_RSP
	optional CSTeamRecallNtf						       team_recall_ntf						           = 287; 			//E_CS_MSGID_TEAM_RECALL_NTF
	optional CSTeamReplyRecallNtf					       team_reply_recall_ntf				           = 288;			//E_CS_MSGID_TEAM_REPLY_RECALL_NTF
	optional CSTeamRecallRsp						       team_recall_rsp						           = 298;			//E_CS_MSGID_TEAM_RECALL_RSP
	optional CSTeamInviteFriendResultNtf			       team_invite_friend_result_ntf		           = 299;			//E_CS_MSGID_TEAM_INVITE_FRIEND_RESULT_NTF
	optional CSTeamAutoMatchRsp						       team_auto_match_rsp					           = 305;			//E_CS_MSGID_TEAM_AUTO_MATCH_RSP
	optional CSTeamAutoMatchResultNtf				       team_auto_match_result_ntf			           = 306;			//E_CS_MSGID_TEAM_AUTO_MATCH_RESULT_NTF
	optional CSTeamDismissNtf						       team_dismiss_ntf					               = 307;			//E_CS_MSGID_TEAM_DISMISS_NTF
	optional CSTeamHalfwayJoinBattleInviteNtf		       team_halfway_join_invite_ntf 		           = 308;			//E_CS_MSGID_TEAM_HALFWAY_JOIN_INVITE_NTF
	optional CSTeamReplyHalfwayJoinBattleInviteRsp 	       team_reply_halfway_join_invite_rsp	           = 309;			//E_CS_MSGID_TEAM_REPLY_HALFWAY_JOIN_INVITE_RSP

	optional Proto_CSBattleSurrenderNtf                    surrender_ntf                                   = 290;           //E_CS_BATTLE_SURRENDER_NTF
	optional Proto_CSBattleSurrenderResultNtf              surrender_result_ntf                            = 291;           //E_CS_BATTLE_SURRENDER_RESULT_NTF
	optional Proto_CSBuffTriggerParaNtf                    buff_trigger_para_ntf                           = 292;           //E_CS_BUFF_TRIGGER_PARA_NTF

	optional Proto_CSSelectHeroRsp                         select_hero_rsp                                 = 293; 
	
	optional Proto_CSLineUpNtf                             lineup_ntf                                      = 295;           //E_CS_LINEUP_NTF
	optional Proto_CSLineUpCancelRsp                       lineup_cancel_rsp                               = 296;           //E_CS_LINEUP_CANCEL_RSP

	optional Proto_CSAccountErrorRsp                       account_error_rsp                               = 297;           //E_CS_ACCOUNT_ERROR_RSP

	optional Proto_CSQuestLoopResetRsp                     reset_quest_loop_rsp                            = 300;           //E_CS_QUEST_LOOP_RESET_RSP
	//optional Proto_CSLadderNtf                             ladder_ntf                                      = 301;           //E_CS_LADDER_NTF

	optional Proto_CSMainCityFriendInfoRsp                 main_city_friend_info                           = 302;           //E_CS_MAIN_CITY_FRIEND_INFO_RSP
	optional Proto_CSMainCityChangeHeroRsp                 main_city_change_hero                           = 303;           //E_CS_MAIN_CITY_CHANGE_HERO_RSP
	optional Proto_CSMainCityCommandFriendLogoutNtf        main_city_command_logout	                       = 304;           //E_CS_MAIN_CITY_RECOMMAND_FRIEND_LOGOUT_NTF

	optional Proto_CSQuestionRsp                           question_rsp                                    = 311;           //E_CS_QUESTION_RSP
	optional Proto_CSAnswerRsp                             answer_rsp                                      = 312;           //E_CS_ANSWER_RSP 
	optional Proto_CSAwardQuestionRewardRsp                award_question_reward_rsp                       = 316;           //E_CS_AWARD_QUESTION_REWARD_RSP 
	optional Proto_CSQuestionStartNtf                      question_start_ntf                              = 317;           //E_CS_QUESTION_START_NTF 
	optional Proto_CSHelpQuestionRsp				       help_question_rsp						       = 318;			//E_CS_HELP_QUESTION_RSP

    optional int32                                         world_question_id                               = 319;           //E_CS_WORLD_QUESTION_NTF

	optional Proto_CSHeroRankUpRsp                         hero_rank_up_rsp                                = 321;           //E_CS_HERO_RANK_UP_RSP
	optional Proto_CSAchieveNtf                            achieve_ntf                                     = 322;           //E_CS_ACHIEVE_NTF
	optional Proto_CSAchieveQueryRsp                    achieve_query_rsp                            = 323;           //E_CS_ACHIEVE_QUERY_RSP
	optional Proto_CSIntrustRefleshNtf                     intrust_quest_reflesh_ntf                       = 324;           //E_CS_INTRUST_QUEST_REFLESH_NTF
    optional int32 achieve_id  = 325; // E_CS_ACHIEVE_GET_REWARD_RSP E_CS_ACHIEVE_FINISH_RSP

	optional Proto_CSPlayerAutoFightRsp                    player_auto_fight_rsp                           = 331;           //E_CS_PLAYER_AUTO_FIGHT_RSP
	
	optional Proto_CSGetPlayerCreditDataRsp                get_player_credit_data_rsp                      = 341;           //E_CS_GET_PLAYER_CREDIT_DATA_RSP
	optional Proto_CSCreditReportPlayerRsp                 credit_report_player_rsp                        = 342;           //E_CS_CREDIT_REPORT_PLAYER_RSP

	optional Proto_GachaPonRsp                             gachapon_rsp                                    = 355;           //E_CS_GACHAPON_RSP 
	optional Proto_CSDrawRsp                               draw_rsp                                        = 356;           //E_CS_DRAW_RSP
	optional Proto_CSSynthesisRsp                          synthesis_rsp                                   = 357;           //E_CS_SYNTHESIS_RSP
	

	optional Proto_CSMiscDataNtf                           misc_data_ntf                                   = 358;           //E_CS_MISC_DATA_NTF

	optional Proto_CSHeroComposeRsp                        hero_compose_rsp                                = 359;           //E_CS_HERO_COMPOSE_RSP
	optional Proto_CSHeroPieceExchangeRsp                  hero_piece_exchange_rsp 	                       = 360;           //E_CS_HERO_PIECE_EXCHANGE_RSP
	//optional Proto_CSSoulBoxJoinSlotRsp                    soulbox_join_rsp 			                   = 361;           //E_CS_SOULBOX_JOIN_SLOT_RSP

	optional Proto_CSNianPracticeDataNtf                   nian_practice_data_ntf                          = 362;           //E_CS_NIAN_PRACTICE_DATA_NTF
	optional Proto_CSNianPracticeRsp                       nian_practice_rsp                               = 363;           //E_CS_NIAN_PRACTICE_RSP
	//optional Proto_CSSoulBoxClearTimeRsp                   soulbox_clear_time_rsp                          = 364;           //E_CS_SOULBOX_CLEAR_TIME_RSP

	optional Proto_CSRoleChapterScoreNtf                   role_chapterscore_ntf                           = 365;           //E_CS_ROLE_CHAPTERSCORE_NTF 
	
	optional Proto_CSMapEnterRsp                           map_enter_rsp                                   = 384;           //E_CS_MAP_ENTER_RSP 进入地图请求
	optional Proto_CSMapLeaveRsp                           map_leave_rsp                                   = 385;           //E_CS_MAP_LEAVE_RSP 地图传送
	optional Proto_CSMapPosResetNtf                        map_pos_reset_ntf                               = 386;           //E_CS_MAP_MOVE_RESET_NTF 位置重置
	
	optional Proto_CSMapActionNtf                          map_action_ntf                                  = 387;           //E_CS_MAP_ACTION_NTF 同步action
	optional Proto_CSMapSvrLoginRsp                        mapsvr_login_rsp                                = 388;           //E_CS_MAPSVR_LOGIN_RSP 登录地图服务器
	optional Proto_CSMapQueryRsp                           map_query_rsp                                   = 389;           //E_CS_MAP_QUERY_RSP 查询地图的服务器地址
	optional Proto_CSEnterViewNtf                          map_enter_view_ntf                              = 390;           //E_CS_MAP_ENTERVIEW_NTF
	optional Proto_CSLeaveViewNtf                          map_leave_view_ntf                              = 391;           //E_CS_MAP_LEAVEVIEW_NTF
	optional Proto_CSMapTransNtf                           map_trans_ntf                                   = 392;           //E_CS_MAP_TRANS_NTF 服务器发出切图请求
	optional Proto_CSMapRefreshViewNtf                     map_refresh_view_ntf                            = 393;           //E_CS_MAP_REFRESH_VIEW_NTF 刷新视野
	optional Proto_CSMapCollectRsp                         map_collect_rsp                                 = 394;           //E_CS_MAP_COLLECT_RSP 采集
	
	optional int32                                         quest_giveup_rsp                                = 419;           //E_CS_GIVE_UP_QUEST_RSP   

	optional Proto_CSSealedPlayerNtf                       sealed_player_ntf                               = 420;           //E_CS_SEALED_PLAYER_NTF   
	
	optional Proto_CSEscortAcceptRsp                       escort_accept_rsp                               = 421;           //E_CS_ESCORT_ACCEPT_RSP
	optional Proto_CSEscortFaildNtf                        escort_faild_ntf                                = 422;           //E_CS_ESCORT_FAILD_NTF
	optional Proto_CSEscortCompleteRsp                     escort_complete_rsp                             = 423;           //E_CS_ESCORT_COMPLETE_RSP   
	
	optional Proto_GCActivityDegreeGetAllRsp               activity_degree_get_all_rsp                     = 424;           //E_GC_ACTIVITY_DEGREE_GET_ALL_RSP    
	optional Proto_GCActivityDegreeGetRewardRsp            activity_degree_get_reward_rsp                  = 425;           //E_GC_ACTIVITY_DEGREE_GET_REWARD_RSP 
	
	optional Proto_CSEscortQueryRsp                        escort_query_rsp                                = 426;           //E_CS_ESCORT_QUERY_RSP     
	optional Proto_CSEscortDataNtf                         escort_data_ntf                                 = 427;           //E_CS_ESCORT_DATA_NTF
	optional Proto_CSEscortErrorRsp                        escort_error_rsp                                = 428;           //E_CS_ESCORT_ERROR_RSP

	optional int32                                         storage_index                                   = 430;           //E_CS_BUY_STORAGE_PAGE_RSP 
	optional Proto_CSStorageMoveRsp                        storage_move_pick_resp                          = 431;           //E_CS_STORAGE_SAVE_RSP //E_CS_STORAGE_PICK_RSP


	optional Proto_CSModifyRoleInfoRsp                     modify_role_info_rsp	                           = 433;           //E_CS_ROLE_INFO_MODIFY_RSP

	optional Proto_CSGetLifeSkillDataRsp                   get_life_skill_data_rsp                         = 440;           //E_CS_LIFE_SKILL_GET_DATA_RSP
	optional Proto_CSLifeSkillLevelUpRsp                   life_skill_level_up_rsp                         = 441;           //E_CS_LIFE_SKILL_LEVEL_UP_RSP
	optional Proto_CSUseLifeSkillRsp                       use_life_skill_rsp                              = 442;           //E_CS_LIFE_SKILL_USE_RSP
	optional Proto_CSLifeSkillDataNtf                      life_skill_data_ntf                             = 443;           //E_CS_LIFE_SKILL_DATA_NTF
	
	optional Proto_CSUseTreasureMapRsp                     use_treasuremap_rsp                             = 445;           //E_CS_USE_TREASUREMAP_RSP 
	optional Proto_CSZoneBaseInfoRsp                       zone_base_info_rsp                              = 450;           //E_CS_ROLE_ZONE_GET_ROLE_INFO_RSP
	optional Proto_CSZoneFriendStatusRsp                   zone_friend_status_rsp                          = 451;           //E_CS_ROLE_ZONE_GET_FRIEND_STATUS_RSP
	optional Proto_CSZoneRoleStatusRsp                     zone_role_status_rsp                            = 452;           //E_CS_ROLE_ZONE_GET_ROLE_STATUS_RSP
	optional Proto_CSZonePublishStatusRsp                  zone_publish_status_rsp                         = 453;           //E_CS_ROLE_ZONE_PUBLISH_STATUS_RSP
	optional Proto_CSZoneStatusDetailRsp                   zone_status_detail_rsp                          = 454;           //E_CS_ROLE_ZONE_STATUS_DETAIL_RSP
	optional Proto_CSZoneStatusUpInfoRsp                   zone_status_up_info_rsp                         = 455;           //E_CS_ROLE_ZONE_STATUS_UP_INFO_RSP
	optional Proto_CSZoneStatusNotesInfoRsp                zone_status_notes_info_rsp                      = 456;           //E_CS_ROLE_ZONE_STATUS_NOTES_INFO_RSP
	optional Proto_CSZoneNoteStatusRsp                     zone_note_status_rsp                            = 457;           //E_CS_ROLE_ZONE_NOTE_STATUS_RSP
	optional Proto_CSZoneMessageBoardRsp                   zone_message_board_rsp                          = 458;           //E_CS_ROLE_ZONE_MESSAGE_BOARD_RSP
	optional Proto_CSZoneStepOnRsp                         zone_step_on_rsp                                = 459;           //E_CS_ROLE_ZONE_STEP_ON_RSP
	optional Proto_CSZonePublishMessageRsp                 zone_publish_message_rsp                        = 460;           //E_CS_ROLE_ZONE_PUBLISH_MESSAGE_RSP
	optional Proto_SCZoneRoleNoteYouNtf                    zone_note_you_ntf                               = 461;           //E_CS_ROLE_ZONE_NOTE_YOU_NTF
	optional Proto_SCZoneRoleReplyYouNtf                   zone_reply_you_ntf                              = 462;           //E_CS_ROLE_ZONE_REPLY_YOU_NTF
	optional Proto_SCZoneRoleMessageNtf                    zone_message_you_ntf                            = 463;           //E_CS_ROLE_ZONE_MESSAGE_YOU_NTF
	optional Proto_SCZoneRoleReplyMessageNtf               zone_reply_message_ntf                          = 464;           //E_CS_ROLE_ZONE_REPLY_MESSAGE_NTF
	
	optional Proto_CSSkillLevelUpRsp                       skill_levelup_rsp                               = 465;           //E_CS_SKILL_LEVELUP_RSP
	optional Proto_CSSkillAwakeResetRsp                    skill_awake_reset_rsp                           = 466;           //E_CS_SKILL_AWAKE_RESET_RSP
	optional Proto_CSSkillSelectTalentRsp                  skill_select_talent_rsp                         = 467;           //E_CS_SKILL_SELECT_TALENT_RSP
	optional Proto_CSSkillDataNtf                          skill_data_ntf                                  = 468;           //E_CS_SKILL_DATA_NTF
	optional Proto_CSSkillAttachRsp                        skill_attach_rsp                                = 469;           //E_CS_SKILL_ATTACH_RSP
	optional Proto_CSSkillAwakeRsp                         skill_awake_rsp                                 = 470;           //E_CS_SKILL_AWAKE_RSP

	optional Proto_CSRiftLevelFastDataRsp                  rift_level_fast_data_rsp                        = 471;			//E_CS_RIFT_LEVEL_FAST_DATA_RSP
	optional Proto_CSRiftLevelAwardRsp                     rift_level_award_rsp                            = 472;			//E_CS_RIFT_LEVEL_AWARD_RSP 
	//optional Proto_CSResetRiftRsp                        reset_rift_rsp                                  = 473;           //E_CS_RESET_RIFT_RSP 


	optional Proto_CSRewardNtf                             reward_ntf                                      = 474;           //E_CS_REWARD_NTF
	optional Proto_GCActivityDataChangeNtf                 activity_data_change_ntf                        = 475;           //E_GC_ACTIVITY_DEGREE_DATA_CHANGE_NTF
	
	optional Proto_CSAttrChgNtf                            attr_chg_ntf                                    = 476;           //E_CS_ATTR_CHG_NTF
	optional Proto_RiftChaptersRsp					       rift_chapters_rsp					           = 477;			//E_CS_RIFT_CHAPTERS_RSP
	optional Proto_CSGemstoneDressRsp                      gemstone_dress_rsp                              = 478;           //E_CS_GEMSTONE_DRESS_RSP
	
	optional Proto_CSShopItemRsp                           shop_item_rsp                                   = 479;           //E_CS_SHOP_ITEM_RSP
	optional Proto_CSGuildGetSysRecommadRsp                guild_get_sys_recommand_rsp                     = 480;			//E_CS_GUILD_GET_SYSTEM_RECOMMAND_RSP
	optional Proto_CSGuildResearchRsp		               guild_research_rsp         			           = 481;			//E_CS_GUILD_RESEARCH_RSP
	optional Proto_CSGuildOperateMergeListRsp              guild_merge_list_op_rsp         	               = 482;			//E_CS_GUILD_MERGE_LIST_OPERATE_RSP
	optional Proto_CSGuildGetBonusRsp       		       guild_get_bonus_rsp         		               = 483;			//E_CS_GUILD_GET_MY_BONUS_RSP
	optional Proto_CSItemExchangeRsp                       item_exchange_rsp                               = 484;           //E_CS_ITEM_EXCHANGE_RSP
	optional Proto_CSBattleEndExtraDataNtf			       battle_end_extra_data_ntf			           = 485;			//E_CS_BATTLE_END_EXTRA_DATA_NTF
	optional Proto_CSEquipStrengthMsg                      equip_strength_rsp                              = 486;           //E_CS_STRENGTH_EQUIP_RSP
	optional Proto_CSEscortCompleteStateNtf			       escort_complete_state_ntf			           = 488;			//E_CS_ESCORT_COMPLETE_STATE_NTF
	optional Proto_CSCreateRoleRsp                         create_role_rsp                                 = 495;           //E_CS_CREATE_ROLE_RSP
	optional Proto_CSStorageThrowMsg                       storage_throwaway_rsp                           = 496;           //E_CS_STORAGE_THROWAWAY_RSP
	optional Proto_CSGetTrapTowerBuffRsp                   traptower_buff_rsp                              = 497;			//E_CS_GET_TRAPTOWER_BUFF_RSP
	optional Proto_CSTrapTowerScoreAwardRsp                traptower_score_award_rsp                       = 498;			//E_CS_TRAPTOWER_SCORE_AWARD_RSP
	optional Proto_CSRoleTrapTowerDataNtf                  role_traptower_data_ntf                         = 499;			//E_CS_ROLE_TRAPTOWER_DATA_NTF 
	optional Proto_CSGetActivityRankListRsp                get_activity_rank_list_rsp                      = 500;           //E_CS_GET_ACTIVITY_RANK_LIST_RSP
	optional Proto_CSGetSixExperimentScoreRewardRsp        get_six_experiment_score_reward_rsp             = 501;           //E_CS_GET_SIX_EXPERIMENT_SCORE_REWARD_RSP
	//optional Proto_CSActivityRankNtf                       activity_rank_ntf                               = 502;           //E_CS_ACTIVITY_RANK_NTF
	optional Proto_CSSixExperimentScoreNtf                 six_experiment_score_ntf                        = 503;           //E_CS_SIX_EXPERIMENT_SCORE_NTF
	optional Proto_CSQuestExpChain                         quest_exp_chain_ntf                             = 504;           //E_CS_ACCEPT_QEC_RSP  E_CS_QEC_FINISH_NTF E_CS_QEC_GIVE_UP_RSP
	optional Proto_CSQECHelpMsg                            quest_exp_chain_help_rsp                        = 505;           //E_CS_QEC_HELP_RSP
	optional Proto_CSQECHelpNTF                            quest_exp_chain_help_ntf                        = 506;           // E_CS_QEC_FINISH_NTF
	optional Proto_CSWelfareGetExpRsp                      welfare_get_exp_rsp                             = 507;           //E_CS_ROLE_WELFARE_GET_EXP_RSP
	optional Proto_CSWelfareExpChangeNtf                   welfare_exp_change_ntf                          = 508;			//E_CS_ROLE_WELFARE_CUR_EXP_CHANGE_NTF
	
	optional Proto_CSChamberListRsp                        chamber_list_rsp                                = 509;           //E_CS_CHAMBER_LIST_RSP
	optional Proto_CSChamberBuyRsp                         chamber_buy_rsp                                 = 510;           //E_CS_CHAMBER_BUY_RSP
	optional Proto_CSChamberSellRsp                        chamber_sell_rsp                                = 511;           //E_CS_CHAMBER_SELL_RSP
	optional Proto_CSChamberSellListRsp                    chamber_sell_list_rsp                           = 512;           //E_CS_CHAMBER_SELL_LIST_RSP

	optional Proto_CSMarketListRsp                         market_list_rsp                                 = 513;           //E_CS_MARKET_LIST_RSP
	optional Proto_CSMarketBuyRsp                          market_buy_rsp                                  = 514;           //E_CS_MARKET_BUY_RSP
	optional Proto_CSMarketSellRsp                         market_sell_rsp                                 = 515;           //E_CS_MARKET_SELL_RSP
	optional Proto_CSMarketSellListRsp                     market_sell_list_rsp                            = 516;           //E_CS_MARKET_SELL_LIST_RSP
	optional Proto_CSMarketPriceRsp                        market_price_rsp                                = 517;           //E_CS_MARKET_PRICE_RSP
	optional Proto_CSMarketSellCancelRsp                   market_sell_cancel_rsp                          = 518;           //E_CS_MARKET_SELL_CANCEL_RSP
	optional Proto_CSMarketFocusRsp                        market_focus_rsp                                = 519;           //E_CS_MARKET_FOCUS_RSP
	optional Proto_CSMarketFocusCancelRsp                  market_focus_cancel_rsp                         = 520;           //E_CS_MARKET_FOCUS_CANCEL_RSP
	optional Proto_CSMarketQueryRsp                        market_query_rsp                                = 521;           //E_CS_MARKET_QUERY_RSP
	optional Proto_CSMarketResellRsp                       market_resell_rsp                               = 522;           //E_CS_MARKET_FOCUS_LIST_RSP

	//optional Proto_CSNewRankQueryRsp                     newrank_query_rsp                               = 523;			//E_CS_NEWRANK_QUERY_RSP 
	optional Proto_CSReleaseTrapTowerBuffRsp               release_traptower_buff_rsp                      = 524;			//E_CS_RELEASE_TRAPTOWER_BUFF_RSP
	optional Proto_CSTrapTowerBuffNtf                      traptower_buff_ntf                              = 525;			//E_CS_TRAPTOWER_BUFF_NTF
	optional Proto_CSTrapTowerScoreNtf                     traptower_score_ntf                             = 526;			//E_CS_TRAPTOWER_SCORE_NTF

	optional Proto_CSSeaDiscoveryDataNtf			       sea_discovery_data_ntf				           = 532;			//E_CS_SEA_DISCOVERY_DATA_NTF
	optional Proto_CSSeaDiscoveryGetRewardRsp              sea_discovery_get_reward_rsp		               = 533;			//E_CS_SEA_DISCOVERY_GET_REWARD_RSP
	optional Proto_CSMarketRecordRsp                       market_record_rsp                               = 534;           //E_CS_MARKET_RECORD_RSP
	optional Proto_CSSeaDiscoveryEndNtf			       	   sea_discovery_end_ntf				           = 535;			//E_CS_SEA_DISCOVERY_END_NTF

    optional Proto_CSSetMilitantMatchBattleInfoRsp         set_militant_match_battle_info_rsp              = 540;           //E_CS_MILITANT_MATCH_SET_BATTLE_INFO_RSP
    optional Proto_CSMilitantMatchBattleInfoNtf            militant_match_battle_info_ntf                  = 541;           //E_CS_MILITANT_MATCH_BATTLE_INFO_NTF
    optional Proto_CSGetMilitantMatchPlayerDataRsp         get_militant_match_player_data_rsp              = 542;           //E_CS_MILITANT_MATCH_GET_PLAYER_DATA_RSP
    optional Proto_CSGetMilitantMatchGlobalDataRsp         get_militant_match_global_data_rsp              = 543;           //E_CS_MILITANT_MATCH_GET_GLOBAL_DATA_RSP
    optional Proto_CSGetMilitantMatchRewardRsp             get_militant_match_reward_rsp                   = 544;           //E_CS_MILITANT_MATCH_GET_REWARD_RSP
    optional Proto_CSMilitantMatchPlayerDataNtf            militant_match_player_data_ntf                  = 545;           //E_CS_MILITANT_MATCH_PLAYER_DATA_NTF
    optional Proto_CSMilitantMatchGlobalDataNtf            militant_match_global_data_ntf                  = 546;           //E_CS_MILITANT_MATCH_GLOBAL_DATA_NTF
    optional Proto_CSMilitantMatchDataNtf                  militant_match_data_ntf                         = 547;           //E_CS_MILITANT_MATCH_DATA_NTF
    optional Proto_CSMilitantMatchEnterMapRsp              militant_match_enter_map_rsp                    = 548;           //E_CS_MILITANT_MATCH_ENTER_MAP_RSP
	optional Proto_CSMilitantMatchKickNtf                  militant_match_kick_ntf                         = 549;           //E_CS_MILITANT_MATCH_KICK_NTF
	
	optional Proto_CSSetBattleDrugRsp				       set_battle_drug_rsp					           = 550;			//E_CS_MSGID_SET_BATTLE_DRUG_RSP
	
	optional Proto_CSMoneyExchangeRsp                      money_exchange_rsp                              = 551;           //E_CS_MONEY_EXCHANGRE_RSP
	optional Proto_CSZoneDeleteNoteRsp                     zone_delete_note_rsp                            = 552;           //E_CS_ROLE_ZONE_DELETE_NOTES_RSP
	optional Proto_CSZoneDeleteStatusRsp                   zone_delete_status_rsp                          = 553;           //E_CS_ROLE_ZONE_DELETE_STATUS_RSP
	optional Proto_CSZoneSetGiftRsp            		       zone_set_gift_rsp              		           = 554;           //E_CS_ROLE_ZONE_SET_GIFT_RSP
	optional Proto_CSZoneDeleteMessageRsp			       zone_delete_message_rsp				           = 555;           //E_CS_ROLE_ZONE_DELETE_MESSAGE_RSP
	optional Proto_CSZoneGetGiftRecordRsp			       zone_get_gift_record_rsp			               = 556;           //E_CS_ROLE_ZONE_GET_GIFT_RECORD_RSP
	optional Proto_CSZoneAddHotRecordRsp			       zone_add_hot_record_rsp				           = 557;           //E_CS_ROLE_ZONE_ADD_HOT_RECORD_RSP
	optional Proto_CSZoneDeleteGiftRecordRsp		       zone_delete_gift_record_rsp			           = 558;           //E_CS_ROLE_ZONE_DELETE_GIFT_RECORD_RSP
	optional Proto_CSQuestAcceptFailedNTF 	               quest_accept_failed_ntf		                   = 559;           //E_CS_QUEST_ACCEPT_FAILED_NTF
	optional Proto_CSZoneGetNoReadRecordRsp			       zone_get_no_read_record_rsp			           = 560;           //E_CS_ROLE_ZONE_GET_NO_READ_RECORD_RSP
	optional Proto_CSRoleGetAllTitleRsp				       role_get_all_title_rsp				           = 561;           //E_CS_ROLE_TITLE_GET_ALL_RSP
	optional Proto_CSRoleSetTitleRsp				       role_set_title_rsp					           = 562;           //E_CS_ROLE_TITLE_SET_VALUE_RSP
	optional Proto_CSRoleIsShowRsp					       role_set_show_rsp					           = 563;           //E_CS_ROLE_TITLE_SET_SHOW_RSP
	optional Proto_CSRoleAddTitleNtf				       role_add_title_ntf					           = 564;           //E_CS_ROLE_ //消耗品TITLE_ADD_NTF
	optional Proto_CSRoleDeleteTitleNtf				       role_delete_title_ntf				           = 565;           //E_CS_ROLE_TITLE_DELETE_NTF
	optional Proto_CSMailGetItemRsp					       mail_get_item_rsp					           = 566;           //E_CS_MAIL_GET_ITEM_RSP

    optional Proto_CSGetOpenServerDaysRsp                  get_open_server_days_rsp                        = 570;           //E_CS_GET_OPEN_SERVER_DAYS_RSP
	optional Proto_CSGetFashionDataRsp                     get_fashion_data_rsp                            = 571;           //E_CS_FASHION_GET_DATA_RSP
	optional Proto_CSGetFashionBagRsp                      get_fashion_bag_rsp                             = 572;           //E_CS_FASHION_GET_BAG_RSP
	optional Proto_CSGetFashionSlotRsp                     get_fashion_slot_rsp                            = 573;           //E_CS_FASHION_GET_SLOT_RSP
	optional Proto_CSSaveFashionSlotRsp                    save_fashion_slot_rsp                           = 574;           //E_CS_FASHION_SAVE_SLOT_RSP
	optional Proto_CSBuyFashionRsp                         buy_fashion_rsp                                 = 575;           //E_CS_FASHION_BUY_RSP
	optional Proto_CSFashionDataNtf                        fashion_data_ntf                                = 576;           //E_CS_FASHION_DATA_NTF
	optional Proto_CSSelectFashionSlotRsp                  select_fashion_slot_rsp                         = 577;           //E_CS_FASHION_SELECT_SLOT_RSP
    optional Proto_CSMallPriceRsp                          mall_price_rsp                                  = 579;           //E_CS_MALL_PRICE_RSP

	optional Proto_SCPacketPieceToClientNtf                packet_piece_to_client_ntf                      = 580;           //E_SC_PACKET_PIECE_TO_CLIENT_NTF

	optional Proto_CSZoneUploadPhotosRsp         	       zone_upload_photos_rsp			               = 581;           //E_CS_ZONE_STATUS_UPLOAD_PHOTOS_RSP
	optional Proto_SCZoneStatusSmallPhotosNtf    	       zone_small_photos_ntf			               = 582;           //E_SC_ZONE_STATUS_SMALL_PHOTOS_NTF
	optional Proto_CSZoneStatusGetPhotosRsp		           zone_get_photo_rsp				               = 583;           //E_CS_ZONE_STATUS_GET_PHOTOS_RSP

	optional Proto_CSSnsGroupListNtf                       sns_group_list_ntf                              = 584;           //E_CS_SNS_GROUP_LIST_RSP
																										                    //E_CS_SNS_GROUP_LIST_NTF												
																													        //E_CS_SNS_GROUP_CREATE_RSP
																													        //E_CS_SNS_GROUP_DISMISS_RSP	
																													        //E_CS_SNS_GROUP_DISMISS_RSP
	optional Proto_CSSnsGroupMemberChgNtf                  sns_group_member_chg_ntf                        = 585;           //E_CS_SNS_GROUP_MOD_ANNOUNCE_RSP
																										                    //E_CS_SNS_GROUP_INVITE_RSP
																										                    //E_CS_SNS_GROUP_KICK_RSP
																										                    //E_CS_SNS_GROUP_MOD_SETTING_RSP																										            																									            
	optional Proto_CSSnsGroupHintNtf                       sns_group_hint_ntf                              = 586;           //E_CS_SNS_GROUP_HINT_NTF             
	optional Proto_CSSnsGroupMessageNtf			           sns_group_message_ntf                           = 587;           //E_CS_SNS_GROUP_GET_MSG_RSP
																										                    //E_CS_SNS_GROUP_SEND_MSG_RSP																						
	optional Proto_CSSnsGroupClearMsgRsp			       sns_group_clear_msg_rsp                         = 588;           //E_CS_SNS_GROUP_CLEAR_MSG_RSP
							
	optional Proto_CSMasterQuestInfoNtf 			       master_quest_info_ntf					       = 590;           //E_CS_MASTER_QUEST_INFO_NTF
	optional Proto_CSMasterQuestCompleteNtf			       master_quest_complete_ntf				       = 591;           //E_CS_MASTER_QUEST_COMPLETE_NTF
	optional Proto_CSMasterQuestGiveupRsp			       master_quest_giveup_rsp					       = 592;           //E_CS_MASTER_QUEST_GIVEUP_RSP
	optional Proto_CSMasterLoopQuestCompleteNtf		       master_loop_quest_complete_ntf			       = 593;           //E_CS_MASTER_LOOP_QUEST_COMPLETE_NTF
	optional Proto_CSMasterQuestQuestionInfoNtf		       mq_question_info_ntf					           = 594;           //E_CS_MASTER_QUEST_QUESTION_INFO_NTF
	optional Proto_CSMasterQuestQuestionAnswerNtf          mq_answer_ntf							       = 595;           //E_CS_MASTER_QUEST_QUESTION_ANSWER_RSP

	optional Proto_CSRegisterGuildCompetitionRsp           register_guild_competition_rsp                  = 600;           //E_CS_GUILD_COMPETITION_REGISTER_RSP
	optional Proto_CSGuildCompetitionEnterMapRsp           guild_competition_enter_map_rsp                 = 601;           //E_CS_GUILD_COMPETITION_ENTER_MAP_RSP
	optional Proto_CSGetGuildCompetitionPlayerDataRsp      get_guild_competition_player_data_rsp           = 602;           //E_CS_GUILD_COMPETITION_GET_PLAYER_DATA_RSP
	optional Proto_CSGuildCompetitionPlayerDataNtf         guild_competition_player_data_ntf               = 603;           //E_CS_GUILD_COMPETITION_PLAYER_DATA_NTF
	optional Proto_CSGetGuildCompetitionRoundInfoRsp       get_guild_competition_round_info_rsp            = 604;           //E_CS_GUILD_COMPETITION_GET_ROUND_INFO_RSP
	optional Proto_CSGuildCompetitionRoundInfoNtf          guild_competition_round_info_ntf                = 605;           //E_CS_GUILD_COMPETITION_ROUND_INFO_NTF
	optional Proto_CSGetGuildCompetitionGlobalDataRsp      get_guild_competition_global_data_rsp           = 606;           //E_CS_GUILD_COMPETITION_GET_GLOBAL_DATA_RSP
	optional Proto_CSGuildCompetitionGlobalDataNtf         guild_competition_global_data_ntf               = 607;           //E_CS_GUILD_COMPETITION_GLOBAL_DATA_NTF
	optional Proto_CSGuildCompetitionAttackRsp             guild_competition_attack_rsp                    = 608;           //E_CS_GUILD_COMPETITION_ATTACK_RSP
	optional Proto_CSGuildBattleInfoNtf                    guild_battle_info_ntf                           = 609;           //E_CS_GUILD_BATTLE_INFO_NTF
	optional Proto_CSGetGuildBattleVensusInfoRsp           get_guild_battle_vensus_info_rsp                = 610;           //E_CS_GUILD_BATTLE_GET_VENSUS_INFO_RSP

	optional Proto_CSCorpsChgNtf                           corps_chg_ntf                                   = 611;           //E_CS_BATTLR_CORPS_CHG_NTF
	optional Proto_CSCorpsApplyRsp                         corps_apply_rsp                                 = 612;           //E_CS_BATTLE_CORPS_APPLY_RSP
	optional Proto_CSCorpsApplyListNtf                     corps_apply_list_ntf                            = 613;           //E_CS_BATTLE_CORPS_APPLY_LIST_RSP
	optional Proto_CSCorpsLeaderConfirmNtf                 corps_leader_confirm_ntf                        = 614;           //E_CS_BATTLE_CORPS_LEADER_CONFIRM_NTF
	optional Proto_CSCorpsInviteeConfirmNtf                corps_invitee_confirm_ntf                       = 615;           //E_CS_BATTLE_CORPS_INVITEE_CONFIRM_NTF
	optional Proto_CSCorpsInviteRsp                        corps_invite_rsp                                = 616;           //E_CS_BATTLE_CORPS_INVITE_RSP
	
	optional Proto_CSAuctionCompetitionSingleMatchRsp      auction_competition_single_match_rsp            = 620;           //E_CS_AUCTION_COMPETITION_SINGLE_MATCH_RSP
	optional Proto_CSAuctionCompetitionTeamMatchRsp        auction_competition_team_match_rsp              = 621;           //E_CS_AUCTION_COMPETITION_TEAM_MATCH_RSP
	optional Proto_CSConfirmTeamMatchRsp                   confirm_team_match_rsp                          = 622;           //E_CS_TEAM_MATCH_CONFIRM_RSP
	optional Proto_CSConfirmTeamMatchNtf                   confirm_team_match_ntf                          = 623;           //E_CS_TEAM_MATCH_CONFIRM_NTF
	optional Proto_CSAuctionCompetitionReportRsp           auction_competition_report_rsp                  = 624;           //E_CS_AUCTION_COMPETITION_REPORT_RSP
	optional Proto_CSAuctionCompetitionDataNtf             auction_competition_data_ntf                    = 625;           //E_CS_AUCTION_COMPETITION_DATA_NTF
	optional Proto_CSGetAuctionCompetitionDataRsp          get_auction_competition_data_rsp                = 626;           //E_CS_AUCTION_COMPETITION_GET_DATA_RSP
	optional Proto_CSGetAuctionCompetitionDailyRewardRsp   get_auction_competition_daily_reward_rsp        = 627;           //E_CS_AUCTION_COMPETITION_GET_DAILY_REWARD_RSP

	optional Proto_CSSetFightPartnerRsp                    set_fight_partner_rsp                           = 630;           //E_CS_SET_FIGHT_PARTNER_RSP;
	optional Proto_CSFightPartnerInfoNtf                   fight_partner_info_ntf                          = 631;           //E_CS_FIGHT_PARTNER_INFO_NTF;
	optional Proto_CSGetFightPartnerInfoRsp                get_fight_partner_info_rsp                      = 632;           //E_CS_GET_FIGHT_PARTNER_INFO_RSP;
	optional Proto_CSSwitchFightPartnerRsp                 switch_fight_partner_rsp                        = 633;           //E_CS_SWITCH_FIGHT_PARTNER_RSP;
	optional Proto_CSConfirmFightPartnerRsp                confirm_fight_partner_rsp                       = 634;           //E_CS_CONFIRM_FIGHT_PARTNER_RSP
	optional Proto_CSFightPartnerRoomInfoNtf               fight_partner_room_info_ntf                     = 635;           //E_CS_FIGHT_PARTNER_ROOM_INFO_NTF;
	optional Proto_CSCastPartnerSupportSkillNtf            cast_partner_support_skill_ntf                  = 636;           //E_CS_CAST_PARTNER_SUPPORT_SKILL_NTF;
	optional Proto_CSBattleChatInfoRsp                     battle_chat_info_rsp                            = 637;           //E_CS_BATTLE_CHAT_INFO_RSP
	optional Proto_CSBattleChatInfoNtf                     battle_chat_info_ntf                            = 638;            //E_CS_BATTLE_CHAT_INFO_NTF

	optional Proto_SCMasterResultNtf         		       master_result_ntf                			   = 641;            //E_SC_MASTER_RESULT_NTF
	optional Proto_SCMasterRecommendNtf                    master_recommend_ntf                     	   = 644;            //E_SC_MASTER_RECOMMEND_NTF
	optional Proto_SCMasterGetTeachTaskRsp                 master_get_teach_task_rsp                       = 645;            //E_SC_MASTER_GET_TEACH_TASK_RSP
	optional Proto_SCMasterSetTaskRsp             	       master_set_teach_task_rsp                       = 646;            //E_SC_MASTER_SET_TEACH_TASK_RSP
	optional Proto_SCMasterUpTaskRsp             	       master_up_teach_task_rsp                        = 647;            //E_SC_MASTER_UP_TEACH_TASK_RSP
	optional Proto_SCMasterTaskUpdateNtf                   master_task_update_ntf                     	   = 648;            //E_SC_MASTER_TASK_UPDATE_NTF
	optional Proto_SCMasterGetTeachRewardRsp               master_get_teach_reward_rsp                     = 649;            //E_SC_MASTER_GET_TEACH_REWARD_RSP
	optional Proto_SCMasterGetTeachResultRsp               master_get_teach_result_rsp                     = 650;            //E_SC_MASTER_GET_TEACH_RESULT_RSP
	optional Proto_SCMasterResultUpdateNtf                 master_result_update_ntf                        = 651;            //E_SC_MASTER_RESULT_UPDATE_NTF
	optional Proto_SCMasterGetResultRewardRsp              master_get_result_reward_rsp                    = 652;            //E_SC_MASTER_GET_RESULT_REWARD_RSP
	optional Proto_SCMasterGetTeachScoreRsp                master_get_teach_score_rsp                      = 653;            //E_SC_MASTER_GET_TEACH_SCORE_RSP
	optional Proto_SCMasterShouldJudgeNtf                  master_should_judge_ntf                         = 654;            //E_SC_MASTER_SHOULD_JUDGE_NTF
	optional Proto_SCMasterFinishStudyNtf                  master_finish_study_ntf                         = 655;            //E_SC_MASTER_FINISH_STUDY_NTF
	optional Proto_SCMasterLeaveRsp            		       master_leave_rsp                   			   = 656;            //E_SC_MASTER_LEAVE_RSP
	
	optional Proto_CSLicenseBlockOpenRsp                   license_block_open_rsp                          = 658;            //E_CS_LICENSE_BLOCK_OPEN_RSP
	optional Proto_CSLicenseSlotUnlockRsp                  license_slot_unlock_rsp                         = 659;            //E_CS_LICENSE_SLOT_UNLOCK_RSP
	optional Proto_CSLicenseSlotSetRsp                     license_slot_set_rsp                            = 660;            //E_CS_LICENSE_SLOT_SET_RSP
	optional Proto_CSLicenseLPExchangeRsp                  license_lp_exchange_rsp                         = 661;            //E_CS_LICENSE_LP_EXCHANGE_RSP
	optional Proto_CSLicenseDataNtf                        license_data_ntf                                = 662;            //E_CS_LICENSE_DATA_NTF
	
    optional Proto_CSTrainingGuideMsg                      training_guide_msg                              = 666; // E_CS_START_TRAINING_GUIDE_BATTLE_RSP E_CS_TRAINING_GUIDE_NTF // E_CS_TRAINING_GUIDE_COMPLETE_RSP

    optional Proto_CSHLicenseExamData   hlicense_exam_data = 667; //E_CS_HLICENSE_EXAM_NTF //E_CS_HLICENSE_EXAM_GET_AWARD_RSP
    optional Proto_CSHLicenseSTData     hlicense_st_data   = 668; //E_CS_HLICENSE_ST_NTF //E_CS_HLICENSE_ST_GET_AWARD_RSP

	optional Proto_CSRoleInfoRsp						   role_info_rsp  								   = 670;			 //E_CS_ROLE_INFO_RSP
	optional Proto_CSRoleInfoRightRsp					   role_info_right_rsp							   = 671;			 //E_CS_ROLE_INFO_RIGHT_RSP
	optional Proto_CSRoleSnsInfoRsp						   role_sns_info_rsp							   = 672;			 //E_CS_ROLE_SNS_INFO_RSP
	optional Proto_CSRoleScoreRsp						   role_score_rsp								   = 673;			 //E_CS_ROLE_SCORE_RSP

	optional Proto_CSPointShopListRsp					   point_shop_list_rsp							   = 680;			 //E_CS_POINT_SHOP_LIST_RSP
	optional Proto_CSPointShopBuyRsp					   point_shop_buy_rsp							   = 681;			 //E_CS_POINT_SHOP_BUY_RSP

	optional Proto_CSFieldBoxInfoRsp					   fieldbox_info_rsp							   = 690;			 //E_CS_FIELDBOX_INFO_RSP
	optional Proto_CSOpenFieldBoxRsp					   open_fieldbox_rsp							   = 691;			 //E_CS_OPEN_FIELDBOX_RSP
	optional Proto_CSLuckyExchangeRsp					   lucky_exchange_rsp							   = 692;			 //E_CS_LUCKY_EXCHANGE_RSP
	
	optional Proto_SCFamilyCreateSuccessNtf				   family_create_ntf							   = 693;			 //E_SC_FAMILY_CREATE_SUCCESS_NTF
	optional Proto_SCFamilyDetailInfoRsp				   family_detail_info_rsp						   = 694;			 //E_CS_FAMILY_DETAIL_INFO_RSP
	optional Proto_SCFamilyModifySignatureRsp			   family_mod_sign_rsp							   = 695;			 //E_CS_FAMILY_MODIFY_SIGN_RSP
	optional Proto_CSFamilyModifyMemoNameRsp			   family_mod_memoname_rsp						   = 696;			 //E_CS_FAMILY_MODIFY_MEMO_NAME_RSP
	optional Proto_SCFamilyEventInfoNtf				   	   family_event_info_ntf						   = 697;			 //E_SC_FAMILY_EVENT_INFO_NTF
	optional proto_CSFamilyInviteRsp				   	   family_invite_rsp							   = 698;			 //E_SC_FAMILY_INVITE_RSP
	optional Proto_SCFamilyInviteInfoNtf				   family_invite_info_ntf						   = 699;			 //E_SC_FAMILY_INVITING_NTF
	optional Proto_SCFamilyInvitedNtf				   	   family_invited_ntf							   = 700;			 //E_SC_FAMILY_INVITE_YOU_NTF
	optional Proto_SCFamilyAcceptInviteRsp				   family_accept_invite_rsp						   = 701;			 //E_SC_FAMILY_ACCEPT_INVITE_RSP
	optional Proto_SCFamilyAcceptInvitedNtf				   family_accept_invited_ntf					   = 702;			 //E_SC_FAMILY_ACCEPT_INVITE_NTF
	optional Proto_SCFamilyLeaveInviteNtf				   family_leave_invite_ntf						   = 703;			 //E_SC_FAMILY_LEAVE_INVITE_NTF

	optional Proto_GCZoneDesignAddRsp					   zone_design_add_rsp							   = 706;			 //E_GC_ZONE_DESIGN_ADD_RSP

	optional Proto_CSCityStateNtf                          city_state_ntf                                  = 707;            //E_CS_CITY_STATE_NTF

	optional Proto_CSMallItemRsp                           mall_item_rsp                                   = 709;            //E_CS_MALL_ITEM_RSP
    optional Proto_CSGetArenaPlayerListRsp                 get_arena_player_list_rsp                       = 710;            //E_CS_ARENA_GET_PLAYER_LIST_RSP
	optional Proto_CSArenaFightRsp                         arena_fight_rsp                                 = 711;            //E_CS_ARENA_FIGHT_RSP
	optional Proto_SCGuildGetEventRsp                      guild_get_event_rsp                        	   = 712;            //E_SC_GUILD_GET_EVENT_RSP
	optional Proto_CSControlActorNtf                       control_actor_ntf                               = 713;            //E_CS_CONTROL_ACTOR_NTF
	optional Proto_SCFamilyCreateInviteListRsp             family_create_invite_rsp                        = 714;            //E_SC_FAMILY_CREATE_INVITE_LIST_RSP
	optional Proto_SCFamilyCallActivityRsp             	   family_call_activity_rsp                        = 715;            //E_SC_FAMILY_CALL_ACTIVITY_RSP
	optional Proto_SCFamilyGetMessageNtf                   family_get_message_ntf                          = 716;            //E_SC_FAMILY_GET_MESSAGE_NTF
	optional Proto_SCFamilyStartActivityRsp                family_start_activity_rsp                       = 717;            //E_SC_FAMILY_START_ACTIVITY_RSP
	optional Proto_SCFamilyMemoOKRsp                	   family_ok_memo_rsp                       	   = 718;            //E_SC_FAMILY_OK_MEMO_RSP
	optional Proto_SCFamilyPayMoneyRsp                	   family_pay_money_rsp                       	   = 719;            //E_SC_FAMILY_PAY_MONEY_RSP
	optional Proto_SCFamilyLeaveMapNtf                     family_leave_map_ntf                            = 720;            //E_SC_FAMILY_LEAVE_MAP_NTF
	optional Proto_CSCityBuffOPNtf                         citybuff_op_ntf                                 = 722;            //E_CS_CITYBUFF_OP_NTF
	optional Proto_CSUseItemConfirmNtf                     use_item_confirm_ntf							   = 723;            //E_CS_ITEM_USE_CONFIRM_NTF
	optional Proto_SCLoginFastNtf                     	   login_fast_ntf							       = 724;            //E_SC_LOGIN_FAST_NTF
	optional Proto_SCLoginFastRoleRsp 				       login_fast_role_rsp						   	   = 725;			 //E_SC_LOGIN_FAST_ROLE_RSP
	optional Proto_CSSignDataNtf                           sign_in_ntf                                     = 726;            //E_CS_SIGN_DATA_NTF
	optional Proto_CSSyncRandSeedNtf                       sync_rand_seed_ntf                              = 727;            //E_CS_SYNC_RAND_SEED_NTF
	optional Proto_CSSignInMonthlyDataNtf                  sign_in_monthly_data_ntf                        = 728;            //E_CS_SIGN_IN_MONTHLY_DATA_NTF
	optional Proto_CSSignInMonthlyRsp 	                   sign_in_monthly_rsp 		                       = 729;            //E_CS_SIGN_IN_MONTHLY_RSP

	optional Proto_CSEnterDungeonRsp                       enter_dungeon_rsp                               = 740;            //E_CS_DUNGEON_ENTER_RSP
	optional Proto_CSGetDungeonAwardRsp                    get_dungeon_award_rsp                           = 741;            //E_CS_DUNGEON_GET_AWARD_RSP
	optional Proto_CSDungeonAwardNtf                       dungeon_award_ntf                               = 742;            //E_CS_DUNGEON_AWARD_NTF
	optional Proto_CSTriggerDungeonEventNtf                trigger_dungeon_event_ntf                       = 743;            //E_CS_DUNGEON_TRIGGER_EVENT_NTF
	optional Proto_SCTssSdkSendDataNtf                	   tss_sdk_send_data_ntf                       	   = 744;            //E_SC_TSS_SDK_SEND_DATA_NTF
	optional Proto_CSStateLeaveRsp                   	   state_leave_rsp                       	       = 745;            //E_CS_STATE_LEAVE_RSP

	optional Proto_CSMultiLevelSelectNtf                   multi_level_select_ntf                          = 746;            //E_CS_MULTI_LEVEL_SELECT_NTF
	optional Proto_CSMultiLevelSelectNextLevelRsp          multi_level_select_next_level_rsp               = 747;            //E_CS_MULTI_LEVEL_SELECT_NEXT_LEVEL_RSP
	optional Proto_CSMultiLevelInfoNtf                     multi_level_info_ntf                            = 748;            //E_CS_MULTI_LEVEL_INFO_NTF
	optional Proto_CSNextMultiLevelConfirmRsp              next_multi_level_confirm_rsp                    = 749;            //E_CS_MULTI_LEVEL_NEXT_CONFIRM_RSP
	optional Proto_CSEnterMultiLevelRsp                    enter_multi_level_rsp                           = 750;            //E_CS_MULTI_LEVEL_ENTER_RSP

	optional Proto_CSQuestionnaireDataNtf				   questionnaire_data_ntf				 		   = 751;			 //E_CS_QUESTIONNAIRE_DATA_NTF
	optional Proto_CSFriendSetSwitchRsp                    friend_set_switch_rsp                           = 752;            //E_SC_FRIEND_SET_SWITCH_RSP
	optional Proto_CSQuestionnaireRsp					   questionnaire_rsp							   = 753;			 //E_CS_QUESTIONNAIRE_RSP
	optional Proto_SCRoleSecretSetModifyRsp				   role_secret_set_rsp							   = 754;			 //E_SC_ROLE_SECRET_SET_RSP
	optional Proto_CSQuitVoiceRoomRsp					   quit_voice_room_rsp							   = 755;			 //E_CS_QUIT_VOICE_ROOM_RSP
	optional Proto_CSJoinVoiceRoomRsp					   join_voice_room_rsp							   = 756;			 //E_CS_QUIT_VOICE_ROOM_RSP
	optional Proto_CSLoginNoticeNtf 					   login_notice_ntf								   = 757; 			 //E_CS_LOGIN_NOTICE_NTF
	optional Proto_CSBindPhoneStatusNtf					   bind_phone_status_ntf						   = 758;			 //E_CS_BIND_PHONE_STATUS_NTF
	optional Proto_CSBindPhoneRsp 						   bind_phone_rsp								   = 759;            //E_CS_BIND_PHONE_RSP

	optional Proto_CSGetWantedDataRsp                      get_wanted_data_rsp                             = 760;            //E_CS_WANTED_GET_DATA_RSP
	optional Proto_CSWantedDataNtf                         wanted_data_ntf                                 = 761;            //E_CS_WANTED_DATA_NTF
	optional Proto_CSWantedChallengeNtf                    wanted_challenge_ntf                            = 762;            //E_CS_WANTED_CHALLENGE_NTF
	optional Proto_CSChgVoiceStateRsp 					   chg_voice_state_rsp 						       = 763;			 //E_CS_CHG_VOICE_STATE_RSP
    optional RoleTitle2CSData                              title2_data                                     = 764;            //E_CS_TITLE2_GET_DATA_RSP E_CS_TITLE2_PROMOTION_RSP 
	optional Proto_CSWatchWantedRewardRsp                  watch_wanted_reward_rsp                         = 765;            //E_CS_WANTED_WATCH_REWARD_RSP
	optional Proto_CSDiamondSynNtf                         diamond_syn_ntf                                 = 766;            //E_CS_DIAMOND_SYN_NTF
	optional Proto_SCGuildSoulboxContributeRsp             guild_box_contribute_rsp                        = 767;            //E_CS_GUILD_SOULBOX_CONTRIBUTE_RSP
	optional Proto_SCGuildGetFightValueRankRsp             guild_get_fight_rank_rsp                        = 768;            //E_SC_GUILD_GET_FIGHT_VALUE_RANK_RSP

	optional Proto_CSSetTrainingConfigRsp				   set_training_config_rsp						   = 769;			 //	E_CS_SET_TRAINING_CONFIG_RSP
	optional Proto_CSBindPhoneAuthenCodeRsp 			   bind_phone_authen_code_rsp					   = 770;			 //E_CS_BIND_PHONE_AUTHEN_CODE_RSP


	optional Proto_CSCityEnterNtf                          city_enter_ntf                                  = 772;            //E_CS_CITY_ENTER_NTF
	
	optional Proto_CSSkillPointAssignRsp                   skill_point_assign_rsp                          = 781;            //E_CS_SKILL_POINT_ASSIGN_RSP
	optional Proto_CSSkillPointResetRsp                    skill_point_reset_rsp                           = 782;            //E_CS_SKILL_POINT_RESET_RSP

	optional Proto_CSBoxExecRsp                            box_exec_rsp                                    = 783;            //E_CS_TREE_BOX_EXEC_RSP


	optional Proto_CSPlayTalkNtf                           play_talk_ntf                                   = 784;            //E_CS_PLAY_TALK_NTF
	optional Proto_CSPrintUnityMsgNtf                      print_unity_msg_ntf                             = 785;            //E_CS_PRINT_UNITY_MSG_NTF

    optional string                                        game_blog_addr                                  = 786;            // E_CS_GET_GAMEBLOG_ADDR_RSP

    optional Proto_CSGetGiftListRsp                        get_gift_list_rsp                               = 790;            //E_CS_GIFT_GET_LIST_RSP
    optional Proto_CSGiftNtf                               gift_ntf                                        = 791;            //E_CS_GIFT_NTF  
    optional Proto_CSAddGiftRsp                            add_gift_rsp                                    = 792;            //E_CS_GIFT_ADD_RSP 
    optional Proto_CSGiftOpRsp                             gift_op_rsp                                     = 793;            //E_CS_GIFT_OP_RSP

	optional Proto_SCHunterProfDataRsp                     hunter_prof_data_rsp                            = 796;            //E_SC_ROLE_HUNTER_PROF_DATA_RSP
	optional Proto_SCHunterProfSelectRsp                   hunter_prof_select_rsp                          = 797;            //E_SC_ROLE_HUNTER_PROF_SELECT_RSP


	optional Proto_CSBarrageGetRsp                         barrage_get_rsp                                 = 801;            //E_CS_BARRAGE_GET_RSP
	optional Proto_CSLevelTransNtf                         level_trans_ntf                                 = 802;            //E_CS_LEVEL_TRANS_NTF

    optional Proto_SCGuildSkillResearchRsp                 guild_skill_research_rsp                        = 805;            //E_SC_GUILD_SKILL_RESEARCH_RSP
    optional Proto_SCGuildHouseValueExchangeRsp            guild_archi_exchange_rsp                        = 806;            //E_SC_GUILD_HOUSE_VALUE_EXCHANGE_RSP

	optional Proto_CSMarketListNumRsp                      market_list_num_rsp                             = 812;            //E_CS_MARKET_LIST_NUM_RSP
	
	optional CSTeamSnsInviteNtf                            team_sns_invite_ntf                             = 813;            //E_CS_TEAM_SNS_INVITE_NTF
	optional Proto_CSOnlineRewardDataNtf                   online_reward_data_ntf                          = 814;            //E_CS_ONLINE_REWARD_DATA_NTF

	optional Proto_SCHealthGameForbidLoginNtf			   healthgame_forbid_login_rsp					   = 815;			 //E_SC_HEALTH_LOGIN_FORBID_NTF
	optional Proto_SCHealthGameRemindInfoNtf			   healthgame_remind_info_ntf					   = 816;			 //E_SC_HEALTH_REMIND_INFO_NTF	
	optional Proto_SCHealthGameForceRestNtf				   healthgame_force_rest_ntf					   = 817;			 //E_SC_HEALTH_FORCE_REST_NTF
	optional Proto_SCActivityGetAllDataRsp				   activity_eight_get_data_rsp					   = 818;			 //E_SC_ACTIVITY_EIGHT_GET_DATE_RSP
	optional Proto_SCActivityGetRewardRsp				   activity_eight_get_rwd_rsp					   = 819;			 //E_SC_ACTIVITY_EIGHT_GET_RWD_RSP
    optional Proto_CSBoxAwardNtf                           box_award_ntf                                   = 820;            //E_CS_BOX_AWARD_NTF
	optional Proto_CSGuildDanceInfoNtf                     guild_dance_info_ntf                            = 821;            //E_CS_GUILD_DANCE_NTF
	optional Proto_SCActivityCanGetRwdNtf                  activity_can_get_rwd_ntf                        = 822;            //E_SC_ACTIVITY_EIGHT_CAN_GET_RWD_NTF
    optional Proto_SCGuildQuestionDataNtf                  guild_question_data_ntf                         = 823;            //E_SC_GUILD_QUESTION_DATA_NTF
	optional Proto_SCGuildQuestionSendMsgNtf               guild_question_send_ntf                         = 824;            //E_SC_GUILD_QUESTION_SEND_MSG_NTF
	optional Proto_SCGuildQuestionChangeNtf                guild_question_change_ntf                       = 825;            //E_SC_GUILD_QUESTION_CHANGE_NTF
	optional Proto_CSFirstPayAwardStateNtf                 first_award_state_ntf                           = 826;            //E_CS_FIRST_PAY_AWARD_STATE_NTF
	optional Proto_SCGuildQuestionJoinRsp                  guild_question_join_rsp                         = 827;            //E_SC_GUILD_QUESTION_JOIN_RSP              
    optional Proto_CSQQVIPInfoChangedNtf                   qq_vip_info_changed_ntf                         = 831;            //E_CS_QQ_VIP_INFO_CHANGED_NTF
	
	optional Proto_SCMasterGetNeededPlayerRsp              master_get_player_rsp                           = 833;             //E_SC_MASTER_GET_NEEDED_PLAYER_RSP
	optional Proto_SCMasterGetApplyListRsp                 master_get_apply_rsp                            = 834;             //E_SC_MASTER_GET_APPLY_LIST_RSP
	optional Proto_SCMasterClearApplyListRsp               master_clear_apply_rsp                          = 835;             //E_SC_MASTER_CLEAR_APPLY_LIST_RSP
	optional Proto_SCMasterOperateApplyRsp                 master_operate_apply_rsp                        = 836;             //E_SC_MASTER_OPERATE_APPLY_RSP
	optional Proto_SCMasterApplyRsp                        master_apply_rsp                                = 837;             //E_SC_MASTER_APPLY_RSP
	optional Proto_SCMasterApplyNtf                        master_apply_ntf                                = 838;             //E_SC_MASTER_APPLY_NTF
	optional Proto_SCMasterModifyRsp                       master_modify_rsp                               = 839;             //E_SC_MASTER_MODIFY_RSP
	optional Proto_CSCheatPunishNtf                        cheat_punish_ntf                                = 840;             //E_CS_CHEAT_PUNISH_NTF
	optional Proto_CSSkillSetUseRsp                        skill_set_use_rsp                               = 841;             //E_CS_SKILL_SET_USE_RSP
	optional Proto_CSInstanceChallengeNtf                  instance_challenge_ntf                          = 842;             //E_CS_INSTANCE_CHALLENGE_NTF
	optional Proto_SCGuildGetTransportListRsp              guild_get_transport_exp_rsp                     = 843;             //E_SC_GUILD_GET_TRANSPORT_LIST_RSP
	optional Proto_SCGuildTransportExpRsp                  guild_transport_exp_rsp                         = 844;             //E_SC_GUILD_TRANSPORT_EXP_RSP
	optional Proto_SCGuildTransExpRequestNtf               guild_trans_exp_request_ntf                     = 845;             //E_SC_GUILD_TRANS_EXP_REQUEST_NTF
	optional Proto_SCGuildTransportExpProcessNtf           guild_trans_exp_process_ntf                     = 846;             //E_SC_GUILD_TRANS_EXP_PROCESS_NTF
	optional Proto_CSBattleVoiceStateSetNtf                voice_state_set_ntf                             = 847;            //E_CS_BATTLE_VOICE_STATE_SET_NTF

	optional Proto_CSRoomMovePlaceNtf                      room_move_place_ntf                             = 850;             //E_CS_ROOM_MOVE_PLACE_NTF  
	optional Proto_CSRoomClosePlaceNtf                     room_close_place_ntf                            = 851;             //E_CS_ROOM_CLOSE_PLACE_NTF    
	optional Proto_CSRoomInviteNtf                         room_invite_ntf                                 = 852;             //E_CS_ROOM_INVITE_NTF    
	optional Proto_CSHallPlayerListRsp                     hall_player_list_rsp                            = 853;             //E_CS_HALL_PLAYER_LIST_RSP    
	optional Proto_CSHallSetInviteRsp                      hall_set_invite_rsp                             = 854;             //E_CS_HALL_SET_INVITE_RSP    
	optional Proto_CSRoomInfoNtf                           room_info_ntf                                   = 855;             //E_CS_ROOM_INFO_NTF
	optional Proto_CSRoomInfoPlaceNtf                      room_place_ntf                                  = 856;             //E_CS_ROOM_INFO_PLACE_NTF	

	optional Proto_CSPlayerGiftDataNtf                     player_gift_data_ntf                            = 857;             //E_CS_GIFT_PLAYER_DATA_NTF
	optional Proto_CSQuickMatchRsp						   quick_match_rsp								   = 858;			  //E_CS_QUICK_MATCH_RSP
	optional Proto_CSPlayerCEDataNtf                       player_ce_data_ntf                              = 859;             //E_CS_CE_PLAYER_DATA_NTF
	optional Proto_CSGetCERewardRsp                        get_ce_reward_rsp                               = 860;             //E_CS_CE_GET_REWARD_RSP
	optional Proto_CSQuickMatchCancelRsp			   	   room_quick_match_cancel_rsp				 	   = 861;			  //E_CS_QUICK_MATCH_CANCEL_REQ
	optional Proto_CSRoomQuerySingleRsp				   	   room_query_single_rsp					  	   = 862;			  //E_CS_ROOMo_QUERY_SINGLE_REQ  
	optional Proto_SCGuildRebateGetRewardRsp			   guild_rebate_get_rwd_rsp					  	   = 863;			  //E_SC_GUILD_REBATE_GET_REWARD_RSP  
    optional Proto_CSGuildGroupNtf                         guild_group_ntf                                 = 864;             //E_CS_GUILD_GROUP_NTF
	optional Proto_CSRoomPlayerEmojiNtf					   room_player_emoji_ntf						   = 865;			  //E_CS_ROOM_PLAYER_EMOJI_NTF
    optional Proto_CSAutoRecoverNtf                        auto_recover_ntf                                = 867;             //E_CS_AUTO_RECOVER_NTF
    optional Proto_CSRisingPurchaseNtf                     rising_purchase_ntf                             = 868;             //E_CS_RISING_PURCHASE_NTF
    optional Proto_CSRisingPurchaseBuyRsp                  rising_purchase_buy_rsp                         = 869;             //E_CS_RISING_PURCHASE_BUY_RSP
    optional Proto_SCGuardianKickInfoNtf                   guardian_kick_info_ntf                          = 870;             //E_SC_GUARDIAN_KICK_INFO_NTF
    optional Proto_SCGuardianGuardedInfoNtf                guardian_guarded_info_ntf                       = 871;             //E_SC_GUARDIAN_GUARDED_INFO_NTF 
    optional Proto_CSFlashUINtf                            flash_ui_ntf                                    = 872;             //E_CS_FLASH_UI_NTF
    optional Proto_SCSafeScoreErrorNtf                     safe_score_error_ntf                            = 873;             //E_SC_SAFE_SCORE_ERR_NTF
	optional Proto_CSPayAwardDataNtf                       pay_award_data_ntf                              = 874;             //E_CS_PAY_AWARD_DATA_NTF
	optional Proto_CSWeekConsumeDataNtf                    week_consume_data_ntf                           = 875;             //E_CS_WEEK_CONSUME_DATA_NTF
	optional Proto_CSWeekConsumeLotteryRsp                 week_consume_lottery_rsp                        = 876;             //E_CS_WEEK_CONSUME_LOTTERY_RSP
	optional Proto_CSPayAwardGetRsp                        pay_award_get_rsp                               = 877;             //E_CS_PAY_AWARD_GET_RSP
	optional Proto_CSWeekConsumeAwardRsp                   week_consume_award_rsp                          = 878;             //E_CS_WEEK_CONSUME_AWARD_RSP
	optional Proto_CSMidasBuyGoodsRsp                      midas_buygoods_rsp                              = 879;             //E_CS_MIDAS_BUY_GOODS_RSP
	optional Proto_CSMidasBuyGoodsNtf                      midas_buygoods_ntf                              = 880;             //E_CS_MIDAS_BUY_GOODS_NTF
	optional Proto_CSLuckBagInfoNtf                        luck_bag_info_ntf                               = 881;             //E_CS_LUCK_BAG_INF_NTF
	optional Proto_CSGrowUpFundsGetAwardRsp                growup_funds_get_award_rsp                      = 882;             //E_CS_GROWUP_FUNDS_GET_AWARD_RSP
	optional Proto_SCMsgSendMsgWindowNtf                   send_msg_window_ntf                             = 883;             //E_SC_MSG_SEND_MSG_WINDOW_NTF
	optional Proto_SCNotifyDataToClientNtf                 notify_data_to_client_ntf                       = 884;             //E_SC_NOTIFY_DATA_TO_CLIENT_NTF
	
	optional Proto_CSRoleSkillUpgradeRsp                   role_skill_upgrade_rsp                          = 885;             //E_CS_ROLE_SKILL_UPGRADE_RSP
	optional Proto_CSRoleSkillRecommondRsp                 role_skill_recommond_rsp                        = 886;             //E_CS_ROLE_SKILL_RECOMMOND_RSP
	optional Proto_CSRoleSkillSetRsp                       role_skill_set_rsp                              = 887;             //E_CS_ROLE_SKILL_SET_RSP
	optional Proto_CSRoleSkillSwitchSetRsp                 role_skill_switch_set_rsp                       = 888;             //E_CS_ROLE_SKILL_SWITCH_SET_RSP
	optional Proto_CSRoleSkillResetRsp                     role_skill_reset_rsp                            = 889;             //E_CS_ROLE_SKILL_RESET_RSP
	optional Proto_CSRoleSkillTransferRsp                  role_skill_transfer_rsp                         = 890;             //E_CS_ROLE_SKILL_TRANSFER_RSP
	optional Proto_CSRoleSkillDataNtf                      role_skill_data_ntf                             = 891;             //E_CS_ROLE_SKILL_DATA_NTF

    optional Proto_CSSelectLevelBlessRsp                   select_level_bless_rsp                          = 900;             //E_CS_LEVEL_BLESS_SELECT_RSP
    optional Proto_CSLevelBlessDataNtf                     level_bless_data_ntf                            = 901;             //E_CS_LEVEL_BLESS_DATA_NTF
    optional Proto_CSActiveLevelBlessRsp                   active_level_bless_rsp                          = 902;             //E_CS_LEVEL_BLESS_ACTIVE_RSP
    optional Proto_CSActiveDoubleRewardRsp                 active_double_reward_rsp                        = 903;             //E_CS_DOUBLE_REWARD_ACTIVE_RSP
    optional Proto_SCActivityQuestChangeNtf                act_quest_change_ntf                            = 904;             //E_SC_ACTIVITY_QUEST_CHANGE_NTF
	optional Proto_CSGemstoneComposeRsp                    gemstone_compose_rsp                            = 905;             //E_CS_GEMSTONE_COMPOSE_RSP
	optional Proto_CSGemstoneExchangeRsp                   gemstone_exchange_rsp                           = 906;             //E_CS_GEMSTONE_EXCHANGE_RSP
    optional Proto_SCEquipMagicCardRsp                 	   equip_magic_card_rsp                        	   = 907;             //E_SC_EQUIP_MAGIC_CARD_RSP

	optional Proto_CSPartnerAssistOPRsp                    partner_assist_op_rsp                           = 908;            //E_CS_PARTNER_ASSIST_OP_RSP
	optional Proto_CSPartnerSkillActiveRsp                 partner_skill_active_rsp                        = 909;            //E_CS_PARTNER_SKILL_ACTIVE_RSP
	optional Proto_CSPartnerRenewRsp                       partner_renew_rsp                               = 910;            //E_CS_PARTNER_RENEW_RSP
	optional Proto_CSPartnerFeedRsp                        partner_feed_rsp                                = 911;            //E_CS_PARTNER_FEED_RSP
	optional Proto_CSPartnerTrainingRsp                    partner_training_rsp                            = 912;            //E_CS_PARTNER_TRAINING_RSP
	optional Proto_CSPartnerDataNtf                        partner_data_ntf                                = 913;            //E_CS_PARTNER_DATA_NTF
	optional Proto_CSPartnerAutoFeedRsp                    partner_auto_feed_rsp                           = 914;            //E_CS_PARTNER_AUTO_FEED_REQ
	optional Proto_CSPartnerFollowRsp                      partner_follow_rsp                              = 915;            //E_CS_PARTNER_FOLLOW_REQ
    optional Proto_SCEquipMagicCardComposeRsp              equip_magic_compose_rsp                         = 916;            //E_SC_EQUIP_MAGIC_CARD_COMPOSE_RSP
	optional Proto_CSPartnerOneNtf                         partner_one_ntf                                 = 917;            //E_CS_PARTNER_ONE_NTF
	optional Proto_CSPartnerAISetRsp                       partner_ai_set_rsp                              = 918;            //E_CS_PARTNER_AI_SET_RSP
    optional Proto_SCFashionComposeRsp		               fashion_compose_rsp                         	   = 919;            //E_SC_FASHION_COMPOSE_RSP
    optional Proto_SCFashionSelectAttrRsp		           fashion_select_attr_rsp                         = 920;            //E_SC_FASHION_SELECT_ATTR_RSP
    optional Proto_SCFashionDressRsp		               fashion_dress_rsp                         	   = 921;            //E_SC_FASHION_DRESS_RSP
	optional Proto_CSBattleDrugCDNtf                       drug_cd_ntf                                     = 922;            //E_CS_BATTLE_DRUG_CD_NTF
	optional Proto_CSTormentTowerAwardGetRsp               torment_tower_award_get_rsp                     = 923;            //E_CS_TORMENT_TOWER_AWARD_GET_RSP
	optional Proto_CSTormentTowerResetRsp                  torment_tower_reset_rsp                         = 924;            //E_CS_TORMENT_TOWER_RESET_RSP
	optional Proto_CSTormentTowerSweepRsp                  torment_tower_sweep_rsp                         = 925;            //E_CS_TORMENT_TOWER_SWEEP_RSP
	optional Proto_CSTormentTowerSweepAwardRsp             torment_tower_sweep_award_rsp                   = 926;            //E_CS_TORMENT_TOWER_SWEEP_AWARD_RSP
	optional Proto_CSTormentTowerSweepSpeedRsp             torment_tower_sweep_speed_rsp                   = 927;            //E_CS_TORMENT_TOWER_SWEEP_SPEED_RSP
	optional Proto_CSTormentTowerDataNtf                   torment_tower_data_ntf                          = 928;            //E_CS_TORMENT_TOWER_DATA_NTF
	optional Proto_CSTormentTowerInfoRsp                   torment_tower_info_rsp                          = 929;            //E_CS_TORMENT_TOWER_INFO_RSP
	optional Proto_CSPartnerBreakThroughRsp                partner_break_through_rsp                       = 930;            //E_CS_PARTNER_BREAK_THROUGH_RSP
	optional Proto_CSPartnerSetGroupRsp                    partner_set_group_rsp                           = 931;            //E_CS_PARTNER_SET_GROUP_RSP
	optional Proto_CSPartnerGroupNtf                       partner_group_ntf                               = 932;            //E_CS_PARTNER_GROUP_NTF
	optional Proto_CSLegendRoadDataNtf                     legend_road_data_ntf                            = 933;            //E_CS_LEGEND_ROAD_DATA_NTF
	optional Proto_CSPvPTaskAwardRsp                       pvp_task_award_rsp                              = 934;            //E_CS_PVP_1V1_TASK_AWARD_RSP
	optional Proto_SCActivityLuckDrawRsp                   act_luck_draw_rsp                               = 935;            //E_SC_ACTIVITY_LUCK_DRAW_RSP
	optional Proto_CSExpRetriveRsp                         exp_retrive_rsp                                 = 936;            //E_CS_EXP_RETRIVE_RSP
	optional Proto_CSAwardRetriveRsp                       award_retrive_rsp                               = 937;            //E_CS_AWARD_RETRIVE_RSP
	optional Proto_CSRetriveDataNtf                        retrive_data_ntf                                = 938;            //E_CS_ROLE_RETRIVE_DATA_NTF
	optional Proto_CSGachaBuyRsp                           gacha_buy_rsp                                   = 939;            //E_CS_GACHA_BUY_RSP
	optional Proto_CSGachaRecordRsp                        gacha_record_rsp                                = 940;            //E_CS_GACHA_RECORD_RSP
	optional Proto_CSMonthCardAwardRsp                     month_card_award_rsp                            = 941;            //E_CS_MONTH_CARD_AWARD_RSP
	optional Proto_CSSupperCardAwardRsp                    supper_card_award_rsp                           = 942;            //E_CS_SUPPER_CARD_AWARD_RSP
}

message Proto_CSRspOne
{
	required int32 cmd = 1;					    //消息id
	optional Proto_CSRsp rsp = 2;				//具体消息
}

message Proto_CSMergeRsp
{
	repeated Proto_CSRspOne rsp_one = 1;
}
